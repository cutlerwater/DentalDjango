if(typeof console == 'undefined'){
    function lg(args){ }
} else {
    function lg(){
        console.log.apply(console, arguments)
    }
}
"use strict";function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function SurveySubmissionFormController(){var e=this;e.onSubmit=function(){}}function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}if("undefined"==typeof $)throw new Error("This application's JavaScript requires jQuery");angular.module("ui.sortable",[]),angular.module("angularSpectrumColorpicker",[]),angular.module("mgcrea.ngStrap.core",[]);var App=angular.module("angle",["ngRoute","ngTouch","ngAnimate","ngStorage","ngCookies","pascalprecht.translate","ui.bootstrap","ui.router","oc.lazyLoad","cfp.loadingBar","ngSanitize","ngResource","ui.utils","elif","restmod","uiRouterStyles","ngInflection","ui.mask","angular-web-notification","phone-input","ngDialog","toaster","uiGmapgoogle-maps","luegg.directives","duScroll","infinite-scroll"]);App.config(["restmodProvider","SERVER_BASE_URL","$httpProvider",function(e,t,n){e.rebase({$config:{urlPrefix:t,name:"data",plural:"data"}},"restmodMixin"),e.rebase("AMSApi"),e.rebase("DirtyModel"),n.defaults.headers.common={},n.defaults.headers.post={},n.defaults.headers.put={},n.defaults.headers.patch={},n.interceptors.push(["$q","$rootScope",function(e,t){return{responseError:function(n){if(!(503===n.status&&n.data&&n.data.data&&n.data.data.maintenance_mode))return e.reject(n);if(t.maintenance_mode=!0,n.config&&n.config.params&&n.config.params.from_intake_page){t.maintenance_mode_common=!0;var a=moment().format("dddd MMMM D");a+=" from 2 PM - 5 PM ET",t.maintenance_timerange=a}}}}])}]),App.run(["$rootScope","$state","$stateParams","$http","$window","responseHelper","$templateCache","$q","authService","ngDialog","Activity","Appointment","Perm","SERVER_BASE_URL","$location","$interval","$api","ENVIRONMENT",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,_,g,f,h){e.$state=t,e.$stateParams=n;try{e.$storage=i.localStorage,e.localStorageSupport=!0}catch(t){e.$storage=null,e.localStorageSupport=!1}e.tzdeferred=r.defer(),e.tzpromise=e.tzdeferred.promise,e.tz=jstz.determine(),e.tzdeferred.resolve(!0),lg("Opening NexHealth..."),s.put("PREVIEWCAMPAIGN","{{preview}}"),"production"==h&&pendo.initialize(l.pendoInitOpts()),e.gadeferred=r.defer(),e.gapromise=e.gadeferred.promise;var v=g(function(){void 0!==i.ga&&void 0!==i.ga.getAll&&(e.gadeferred.resolve(!0),g.cancel(v))});e.$watch(function(){return i.innerWidth},function(t,n){lg("screenwidth",t),e.screenwidth=t});e.set_main_location=function(e){m.set_loc(e)},e.$on("$stateChangeStart",function(e,t,n,a,i){}),e.user={id:l.getUserId(),name:l.getUserName(),email:l.getUserEmail(),title:l.getUserType(),meta_type:l.getUserType(),picture:l.getUserImageUrl(),min_appt_length:l.getMinApptLength(),patientable:l.isPatientable()},e.impersonationSessionId=l.impersonationSessionId(),e.subdomain=l.getUserSubdomain(),e.location_ref=_,e.$on("$stateChangeSuccess",function(t,n,a,o,s){i.scrollTo(0,0),e.pageTitle()}),e.app={name:"NexHealth",description:"The Patient Experience Management Platform",year:(new Date).getFullYear(),layout:{horizontal:!1},viewAnimation:"ng-fadeInUp"},e.pageTitle=function(){var n;n=t.current.data?t.current.data.title+" | "+e.app.name:e.app.name+" | "+e.app.description,e.currTitle=n,document.title=n},e.pageTitle(),e.is_blank=function(e,t){return void 0===e[t]||null==e[t]||0==e[t]||""==e[t]},a.defaults.headers.put["Content-Type"]="application/json;charset=UTF-8",a.defaults.headers.post["Content-Type"]="application/x-www-form-urlencoded",e.loginfork=function(){void 0!==l.getUserId()?t.transitionTo("app.activities"):window.location.href="/login"},e.logOut=function(){l.willUnauthorizeUser(),window.location.href="/login"},e.api_base=u,lg("Done opening NexHealth..."),e.confirm_appt=function(t,n){withoutPopupCallback=function(){this_appt=d.$find(n),this_appt.$then(function(){this_appt.appt={confirmed:!0},this_appt.$save(["appt"]),this_appt.$then(function(t){o.redirectOrToastOnResp(this_appt)&&e.$broadcast("apptConfirmed",t.appt)})})},e.activityProcessed(t,null,null,withoutPopupCallback)},e.message_modal=function(e){return c.open({template:"/app/views/modal/alert.html",data:{text:e.msg,title:e.title},controller:"confirmCtrl",className:"ne__modal"})},e.rename_modal=function(e){return c.open({template:"/app/views/modal/rename.html",data:e,controller:"renameCtrl",className:"ne__modal"})},e.confirm_modal=function(e){return c.open({template:"/app/views/modal/confirm.html",data:e,controller:"confirmCtrl",className:"ne__modal"})},e.reject_appt=function(t,n){withoutPopupCallback=function(){this_appt=d.$find(n),this_appt.$then(function(){dialog=c.open({template:"/app/views/modal/confirm.html",data:{text:"Are you sure you want to cancel this appointment request?"},controller:"confirmCtrl",className:"ne__modal"}),dialog.closePromise.then(function(t){!0===t.value&&this_appt.$destroy().$then(function(){o.redirectOrToastOnResp(this_appt)&&e.$broadcast("cancelEvents",[this_appt.id])})})})},e.activityProcessed(t,null,null,withoutPopupCallback)},e.activityProcessed=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;e?(activity=p.$find(e,{with_trackable:!0}),activity.$then(function(){"AppointmentCreate"==activity.activity_type||"AppointmentResched"==activity.activity_type?appt=activity.trackable:appt=null,activityProcessedAction(activity,appt,n,a)})):t?(appt=d.$find(t),appt.$then(function(){activityProcessedAction(null,appt,n,a)})):a&&a()},activityProcessedAction=function(t,n,a,i){action=void 0,action_at=void 0,n&&(n.confirmed?(action="confirmed",action_at=n.confirmed_at):n.cancelled&&(action="cancelled",action_at=n.cancelled_at)),"undefined"!=typeof action?(t&&t.id&&f("POST","/timelines/"+t.id+"/dismiss",{}),text="This appointment was already "+action,action_at?text=text+" at "+moment(action_at).format("MM/DD/YY hh:mm a")+".":text+=".",confirmDialog=c.open({template:"/app/views/shared/modal-popup-info.html",data:{title:"Already "+action,text:[text]},className:"ne__modal"}),confirmDialog.closePromise.then(function(t){"confirmed"==action?e.$broadcast("apptConfirmed",n):"cancelled"==action?e.$broadcast("cancelEvents",[n.id]):"dismissed"==action&&e.$broadcast("dismissEvents")}),a&&a()):i&&i()}}]),App.config(["uiGmapGoogleMapApiProvider","$stateProvider","$locationProvider","$urlRouterProvider","RouteHelpersProvider",function(e,t,n,a,i){e.configure({key:"AIzaSyB5vynk6YO8nXfbqcYeJ7cArd-8OoHoZdo",libraries:"geometry,visualization"}),lg("Loading routes..."),n.html5Mode(!0),a.otherwise(function(e){e.get("$state");window.location.href="/login"}),t.state("home",{url:"/login",templateUrl:i.basepath("user-authentication/login.html"),controller:"loginCtrl",resolve:i.resolveFor("toaster","ladda","schema-form","home"),data:{title:"Login"}}).state("home.home",{url:"/login",templateUrl:i.basepath("user-authentication/login.html"),controller:"loginCtrl",resolve:i.resolveFor("toaster","ladda","schema-form","home"),data:{title:"Login"}}).state("home.blog",{url:"/blog",templateUrl:i.basepath("home-page/blog.html")}).state("home.single-post",{url:"/blog/single-post",templateUrl:i.basepath("home-page/single-post.html")}).state("home.contact",{url:"/contact",templateUrl:i.basepath("home-page/contact.html"),controller:"contactCtrl",data:{title:"Contact Us"}}).state("home.support",{url:"/support",templateUrl:i.basepath("home-page/support.html"),data:{title:"Support"}}).state("home.marketing",{url:"/for/marketing",templateUrl:i.basepath("home-page/for/marketing.html"),data:{title:"Marketing"}}).state("home.operations",{url:"/for/operations",templateUrl:i.basepath("home-page/for/operations.html"),data:{title:"Operations"}}).state("home.dsos",{url:"/for/dsos",templateUrl:i.basepath("home-page/for/dsos.html"),data:{title:"DSOs"}}).state("home.online-booking",{url:"/features/online-booking",templateUrl:i.basepath("home-page/features/online-booking.html"),data:{title:"Online Booking"}}).state("home.online-payments",{url:"/features/online-payments",templateUrl:i.basepath("home-page/features/online-payments.html"),data:{title:"Online Payments"}}).state("home.reviews",{url:"/features/reviews",templateUrl:i.basepath("home-page/features/reviews.html"),data:{title:"Reviews"}}).state("home.reminders",{url:"/features/reminders",templateUrl:i.basepath("home-page/features/reminders.html"),data:{title:"Reminders"}}).state("home.recalls",{url:"/features/recalls",templateUrl:i.basepath("home-page/features/recalls.html"),data:{title:"Recalls"}}).state("home.two-way-messaging",{url:"/features/two-way-messaging",templateUrl:i.basepath("home-page/features/two-way-messaging.html"),data:{title:"Two-way Messaging"}}).state("home.no-show-and-cancellation",{url:"/features/no-show-and-cancellation",templateUrl:i.basepath("home-page/features/no-show-and-cancellation.html"),data:{title:"No-show & Cancellation"}}).state("home.asap-list",{url:"/features/asap-list",templateUrl:i.basepath("home-page/features/asap-list.html"),data:{title:"ASAP List"}}).state("home.email-and-text-marketing",{url:"/features/email-and-text-marketing",templateUrl:i.basepath("home-page/features/email-and-text-marketing.html"),data:{title:"Email and Text Marketing"}}).state("home.reports",{url:"/features/reports",templateUrl:i.basepath("home-page/features/reports.html"),data:{title:"Reports"}}).state("home.retain",{url:"/solutions/retain",templateUrl:i.basepath("home-page/solutions/retain.html"),data:{title:"Retain"}}).state("home.acquire",{url:"/solutions/acquire",templateUrl:i.basepath("home-page/solutions/acquire.html"),data:{title:"Acquire"}}).state("home.delight",{url:"/solutions/delight",templateUrl:i.basepath("home-page/solutions/delight.html"),data:{title:"Delight"}}).state("home.case-studies",{url:"/testimonials/case-studies",templateUrl:i.basepath("home-page/testimonials/case-studies.html"),data:{title:"Case Studies"}}).state("activate",{url:"/activate",templateUrl:i.basepath("user-authentication/activate.html"),resolve:i.resolveFor("sweet-alert","ladda","home","ngDialog"),controller:"activateCtrl",data:{title:"Activate Account"}}).state("login",{url:"/login",templateUrl:i.basepath("user-authentication/login.html"),controller:"loginCtrl",resolve:i.resolveFor("toaster","ladda","schema-form","home"),data:{title:"Login"}}).state("login_booking_with_time",{url:"/book/:auth_token/:start_time",templateUrl:i.basepath("user-authentication/login-booking.html"),controller:"loginCtrl",resolve:i.resolveFor("toaster","ladda","schema-form","home"),data:{title:"Login"}}).state("login_booking",{url:"/book/:auth_token",templateUrl:i.basepath("user-authentication/login-booking.html"),controller:"loginCtrl",resolve:i.resolveFor("toaster","ladda","schema-form","home"),data:{title:"Login"}}).state("impersonation_login",{url:"/login/:subdomain/:auth_token/:impersonation_session_id",controller:"loginCtrl",resolve:i.resolveFor("toaster","ladda","schema-form","home"),data:{title:"Login"}}).state("globalmap",{url:"/globalmap",templateUrl:i.basepath("widget/global_map.html"),controller:"globalMapCtrl",data:{title:"All locations using NexHealth"}}).state("register-institute",{url:"/register-institute",templateUrl:i.basepath("register-institution.html"),controller:"registerInstituteCtrl",resolve:i.resolveFor("toaster","ladda","schema-form"),onExit:function(){console.log($('link[href="app/homepage/css/background.css"]').remove())},data:{css:"app/homepage/css/background.css",title:"Register Institution"}}).state("register-user",{url:"/register-user/:code",templateUrl:i.basepath("register-user.html"),controller:"registerUserCtrl",resolve:i.resolveFor("toaster","ladda","angular-filter"),data:{title:"Register User"}}).state("forgot-password",{url:"/forgot-password",templateUrl:i.basepath("user-authentication/forgot-password.html"),controller:"forgotPasswordCtrl",resolve:i.resolveFor("schema-form","toaster","ladda","sweet-alert"),data:{title:"Forgot Your Password?"}}).state("reset-password",{url:"/reset-password/:code?subdomain",templateUrl:i.basepath("user-authentication/reset-password.html"),controller:"resetPasswordCtrl",resolve:i.resolveFor("schema-form","toaster","ladda","sweet-alert"),data:{title:"Reset Your Password"}}).state("intake_notr",{url:"/appt/:inst_subdomain",templateUrl:i.basepath("widget/widget.html"),controller:"intakeCtrl",resolve:i.resolveFor("ngDialog","fontawesome","schema-form","toaster","ladda","sweet-alert","moment","moment-timezone","datepicker","BrainTreeDropin"),data:{title:"Create an appointment"}}).state("intake",{url:"/appt/:inst_subdomain/:intake_params",templateUrl:i.basepath("widget/widget.html"),controller:"intakeCtrl",resolve:i.resolveFor("ngDialog","fontawesome","schema-form","toaster","ladda","sweet-alert","moment","moment-timezone","datepicker","BrainTreeDropin"),data:{title:"Create an appointment"}}).state("patient-survey-info",{templateUrl:i.basepath("surveys/survey-patient-landing.html"),controller:"surveyInfoCtrl",url:"/survey/pre/:surveyId/:appointmentId/:instSubdomain/:score",params:{score:{squash:!0,value:null}},data:{title:"Nexhealth Survey"}}).state("patient-survey-form",{url:"/survey/take/:surveyId/:appointmentId/:instSubdomain/:score",templateUrl:i.basepath("surveys/survey-patient-form.html"),controller:"takeSurveyCtrl",params:{data:null,appointment:null,redirecting:!1,timeRedirectionStarted:null,links_values:[],score:{squash:!0,value:null}},data:{title:"Fill out a Survey"}}).state("patient-survey-complete",{url:"/survey/complete/:surveyId/:appointmentId/:instSubdomain",templateUrl:i.basepath("surveys/survey-patient-complete.html"),controller:"surveyCompleteCtrl",params:{data:null,appointment:null},data:{title:"Fill out a Survey"}}).state("patient-payments-online",{url:"/patient-payments-online/:institutionId/:locationId",abstract:!0,templateUrl:i.basepath("patient-payments-online/layout.html"),resolve:i.resolveFor("toaster"),controller:"patientPaymentsOnlineCtrl"}).state("patient-payments-online.patient_search",{url:"/search",templateUrl:i.basepath("patient-payments-online/online-widget/patient/search.html"),controller:"patientPaymentsOnlineWidgetCtrl",params:{patient_form:null,page_header:"Pay Bill"},data:{title:"Pay Bill"}}).state("patient-payments-online.patient_verify",{url:"/verify",templateUrl:i.basepath("patient-payments-online/online-widget/patient/verify.html"),controller:"patientPaymentsOnlineWidgetCtrl",params:{patient_form:null,patient_id:null,page_header:"Pay Bill"},data:{title:"Pay Bill"}}).state("patient-payments-online.invoices_list",{url:"/:rememberToken/:patient_id/invoices/list",templateUrl:i.basepath("patient-payments-online/online-widget/invoices/list.html"),controller:"patientPaymentsOnlineWidgetCtrl",params:{page_header:"Your Invoices"},data:{title:"Your Invoices"}}).state("patient-payments-online.invoices_new",{url:"/:rememberToken/:patient_id/invoices/new",templateUrl:i.basepath("patient-payments-online/online-widget/invoices/new.html"),controller:"patientPaymentsOnlineWidgetCtrl",params:{page_header:"What would you like to pay?"},resolve:i.resolveFor("moment","icons","datepicker"),data:{title:"What would you like to pay?"}}).state("patient_make_payment",{url:"/pay/:paymentId/:institutionId/:rememberToken",abstract:!0,templateUrl:i.basepath("patient-payments-online/layout.html"),controller:"patientPaymentsOnlineCtrl",resolve:i.resolveFor("BrainTreeDropin")}).state("patient_make_payment.form",{url:"",templateUrl:i.basepath("patient-payments-online/make-payment/form.html"),controller:"patientPaymentsOnlineMakePaymentCtrl",params:{location_id:null,is_online_widget:!1,payment:null},data:{title:"Pay online"}}).state("patient_make_payment.thank_you",{url:"/thank_you",templateUrl:i.basepath("patient-payments-online/make-payment/thank_you.html"),controller:"patientPaymentsOnlineMakePaymentCtrl",params:{location_id:null,is_online_widget:!1,payment:null},data:{title:"Thank you"}}).state("patient_make_payment_outdated",{url:"/patient-make-payment/:paymentId/:institutionId/:rememberToken",controller:"patientPaymentsOnlineCtrl"}).state("patient_form_common",{url:"/forms/:formId",templateUrl:i.basepath("patient-form/layout.html"),controller:"patientFormCtrl",resolve:i.resolveFor("moment","moment-timezone","fontawesome"),data:{title:"Form"}}).state("patient_filtered_form_common",{url:"/filtered-forms/:formId/:filterType/:filterId",templateUrl:i.basepath("patient-form/layout.html"),controller:"patientFormCtrl",resolve:i.resolveFor("moment","moment-timezone","fontawesome"),data:{title:"Form"}}).state("patient_form_individual",{url:"/forms/:formId/:rememberToken",templateUrl:i.basepath("patient-form/layout.html"),controller:"patientFormCtrl",resolve:i.resolveFor("moment","moment-timezone","fontawesome"),data:{title:"Form"}}).state("patient_form_thank_you",{url:"/forms_thank_you",templateUrl:i.basepath("patient-form/thank_you.html"),data:{title:"Thank you"}}).state("app",{url:"/app",abstract:!0,templateUrl:i.basepath("app.html"),controller:"appController",resolve:i.resolveFor("moment","moment-timezone","modernizr","icons","ngDialog","toaster","ladda","sweet-alert","xEditable","salesforce-chat")}).state("form",{url:"/f/:inst_id/:id",templateUrl:i.basepath("forms/form-patient-view.html"),controller:"formCtrl",data:{title:"Forms"}}).state("app.forms",{url:"/forms",templateUrl:i.basepath("forms/forms.html"),controller:"formsCtrl",data:{title:"Forms"}}).state("app.form",{url:"/forms/:id",templateUrl:i.basepath("forms/form.html"),controller:"formEditCtrl",abstract:!0}).state("app.form.main",{url:"/main",controller:"formMetaCtrl",templateUrl:i.basepath("forms/tab-views/settings.html"),data:{title:"Form Settings"}}).state("app.form.edit",{url:"/edit",templateUrl:i.basepath("forms/tab-views/edit.html"),data:{title:"Edit Form"}}).state("app.form.preview",{url:"/preview",controller:"formPreviewCtrl",templateUrl:i.basepath("forms/tab-views/preview.html"),data:{title:"Preview Form"}}).state("app.form.responses",{url:"/responses",controller:"formResponsesCtrl",templateUrl:i.basepath("forms/tab-views/responses.html"),resolve:i.resolveFor("ngTable","moment"),data:{title:"Form Responses"}}).state("app.campaigns_templates",{url:"/templates",templateUrl:i.basepath("campaigns/layout_header.html"),controller:"campaignsTemplatesHeaderCtrl",data:{title:"Templates"}}).state("app.campaigns_templates.default",{url:"/default",templateUrl:i.basepath("campaigns/layout.html"),controller:"campaignsCtrl",data:{title:"Templates"}}).state("app.campaigns_templates.custom",{url:"/custom",templateUrl:i.basepath("campaigns/layout.html"),controller:"campaignsCtrl",data:{title:"Custom templates"},params:{is_custom:!0}}).state("app.campaign_template",{url:"/templates/:id",templateUrl:i.basepath("campaigns/campaign_template/layout.html"),controller:"campaignTemplateCtrl",resolve:i.resolveFor("datepicker","sweet-alert","ladda","angularFileUpload"),data:{title:"Template"}}).state("app.campaign_template.actions",{url:"/actions",templateUrl:i.basepath("campaigns/campaign_template/actions/layout.html"),controller:"campaignTemplateActionsCtrl",resolve:i.resolveFor("ngDialog","wysiwyg","angularFileUpload","filestyle","sweet-alert","ladda")}).state("app.campaign_template.performance_old",{url:"/performance",templateUrl:i.basepath("campaigns/campaign_template/performance/layout.html"),controller:"campaignTemplatePerformanceCtrl",data:{title:"Campaign Performance"},params:{date:null},resolve:i.resolveFor("datepicker","ngTable","daterangepicker")}).state("app.campaign_template.performance",{url:"/performance/:survey_id?",templateUrl:i.basepath("campaigns/campaign_template/performance/layout.html"),controller:"campaignTemplatePerformanceCtrl",data:{title:"Campaign Performance"},params:{date:null},resolve:i.resolveFor("datepicker","ngTable","daterangepicker")}).state("app.campaign_template.history",{url:"/history",templateUrl:i.basepath("campaigns/campaign_template/history/layout.html"),controller:"campaignTemplateHistoryCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Campaign Logs"}}).state("app.campaigns_manuals",{url:"/campaigns",templateUrl:i.basepath("campaigns/layout.html"),controller:"campaignsCtrl",params:{is_manual:!0,current_filter:null,location_id:null},data:{title:"Campaigns"},resolve:i.resolveFor("rzslider")}).state("app.campaign_manual",{url:"/campaigns/:id",templateUrl:i.basepath("campaigns/campaign_manual/layout.html"),controller:"campaignManualCtrl",params:{current_filter:null},resolve:i.resolveFor("datepicker","rzslider","sweet-alert","ladda","wysiwyg","angularFileUpload","filestyle","moment"),data:{title:"Campaign"}}).state("app.analytics",{url:"/analytics/:mode?/?from-date&to-date",templateUrl:i.basepath("analytics/layout.html"),controller:"analyticsCtrl",resolve:i.resolveFor("plotly","daterangepicker","ChartJs"),data:{title:"Analytics"}}).state("app.marketplace",{data:{title:"Marketplace"}}).state("app.activities",{url:"/dashboard",templateUrl:i.basepath("activity/activities.html"),controller:"activitiesCtrl",resolve:i.resolveFor("ngTable","datepicker","ChartJs"),data:{title:"Dashboard"}}).state("app.online_booking_dashboard",{url:"/online_booking",templateUrl:i.basepath("online-booking-dashboard/layout.html"),resolve:i.resolveFor("ngTable","datepicker"),controller:"onlineBookingCtrl",data:{title:"Online Booking"}}).state("app.online_booking_dashboard.activities",{url:"/activities"}).state("app.online_booking_dashboard.patients",{url:"/patients",templateUrl:i.basepath("online-booking-dashboard/tabs/patients/layout.html"),controller:"onlineBookingPatientsCtrl",resolve:i.resolveFor("daterangepicker","ladda"),params:{nex_only:!0},data:{title:"Patients"}}).state("app.online_booking_dashboard.customization",{url:"/customization",templateUrl:i.basepath("online-booking-dashboard/tabs/customization/layout.html"),controller:"onlineBookingCustomizationCtrl",resolve:i.resolveFor("ngTable","angularFileUpload","filestyle","sweet-alert","sortable","BrainTreeDropin"),data:{title:"Customization"}}).state("app.online_booking_dashboard.widgets",{url:"/widgets",templateUrl:i.basepath("online-booking-dashboard/tabs/widgets/layout.html"),controller:"onlineBookingWidgetsCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Widgets"}}).state("app.online_booking_dashboard.thirdPartyAnalytics",{url:"/thirdPartyAnalytics",templateUrl:i.basepath("online-booking-dashboard/tabs/thirdPartyAnalytics/layout.html"),controller:"onlineBookingThirdPartyAnalyticsCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Third Party Analytics"}}).state("app.settings",{url:"/settings",templateUrl:i.basepath("settings/settings.html"),controller:"settingsCtrl",resolve:i.resolveFor("angularFileUpload")}).state("app.settings.integrations",{url:"/integrations/:emrName",templateUrl:i.basepath("settings/tabs/integrations.html"),controller:"integrationsCtrl"}).state("app.callbacks",{url:"/callbacks/:emrName/:action?code",templateUrl:i.basepath("callbacks.html"),controller:"callbacksCtrl"}).state("app.settings.personal",{url:"/personal",templateUrl:i.basepath("settings/tabs/personal-settings.html"),controller:"personalSettingsCtrl",data:{title:"Personal Info"}}).state("app.settings.custom_msgs",{url:"/custom_msgs",templateUrl:i.basepath("settings/tabs/custommsgs.html"),controller:"CustomMsgsLocationCtrl"}).state("app.settings.manage_users",{url:"/manage_users",templateUrl:i.basepath("settings/tabs/manage_users/layout.html"),controller:"manageUsersCtrl",resolve:i.resolveFor("ngTable","ngDialog"),data:{title:"Manage Users"}}).state("app.settings.notifications",{url:"/notifications",templateUrl:i.basepath("settings/tabs/notifications.html"),controller:"staffNotificationsCtrl",data:{title:"Notifications"}}).state("app.settings.appointments",{url:"/appointments",templateUrl:i.basepath("settings/tabs/apptsettings.html"),controller:"appointmentSettingsCtrl"}).state("app.add-patient",{url:"/add-patient",templateUrl:i.basepath("add-patient.html"),controller:"addPatientCtrl",data:{title:"Add a patient"}}).state("app.patients",{url:"/patients",templateUrl:i.basepath("patients/layout.html"),abstract:!0,resolve:i.resolveFor("ngTable"),data:{title:"Patients"}}).state("app.patients.patients",{url:"/patients",templateUrl:i.basepath("patients/tabs/patients.html"),controller:"patientsCtrl",data:{title:"Patients"}}).state("app.patients.unsubscribe",{url:"/unsubscribe",templateUrl:i.basepath("patients/tabs/unsubscribe.html"),controller:"patientsUnsubscribeCtrl",data:{title:"Unsubscribe"}}).state("app.patient",{url:"/patients/:id",templateUrl:i.basepath("patients/patient/layout.html"),controller:"patientCtrl",data:{title:"Patient"}}).state("app.patient.activity",{url:"/activity",templateUrl:i.basepath("patients/patient/tabs/activity.html"),controller:"activitiesCtrl",resolve:i.resolveFor("ngTable","datepicker","ChartJs"),params:{is_patient_tab:!0},data:{title:"Activity"}}).state("app.patient.conversation",{url:"/conversations/:conversationId",templateUrl:i.basepath("patients/patient/tabs/conversation.html"),controller:"conversationCtrl",resolve:i.resolveFor("angularFileUpload","filestyle"),data:{title:"Messages"}}).state("app.patient.subscriptions",{url:"/subscriptions",templateUrl:i.basepath("patients/patient/tabs/subscriptions.html"),controller:"patientSubscriptionsCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Communication Preferences"}}).state("app.patient.appointments",{url:"/appointments",templateUrl:i.basepath("patients/patient/tabs/appointments.html"),controller:"apptPatientCtrl",resolve:i.resolveFor("datepicker","ngTable"),data:{title:"Appointments"}}).state("app.patient.payments",{url:"/payments",templateUrl:i.basepath("shared/payments/layout.html"),controller:"patientPaymentsCtrl",resolve:i.resolveFor("ngTable","daterangepicker","datepicker"),data:{title:"Payments"}}).state("app.payments",{url:"/payments",templateUrl:i.basepath("payments/layout.html"),controller:"paymentsCtrl",data:{title:"Payments"}}).state("app.payments.request-payment",{url:"/request-payment",templateUrl:i.basepath("payments/tabs/request-payment.html"),controller:"paymentsAddCtrl",data:{title:"Request Payment"},resolve:i.resolveFor("datepicker")}).state("app.payments.analytics",{url:"/analytics",templateUrl:i.basepath("payments/tabs/analytics.html"),controller:"paymentsAnalyticsCtrl",data:{title:"Payment Analytics"},resolve:i.resolveFor("daterangepicker","ChartJs")}).state("app.payments.payment-history",{url:"/payment-history",templateUrl:i.basepath("shared/payments/layout.html"),controller:"paymentsHistoryCtrl",resolve:i.resolveFor("ngTable","daterangepicker"),params:{is_online_widget:!1},data:{title:"Payment History"}}).state("app.payments.patients",{url:"/patients",templateUrl:i.basepath("online-booking-dashboard/tabs/patients/layout.html"),controller:"onlineBookingPatientsCtrl",resolve:i.resolveFor("ngTable","daterangepicker","ladda"),params:{has_braintree_payment_methods:!0},data:{title:"Patients"}}).state("app.payments.online-widget",{url:"/online-widget",templateUrl:i.basepath("shared/payments/layout.html"),controller:"paymentsHistoryCtrl",resolve:i.resolveFor("ngTable","daterangepicker"),data:{title:"Online Widget"},params:{is_online_widget:!0}}).state("app.payments.bank-setup",{url:"/bank-setup",templateUrl:i.basepath("payments/tabs/bank-setup.html"),controller:"paymentsBankSetupCtrl",resolve:i.resolveFor("sweet-alert"),data:{title:"Bank Setup"}}).state("app.calendar",{url:"/calendar",templateUrl:i.basepath("calendar/calendar.html"),controller:"calendarCtrl",resolve:i.resolveFor("uiCalendar","fullCalendar","datepicker"),data:{title:"Calendar"}}).state("app.appointment-slots-waitlist",{url:"/waitlist",templateUrl:i.basepath("appointment-slots-waitlist/layout.html"),controller:"appointmentSlotsWaitlistCtrl",resolve:i.resolveFor("datepicker"),data:{title:"Waitlist"}}).state("app.messages",{url:"/messages",templateUrl:i.basepath("conversations/layout.html"),controller:"conversationListCtrl",data:{title:"Messages"}}).state("app.messages.message",{url:"/:id",templateUrl:i.basepath("conversations/item.html"),controller:"conversationCtrl",resolve:i.resolveFor("angularFileUpload","filestyle"),data:{title:"Messages"},params:{show_conversations_list:!0,clear_unread_messages_count:!1}}).state("app.compose",{url:"/compose",templateUrl:i.basepath("compose-message.html"),controller:"composeCtrl",data:{title:"New Message"}}).state("app.patient.medications",{url:"/medication",templateUrl:i.basepath("medication-list.html"),controller:"medicationCtrl",resolve:i.resolveFor("ui-select"),data:{title:"Medication"}}).state("app.patient.documents",{url:"/documents",templateUrl:i.basepath("documents.html"),controller:"documentCtrl",resolve:i.resolveFor("angularFileUpload","filestyle"),data:{title:"Documents"}}).state("app.style-guide",{url:"/style-guide",controller:"styleGuideCtrl",templateUrl:i.basepath("style-guide/style-guide.html"),data:{title:"Style Guide"}}).state("cancel-appointment",{url:"/cancel-appointment",templateUrl:i.basepath("landing-pages/appointment/cancel.html"),data:{title:"Cancel Appointment"}}).state("confirm-appointment",{url:"/confirm-appointment",templateUrl:i.basepath("landing-pages/appointment/confirm.html"),data:{title:"Confirm Appointment"}}).state("confirm-appt",{url:"/confirm_appt/:code",controller:"patientApptConfirmCtrl",templateUrl:i.basepath("landing-pages/appointment/confirm.html"),data:{title:"Confirm Appointment"}}).state("confirm-appt-new",{url:"/confirm_appt_new/:code",controller:"patientApptConfirmNewCtrl",templateUrl:i.basepath("landing-pages/appointment/confirm.html"),data:{title:"Confirm Appointment"}}).state("confirm-appointment-slots-waitlist",{url:"/confirm_waitlist/:code",controller:"patientAppointmentSlotsWaitlistConfirmCtrl",templateUrl:i.basepath("landing-pages/appointment_slots_waitlist_confirm.html"),data:{title:"Confirm Waitlist"}}).state("spine-clinical-upcoming-appointment",{url:"/spine-clinical-upcoming-appointment",templateUrl:i.basepath("temp/spine-clinical/email/upcoming-appointment.html"),data:{title:"Email"}}).state("spine-clinical-intake-form-patient",{url:"/spine-clinical-intake-form-patient",templateUrl:i.basepath("temp/spine-clinical/intake-form-patient-view.html"),data:{title:"Email Reminder"}}).state("spine-clinical-activities",{url:"/spine-clinical-activities",templateUrl:i.basepath("temp/spine-clinical/activities.html"),data:{title:"Email Reminder"}}).state("spine-clinical-intake-form-provider",{url:"/spine-clinical-intake-form-provider",controller:"spineClinicalForm",templateUrl:i.basepath("temp/spine-clinical/intake-form-provider-view.html"),data:{title:"Email Reminder"}}).state("spring-street-derm-upcoming-appointment",{url:"/spring-street-derm-upcoming-appointment",templateUrl:i.basepath("temp/spring-street-derm/email/upcoming-appointment.html"),data:{title:"Email"}}).state("app.form-responses",{url:"/form-responses",templateUrl:i.basepath("form-responses/layout.html"),controller:"FormResponsesCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Forms"}}).state("app.enlive",{url:"/enlive",templateUrl:i.basepath("enlive/layout.html"),controller:"EnliveCtrl",data:{title:"Forms"}}).state("app.enlive.requests",{url:"/requests",templateUrl:i.basepath("enlive/requests/layout.html"),controller:"EnliveRequestsCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Form Requests"}}).state("app.enlive.forms",{url:"/forms",templateUrl:i.basepath("enlive/forms/layout.html"),controller:"EnliveFormsCtrl",resolve:i.resolveFor("ngTable"),data:{title:"Forms & Packets"}}).state("app.enlive.settings",{url:"/settings",templateUrl:i.basepath("enlive/settings/layout.html"),controller:"EnliveSettingsCtrl",data:{title:"Settings"}})}]).config(["$ocLazyLoadProvider","APP_REQUIRES",function(e,t){e.config({debug:!1,events:!0,modules:t.modules})
}]).config(["$controllerProvider","$compileProvider","$filterProvider","$provide",function(e,t,n,a){App.controller=e.register,App.directive=t.directive,App.filter=n.register,App.factory=a.factory,App.service=a.service,App.constant=a.constant,App.value=a.value}]).config(["$translateProvider",function(e){e.useStaticFilesLoader({prefix:"app/i18n/",suffix:".json"}),e.preferredLanguage("en"),e.useLocalStorage(),e.usePostCompiling(!0)}]).config(["cfpLoadingBarProvider",function(e){e.includeBar=!0,e.includeSpinner=!1,e.latencyThreshold=500,e.parentSelector="#main"}]).factory("authService",["authService",function(e){return function(t,n){Bugsnag.releaseStage="production",Bugsnag.user={id:e.getUserId(),name:e.getUserName()},Bugsnag.notifyException(t,{diagnostics:{cause:n}})}}]).filter("capitalize",function(){return function(e,t){if(null!=e)return e=e.toLowerCase(),e.substring(0,1).toUpperCase()+e.substring(1)}}).filter("orderObjectByFn",function(){return function(e,t,n){var a=[];return angular.forEach(e,function(e){a.push(e)}),a.sort(function(e,n){return t(e)>t(n)?1:-1}),n&&a.reverse(),a}}).filter("tel",function(){return function(e){if(!e)return"";var t=e.toString().trim().replace(/^\+/,"");if(t.match(/[^0-9]/))return e;var n,a,i;switch(t.length){case 10:n=1,a=t.slice(0,3),i=t.slice(3);break;case 11:n=t[0],a=t.slice(1,4),i=t.slice(4);break;case 12:n=t.slice(0,3),a=t.slice(3,5),i=t.slice(5);break;default:return e}return 1==n&&(n=""),i=i.slice(0,3)+"-"+i.slice(3),(n+" ("+a+") "+i).trim()}}),App.filter("json2",function(){return function(e){return JSON.stringify(e,null," ")}}),EasingFunctions={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return e*(2-e)},easeInOutQuad:function(e){return e<.5?2*e*e:(4-2*e)*e-1},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return--e*e*e+1},easeInOutCubic:function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1- --e*e*e*e},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-8*--e*e*e*e},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1+--e*e*e*e*e},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1+16*--e*e*e*e*e}},App.value("duScrollDuration",450).value("duScrollEasing",EasingFunctions.easeOutCubic).value("duScrollGreedy",!0).value("duScrollOffset",Number((.1*$(window).height()).toFixed())).value("duScrollBottomSpy",!0).constant("APP_COLORS",{primary:"#00CBE6",success:"#70D486",info:"#00CBE6",warning:"#FFC76A",danger:"#FF7581",inverse:"#464b50",green:"#70D486",purple:"#7F98DE",dark:"#3a3f51",yellow:"#FFC76A","gray-darker":"#464b50","gray-dark":"#858A8E",gray:"#A8ABAE","gray-light":"#C3C5C7","gray-lighter":"#DCDEDF"}).constant("USER_TYPES",{provider_types:["Doctor","PhysicianAssistant","NursePractitioner","MedicalAssistant","Dentist","Hygienist"],staff_types:["Staff","RegisteredNurse"]}).constant("APP_MEDIAQUERY",{desktopLG:1200,desktop:992,tablet:768,mobile:480}).constant("APP_REQUIRES",{scripts:{modernizr:["/master/bower_components/modernizr/modernizr.js"],icons:["/master/bower_components/font-awesome/css/font-awesome.min.css","/master/bower_components/simple-line-icons/css/simple-line-icons.css"],moment:["/master/bower_components/moment/min/moment-with-locales.min.js"],"moment-timezone":["/master/bower_components/moment-timezone/builds/moment-timezone-with-data-2012-2022.min.js"],filestyle:["vendor/bootstrap-filestyle/bootstrap-filestyle.js"],elif:["/master/bower_components/ng-elif/src/elif.js"]},modules:[{name:"home",files:["/app/homepage/js/bootstrap-hover-dropdown.min.js","/app/homepage/js/jquery.placeholder.js","/app/homepage/font-awesome/css/font-awesome.min.css","/app/homepage/js/main.js"],serie:!0},{name:"salesforce-chat",files:["/vendor/salesforce/chat.min.js"]},{name:"fontawesome",files:["/master/bower_components/font-awesome/css/font-awesome.min.css"]},{name:"fontawesomeold",files:["/vendor/fontawesome/css/font-awesome-old.css"]},{name:"toaster",files:["/vendor/angularjs-toaster/toaster.min.css"]},{name:"ngTable",files:["/master/bower_components/ng-table/dist/ng-table.js","/master/bower_components/ng-table/dist/ng-table.min.css"]},{name:"uiCalendar",files:["/master/bower_components/angular-ui-calendar/src/calendar.js"]},{name:"fullCalendar",files:["/master/bower_components/fullcalendar/dist/fullcalendar.min.js"]},{name:"rest-mod",files:["/master/bower_components/angular-restmod/dist/angular-restmod.js"]},{name:"ngSmoothScroll",files:["/master/bower_components/ngSmoothScroll/angular-smooth-scroll.js"]},{name:"ngDialog",files:["/master/bower_components/ngDialog/css/ngDialog.min.css","/app/css/ngDialog-theme-default.min.css","/app/css/ngDialog-custom-width.css"]},{name:"schema-form",files:["/master/bower_components/tv4/tv4.js","/master/bower_components/objectpath/lib/ObjectPath.js","/master/bower_components/angular-schema-form/dist/schema-form.js","/master/bower_components/angular-schema-form/dist/bootstrap-decorator.js","/master/bower_components/angular-schema-form-dynamic-select/angular-schema-form-dynamic-select.js"],serie:!0},{name:"ngFader",files:["/vendor/ngFader/ngFader.js","/vendor/ngFader/CSS/ngFader.min.css"]},{name:"dirpaginate",files:["/master/bower_components/angularUtils-pagination/dirPagination.js"]},{name:"plotly",files:["/master/bower_components/plotly.js/dist/plotly.min.js","/master/bower_components/angular-plotly/src/angular-plotly.js"]},{name:"sortable",files:["/master/bower_components/angular-ui-sortable/sortable.min.js"]},{name:"xEditable",files:["/master/bower_components/angular-xeditable/dist/css/xeditable.css","/master/bower_components/angular-xeditable/dist/js/xeditable.min.js"]},{name:"showdown",files:["/node_modules/showdown/dist/showdown.js"]},{name:"jqueryui",files:["https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js","/vendor/jquery-ui/jquery-ui-1.12.1.custom/jquery-ui.min.css"]},{name:"rangy",files:["https://cdnjs.cloudflare.com/ajax/libs/rangy/1.3.0/rangy-core.js"]},{name:"tomarkdown",files:["/node_modules/to-markdown/dist/to-markdown.js"]},{name:"hallo",files:["/node_modules/hallo/examples/hallo.css","/node_modules/hallo/examples/hallo.js"]},{name:"angular-busy",files:["/master/bower_components/angular-busy/dist/angular-busy.css","/master/bower_components/angular-busy/dist/angular-busy.js"]},{name:"angularFileUpload",files:["/master/bower_components/angular-file-upload/angular-file-upload.min.js"]},{name:"ladda",files:["/master/bower_components/ladda/js/spin.js","/master/bower_components/ladda/js/ladda.js","/master/bower_components/ladda-angular/dist/ladda-angular.js"],serie:!0},{name:"sweet-alert",files:["/master/bower_components/sweetalert/dist/sweetalert.min.js","/master/bower_components/angular-sweetalert/SweetAlert.min.js"]},{name:"ui-select",files:["/master/bower_components/angular-ui-select/dist/select.min.js","/master/bower_components/angular-ui-select/dist/select.min.css"]},{name:"angular-strap",files:["/master/bower_components/angular-strap/dist/modules/dimensions.min.js","/master/bower_components/angular-strap/dist/modules/parse-options.min.js","/master/bower_components/angular-strap/dist/modules/tooltip.min.js","/master/bower_components/angular-strap/dist/modules/tooltip.tpl.min.js","/master/bower_components/angular-strap/dist/modules/select.min.js","/master/bower_components/angular-strap/dist/modules/select.tpl.min.js"],serie:!0},{name:"angular-filter",files:["/master/bower_components/angular-filter/dist/angular-filter.min.js"]},{name:"datepicker",files:["/master/bower_components/bootstrap/js/dropdown.js","/node_modules/angular-bootstrap-datetimepicker/src/js/datetimepicker.js","/node_modules/angular-bootstrap-datetimepicker/src/js/datetimepicker.templates.js","/node_modules/angular-bootstrap-datetimepicker/src/css/datetimepicker.css"],serie:!0},{name:"datetimeinput",files:["/node_modules/angular-date-time-input/src/dateTimeInput.js"],serie:!0},{name:"daterangepicker",files:["/master/bower_components/bootstrap-daterangepicker/daterangepicker.js","/master/bower_components/angular-daterangepicker/js/angular-daterangepicker.min.js","/master/bower_components/bootstrap-daterangepicker/daterangepicker.css"],serie:!0},{name:"ChartJs",files:["/master/bower_components/chart.js/dist/Chart.min.js","/master/bower_components/angular-chart.js/dist/angular-chart.min.js"],serie:!0},{name:"BrainTreeDropin",files:["/vendor/braintree/v.1.22.1/dropin.min.js"],serie:!0},{name:"rzslider",files:["/master/bower_components/angularjs-slider/dist/rzslider.js","/master/bower_components/angularjs-slider/dist/rzslider.css"],serie:!0},{name:"wysiwyg",files:["/master/bower_components/ngWYSIWYGfixed/dist/editor.min.css","/master/bower_components/ngWYSIWYGfixed/dist/wysiwyg.min.js"],serie:!0},{name:"ui-mention",files:["/master/bower_components/angular-ui-mention/dist/mention.min.js"]},{name:"ui-grid",files:["/master/bower_components/angular-ui-grid/ui-grid.min.css","/master/bower_components/angular-ui-grid/ui-grid.min.js"]},{name:"anular-ui-mask",files:["/master/bower_components/angular-ui-mask/dist/mask.min.js"],serie:!0}]}).filter("trustUrl",["$sce",function(e){return function(t){return e.trustAsResourceUrl(t)}}]).filter("splitArrayFilter",function(){return function(e,t){if(!angular.isUndefined(e)&&e.length>0){for(var n=[],a=[],i=!0,o=0;o<e.length;o++)(o+1)%t==0?(a.push(e[o]),n.push(a),a=[],i=!0):(a.push(e[o]),i=!1);return i||n.push(a),console.log(JSON.stringify(n)),n}}});var GTM_TAGS={staging:{gtmTag:"GTM-P6LTZBN",includeInstGtmTags:!1},production:{gtmTag:"GTM-WVXKZMT",includeInstGtmTags:!0}},baseUrl,baseUrlNoProtocol,baseWebappUrl,denticonChromeExtensionId,denticonChromeExtensionURL;-1!=window.location.hostname.indexOf("nexhealth-webapp.local")?(baseUrlNoProtocol="nexhealth-backend.local:3000",baseCableUrl="nexhealth-backend.local:5000",baseUrl="http://"+baseUrlNoProtocol,baseWebappUrl="http://nexhealth-webapp.local:8080",environment="development",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):(match=window.location.hostname.match(/^app\.(dev\d+)\.aptible\.nexhealth-dev\.com$/i))?(id=match[1],baseUrlNoProtocol=id+".aptible.nexhealth-dev.com",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://app."+id+".aptible.nexhealth-dev.com",environment="staging",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):-1!=window.location.hostname.indexOf("app.sandbox.nexhealth.com")?(baseUrlNoProtocol="sandbox.nexhealth.com",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://app.sandbox.nexhealth.com",environment="staging",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):-1!=window.location.hostname.indexOf("nexhealth")?(baseUrlNoProtocol="nexhealth.info",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://nexhealth.com",environment="production",gtmTag=GTM_TAGS.production.gtmTag,includeInstGtmTags=GTM_TAGS.production.includeInstGtmTags):-1!=window.location.hostname.indexOf("app-4099.on-aptible.com")?(baseUrlNoProtocol="app-3099.on-aptible.com",baseCableUrl="app-3665.on-aptible.com",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://app-4099.on-aptible.com",environment="staging",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):-1!=window.location.hostname.indexOf("app-7658.on-aptible.com")?(baseUrlNoProtocol="app-7657.on-aptible.com/",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://app-7658.on-aptible.com",environment="staging",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):-1!=window.location.hostname.indexOf("app-15763.on-aptible.com")?(baseUrlNoProtocol="app-15757.on-aptible.com",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://app-15763.on-aptible.com/",environment="staging",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):-1!=window.location.hostname.indexOf("app-21299.on-aptible.com")?(baseUrlNoProtocol="app-21294.on-aptible.com",baseUrl="https://"+baseUrlNoProtocol,baseWebappUrl="https://app-21299.on-aptible.com/",environment="staging",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags):(baseUrlNoProtocol="0.0.0.0:3000",baseCableUrl="localhost:5000",baseUrl="http://"+baseUrlNoProtocol,baseWebappUrl="http://0.0.0.0:8080",environment="development",gtmTag=GTM_TAGS.staging.gtmTag,includeInstGtmTags=GTM_TAGS.staging.includeInstGtmTags),"undefined"==typeof baseCableUrl&&(baseCableUrl="ws."+baseUrlNoProtocol),"staging"==environment||"production"==environment?(denticonChromeExtensionId="cnkfdbbjpjmibklepkenbkgdehfknjbp",denticonChromeExtensionURL="https://chrome.google.com/webstore/detail/nexhealth-integration/cnkfdbbjpjmibklepkenbkgdehfknjbp?hl=en"):(denticonChromeExtensionId="cnkfdbbjpjmibklepkenbkgdehfknjbp",denticonChromeExtensionURL="https://localurl"),App.constant("SERVER_BASE_URL",baseUrl),App.constant("SERVER_BASE_URL_NOPRO",baseUrlNoProtocol),App.constant("SERVER_BASE_CABLE_URL",baseCableUrl),App.constant("WEBAPP_BASE_URL",baseWebappUrl),App.constant("ENVIRONMENT",environment),App.constant("DENTICON_CHROME_EXTENSION_ID",denticonChromeExtensionId),App.constant("DENTICON_CHROME_EXTENSION_URL",denticonChromeExtensionURL),App.constant("GTM_TAGS",{gtmTag:gtmTag,includeInstGtmTags:includeInstGtmTags}),App.constant("GTM_TAG_EVENT_PREFIX","nh_"),App.factory("ordinalService",function(){return{ordinal:function(e){var t=e%100;return 0===t?"th":t<11||t>13?["st","nd","rd","th"][Math.min((t-1)%10,3)]:"th"}}}).filter("ordinal",["ordinalService",function(e){return function(t){return t+e.ordinal(t)}}]).filter("ordinalOnly",["ordinalService",function(e){return function(t){return e.ordinal(t)}}]).filter("dot_to_space",function(){return function(e){return e.replace(/\./g," ")}}).filter("underscore_to_space",function(){return function(e){if(e)return e.replace(/\_/g," ")}}).filter("humanizedList",function(){return function(e){var t=e.slice(e.length-2,e.length);return 0==e.length?"":1==e.length?e[0]:2==e.length?e[0]+" and "+e[1]:_.reduce(e,function(e,n){return e+=n,n===t[1]||(n===t[0]?e+=", and ":e+=", "),e},"")}}).filter("pluralize",function(){function e(e){if("string"!=typeof e)return e;for(var t=[{regex:/octopus/gi,suffix:"octopuses"},{regex:/person/gi,suffix:"people"},{regex:/ox/gi,suffix:"oxen"},{regex:/goose/gi,suffix:"geese"},{regex:/mouse/gi,suffix:"mice"},{regex:/bison|buffalo|deer|duck|fish|moose|pike|plankton|salmon|sheep|squid|swine|trout|sheap|equipment|information|rice|money|species|series|news/i,suffix:"$&"},{regex:/(x|ch|ss|sh)$/gi,suffix:"$1es"},{regex:/(hetero|canto|photo|zero|piano|pro|kimono|portico|quarto)$/gi,suffix:"$1s"},{regex:/(?:([^f])fe|([lr])f)$/,suffix:"$1$2ves"},{regex:/o$/gi,suffix:"oes"},{regex:/([^aeiouy]|qu)y$/gi,suffix:"$1ies"},{regex:/s$/gi,suffix:"s"},{regex:/$/gi,suffix:"s"}],n=0;n<t.length;n++){var a=t[n];if(e.match(a.regex)){e=e.replace(a.regex,a.suffix);break}}return e}return function(t){return t?e(t):t}}),App.controller("activateCtrl",["$scope","SweetAlert","$http","authService","SERVER_BASE_URL",function(e,t,n,a,i){e.submitted=!1,e.validateInput=function(t,n){var a=e.form[t];return(a.$dirty||e.submitted)&&a.$error[n]},e.didClickOnSubmit=function(){if(e.laddaLoading=!0,e.submitted=!0,!e.form.$valid)return console.log("Not valid!!"),!1;console.log("Submitted!!",e.form);var a={method:"POST",url:i+"/account_requests",headers:{"Content-Type":"application/json"},data:{account:{email:e.form.email.$viewValue}}};n(a).success(function(n,a,i,o){console.log(n),0===n.error?t.swal({title:"You already have an account!",text:"Please login",type:"error",confirmButtonColor:"#DCDEDF"}):1===n.description?t.swal({title:"Account requested!",text:"An email has been sent to "+e.form.email.$viewValue+", please check your email to continue registration.",type:"success",confirmButtonColor:"#DCDEDF"}):2===n.error||3===n.error&&t.swal({title:"Institution not found!",text:"We could not find an institution with that email address. If you don't have an institution email, please request an invite from your team.",type:"error",confirmButtonColor:"#DCDEDF"}),e.laddaLoading=!1})}}]),App.controller("analyticsCtrl",["$scope","$rootScope","Analytics","$filter","Perm","ngDialog","$stateParams","angularChart","datesInTimezone",function(e,t,n,a,i,o,s,r,l){e.analytics_loading=!0,e.multiple_locations=[],e.current_week=!0,e.date_range_options=r.fullDateRangeOptions(),e.date_range_options.eventHandlers={"apply.daterangepicker":function(t,n){e.getAnalytics(e.analytics.current_mode,e.analytics.current_parent_name,t.model.startDate,t.model.endDate),e.current_week=!1}},e.analytics={modes:[{name:"appts_scheduled",header:"Appointments Scheduled",type:"cat",text:"Appointments",parent:!0,prefix:"appts_",parent_name:"appointments"},{name:"appts_scheduled",header:"Appointments Scheduled",type:"subcat",text:"Booked",parent_name:"appointments"},{name:"appts_noshow",header:"Patients Did Not Show Up",type:"subcat",text:"No-shows",negative:!0,parent_name:"appointments"},{name:"appts_cancelled",header:"Appointments Cancelled",type:"subcat",text:"Cancelled",negative:!0,parent_name:"appointments"},{name:"ne_appts",header:"Booked via Nexhealth",type:"subcat",text:"Booked Online",negative:!0,parent_name:"appointments"},{name:"reminders",header:"Appointment Reminders Sent",parent:!0,type:"cat",text:"Reminders",parent_name:"par_reminders"},{name:"reminders",header:"Appointment Reminders Sent",type:"subcat",text:"All",parent_name:"par_reminders"},{name:"confirmed_reminders",header:"Appointment Confirmed Reminders Sent",type:"subcat",text:"Confirmed Reminders",parent_name:"par_reminders"},{name:"patients",header:"Patients",type:"cat",text:"Patients",parent_name:"par_patients"},{name:"patients",header:"Patients",type:"subcat",text:"Patients",parent_name:"par_patients"},{name:"patient_satisfaction",header:"Patient Satisfaction",type:"cat",text:"Patient Satisfaction",parent_name:"par_patient_satisfaction"},{name:"patient_satisfaction",header:"Patient Satisfaction",type:"subcat",text:"Reviews",parent_name:"par_patient_satisfaction"},{name:"recall_emails",header:"Recall",type:"cat",text:"Recall",parent_name:"par_recall"},{name:"recall_emails",header:"Recall Emails",type:"subcat",text:"Emails",parent_name:"par_recall"},{name:"recall_texts",header:"Recall Texts",type:"subcat",text:"Texts",parent_name:"par_recall"},{name:"cancelled_recall_emails",header:"Cancelled Follow-Ups",type:"cat",text:"Cancelled Follow-Ups",parent_name:"par_cancelled_recall"},{name:"cancelled_recall_emails",header:"Cancelled Follow-Ups Emails",type:"subcat",text:"Emails",parent_name:"par_cancelled_recall"},{name:"cancelled_recall_texts",header:"Cancelled Follow-Ups Texts",type:"subcat",text:"Texts",parent_name:"par_cancelled_recall"},{name:"missed_recall_texts",header:"No-Show Follow-ups",type:"cat",text:"No-Show Follow-Ups",parent_name:"par_missed_recall"},{name:"missed_recall_texts",header:"No-Show Follow-ups Texts",type:"subcat",text:"Texts",parent_name:"par_missed_recall"},{name:"missed_recall_emails",header:"No-Show Follow-ups Emails",type:"subcat",text:"Emails",parent_name:"par_missed_recall"}],current_mode:"appts_scheduled",current_parent_name:"appointments",initialized:!1,difference:0,date_range:{}},i.perm_promise.then(function(){e.analytics.date_range={startDate:moment().tz(t.timezone).startOf("isoWeek"),endDate:moment().tz(t.timezone).endOf("isoWeek")},e.redirectUnlessCanAccessTab("analytics"),_.each(e.analytics.modes,function(e){"par_patient_satisfaction"==e.parent_name&&(t.institution.is_surveys_nps?e.fraction="10":e.fraction="5")}),t.institution.is_surveys_nps&&e.analytics.modes.unshift({name:"surveys_nps_score",header:"NPS",type:"subcat",text:"NPS",fraction:"100",parent_name:"par_patient_satisfaction"}),e.initAnalytics()}),e.$on("loc_change",function(){e.initAnalytics()}),e.chart={},e.openAnalyticsStatPopup=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.analytics.current_mode,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;"surveys_nps_score"!=t&&(void 0===n&&(mode_obj=_.find(e.analytics.modes,function(e){return e.name==t}))&&(n=mode_obj.header),e.analyticsStatDialog&&e.analyticsStatDialog.close(),e.analyticsStatDialog=o.open({template:"/app/views/modal/analytics-stat.html",className:"ne__modal ne__modal--stat ne__modal__analytics__stat",controller:"analyticsStatCtrl",scope:e,data:{mode:t,title:n}}))},e.getLocationIds=function(){return _.map(e.multiple_locations,"id")},e.addAnalyticsWeek=function(t){e.analytics.date_range.startDate.add(t,"weeks").startOf("isoWeek"),e.analytics.date_range.endDate=moment(e.analytics.date_range.startDate).endOf("isoWeek"),e.current_week=!1,e.refreshAnalytics()},e.$on("updateMultipleLocations",function(t,n){e.multiple_locations=n,e.refreshAnalytics()}),e.refreshAnalytics=function(){e.getAnalytics(e.analytics.current_mode,e.analytics.current_parent_name,e.analytics.date_range.startDate,e.analytics.date_range.endDate)},e.getAnalytics=function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;e.analytics.current_mode=t,e.analytics.current_parent_name=a,e.analytics.date_range.from_date=i,e.analytics.date_range.to_date=o,converted_dates=l.convertToInstTimezone(i,o),e.analytics_loading=!0;var s=n.$search({mode:t,parent_type:"Location",parent_id:JSON.stringify(e.getLocationIds()),from_date:converted_dates[0],to_date:converted_dates[1]});s.$then(function(){e.analytics_loading=!1;var t=s.$response.data.data[0];e.mdesc=_.find(e.analytics.modes,function(t){return t.name==e.analytics.current_mode}),t.totals&&(e.totals=t.totals),t.range_totals&&(e.range_totals=t.range_totals),e.process_bars(t.amounts),e.analytics.initialized=!0})},e.initAnalytics=function(){s.mode&&(mode_obj=_.find(e.analytics.modes,function(e){return e.name==s.mode}),mode_obj&&(e.analytics.current_mode=s.mode,e.analytics.current_parent_name=mode_obj.parent_name),s["from-date"]&&s["to-date"]&&(e.analytics.date_range.startDate=moment(s["from-date"],"YYYY-MM-DD"),e.analytics.date_range.endDate=moment(s["to-date"],"YYYY-MM-DD"),e.current_week=!1)),e.multiple_locations=[t.location],t.$broadcast("updateMultipleLocations",e.multiple_locations)},e.process_bars=function(n){if(e.mdesc.fraction)var i=e.mdesc.fraction;else var o=_.map(n,function(e){return e[1]}),i=_.max(o);var s=_.map(n,function(t){return v=t[1],k=t[0],obj={},obj.val=v,hval=v/i*100,isNaN(hval)?obj.height="0%":obj.height=hval+"%",e.mdesc.currency?obj.msg=a("currency")(v,"$",0):e.mdesc.fraction?obj.msg=a("currency")(v,"",2):obj.msg=v,obj.submsg=k,obj});switch(s.length==e.chart.bars.length?_.each(e.chart.bars,function(t,n){angular.copy(s[n],e.chart.bars[n])}):e.chart={bars:s},e.horizont_count_single=Math.max.apply(Math,e.chart.bars.map(function(e){return parseInt(e.msg)})),e.horizont_count_single=e.horizont_count_single/5,e.analytics.current_mode){case"appts_scheduled":case"appts_noshow":case"appts_cancelled":case"ne_appts":e.chart.color="violet";break;case"cancelled_recall_emails":e.chart.color="red";break;case"cancelled_recall_texts":e.chart.color="gray";break;case"missed_recall_emails":e.chart.color="red";break;case"missed_recall_texts":e.chart.color="gray";break;case"appts_checkin":e.chart.color="violet";break;case"reminders":case"confirmed_reminders":case"patients":e.chart.color="green";break;case"patient_satisfaction":e.chart.color="yellow",t.institution.is_surveys_nps?e.horizont_count_single=2:e.horizont_count_single=1;break;case"recall_texts":case"recall_texts":e.chart.color="cyan";break;default:e.chart.color="violet"}},e.chart={bars:[]}}]),App.controller("analyticsStatCtrl",["$rootScope","$scope","$api","fileResponse","ngDialog",function(e,t,n,a,i){t.ngDialogData?(t.title=t.ngDialogData.title,t.mode=t.ngDialogData.mode):t.mode=t.analytics.current_mode,t.search_params={},t.fields_only=["first_name","last_name","email","cell_phone_number","date_of_birth","location","appointment_requested","provider_name","appointment_date","appt_date","survey_date","follow_up_date","reminder_sent_date","score","comments","patient_status","appointment_type","referrer"],resetSearch=function(){t.analytics_stat=[],t.search_params.page=0,t.search_params.per_page=100,t.search_params.hit_end=!1,t.search_params.search_keyword=null},t.loadStats=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.analytics.date_range.from_date,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:t.analytics.date_range.to_date;s&&s._isAMomentObject&&(s=s.toISOString()),r&&r._isAMomentObject&&(r=r.toISOString()),o?t.exporting=!0:t.analytics_stat_loading=!0,opts={parent_type:"Location",parent_id:JSON.stringify(t.getLocationIds())},i&&(opts=_.merge(opts,{page:t.search_params.page,per_page:t.search_params.per_page})),t.search_params.search_keyword&&(opts=_.merge(opts,{search_keyword:t.search_params.search_keyword})),t.mode&&(opts=_.merge(opts,{mode:t.mode})),s&&r&&(opts=_.merge(opts,{from_date:s,to_date:r})),api_path="/analytics/show_patients",o&&(api_path+=".csv"),n("GET",api_path,opts).then(function(n){o?(t.exporting=!1,a.download(n,"analytics_statistic.csv")):(t.analytics_stat_loading=!1,e&&$("input#search_campaigns_stat").blur(),t.analytics_stat_count=n.data.count,i?n.data.data.length>0?(t.analytics_stat=t.analytics_stat.concat(n.data.data),n.data.data.length<t.search_params.per_page&&(t.search_params.hit_end=!0)):t.search_params.hit_end=!0:t.analytics_stat=n.data.data)})},t.load_more_analytics_stat=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(t.analytics_stat_loading||t.search_params.hit_end)return!1;t.search_params.page++,t.loadStats(e,!0,!1)},t.$watch("search_params.name",function(e,n){e!=n&&(resetSearch(),e&&e.length>2?(t.search_params.page++,t.search_params.search_keyword=e,t.loadStats(!1,!0,!1)):t.load_more_analytics_stat(!1))},!0),resetSearch(),t.load_more_analytics_stat(),t.parseDate=function(e){return new Date(moment(e))}}]),App.controller("appController",["$rootScope","$api","$scope","$state","$translate","$window","$localStorage","$timeout","toggleStateService","authService","colors","browser","cfpLoadingBar","ngDialog","responseHelper","SERVER_BASE_URL","USER_TYPES","Appointment","Doctor","AppCable","Perm","InvitePatients","toaster","ChromeExtension",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,g,f,h,v,y,b,w,k,C,S){w.getConnections(),w.perm_promise.then(function(){lg("1"),e.user&&"Patient"!=e.user.meta_type||(lg("Logging out."),C.pop("success","Success","You've been automatically logged out - please log back in to continue."),a.transitionTo("home.home"),"Patient"==e.user.meta_type&&(lg("Logging out..."),e.logOut())),lg("2"),lg("Initializing provider app..."),void 0===e.user.id?a.transitionTo("login"):S.checkInstallation(n)}),n.sendScktMsg=function(e){b.sendMsg({mymessage:e})},n.events=[],n.eventSources=[n.events];var P=void 0;e.$on("$stateChangeStart",function(e,t,n,a,i){$("#content-wrapper").length&&(P=r(function(){m.start()},0))}),e.$on("$stateChangeSuccess",function(e,t,a,i,o){e.targetScope.$watch("$viewContentLoaded",function(){r.cancel(P),m.complete(),S.checkInstallation(n)})}),e.$on("$stateNotFound",function(e,t,n,a){}),e.$on("$stateChangeError",function(e,t,n,a,i,o){}),angular.isDefined(s.layout)?n.app.layout=s.layout:s.layout=n.app.layout,e.$watch("app.layout",function(){s.layout=n.app.layout},!0),n.toggleUserBlock=function(){n.$broadcast("toggleUserBlock")},n.$on("notifModal",function(e,t){switch(t.modal){case"appt_details":n.appt_details(t.params)}}),n.colorByName=p.byName,n.viewSurvey=function(e){n.modal=u.open({controller:"showSurveyModalCtrl",template:"app/views/surveys/partials/form-provider.html",data:{survey:e},appendClassName:"ne__modal ne__modal--survey-provider"})},n.send_patient_invite=function(e){var t=k.$build({id:e});return t.$save(),t.$then(function(){g.redirectOrToastOnResp(t)}),lg("sent patient invite"),t},n.patient_invite_flow=function(t){e.is_blank(t,"email")||e.is_blank(t.bio,"phone_number")?n.patient_missing_info(t):n.send_patient_invite(t.id)},n.patient_missing_info=function(e){u.open({template:"/app/views/patient-edit.html",data:{patient:e},controller:"editPatientCtrl",className:"ngdialog-theme-default"}).closePromise.then(function(t){lg("caught modal response",t),1==t.value&&n.send_patient_invite(e.id)})},n.$on("invitePatient",function(e,t){lg("item, e",t,e),n.patient_invite_flow(t)}),n.patient_invite_dialog=function(){u.open({template:"/app/views/modal/patient-invite.html",data:{},controller:"patientInviteCtrl",className:"ne__modal ne__modal--invite-patient"}).closePromise.then(function(e){lg("caught modal response",e)})},n.language={listIsOpen:!1,available:{en:"English",es_AR:"Español"},init:function(){var e=i.proposedLanguage()||i.use(),t=i.preferredLanguage();n.language.selected=n.language.available[e||t]},set:function(e,t){i.use(e),n.language.selected=n.language.available[e],n.language.listIsOpen=!n.language.listIsOpen}},n.language.init(),l.restoreState($(document.body)),e.cancel=function(e){e.stopPropagation()},n.doctorIds=[],n.isStaff=c.isStaffOrNurse(),n.isProvider=c.isProvider(),n.userIsProvider=function(e){return-1!=h.provider_types.indexOf(e.meta_type)},n.userIsStaff=function(e){return-1!=h.staff_types.indexOf(e.meta_type)},n.loaddocs=function(){var e=w.friends({ids:!0});n.doctors=e.result,n.doctorIds=e.ids;w.friends({ids:!0,all_locations:!0})},n.$on("loc_change",n.loaddocs),n.$on("loc_change",n.setFormsInNavbar),n.loadDrInfo=function(){w.perm_promise.then(function(){n.loaddocs()})},n.appt_details=function(e,t){if(!(t&&t.target&&$(t.target).parents(".ne__dropdown#stop_propagation").length)&&e&&e.id&&(!e.type||!e.type.length||"Appointment"==e.type)){v.$find(e.id).$then(function(e){u.open({template:"/app/views/modal/appt/appt-details.html",data:{appt:e},controller:"apptDetailCtrl",className:"ne__modal ne__modal--appt"})})}},n.loadDrInfo(),n.checkin_appt=function(e){t("POST","/check_ins",{appointment_id:e.id}).then(function(t,n){e.checkin_at=(new Date).toISOString(),e.status="unpaid"})},n.saveApptStatus=function(n,a){"cancelled"===n?(a.cancelled=!0,a.patient_missed=!1):"no-show"===n&&(a.cancelled=!1,a.patient_missed=!0),a.hidden_checkin_at||(a.hidden_checkin_at=a.checkin_at,a.checkin_at=""),t("POST","/set_appt_status",{id:a.id,patient_missed:a.patient_missed,checkin_at:a.checkin_at,cancelled:a.cancelled,start_time:a.start_time,end_time:a.end_time,note:a.note,location_id:e.location.id,status:n}).then(function(e,t){a.status=n})},n.liuname=c.getUserAuthorization().name,n.liuimage=c.getUserImageUrl(),n.notHeading=function(e){return 1!=e.heading},n.userfns=[{name:"Settings",desc:"Change your settings",route:"app.settings.personal",subroutes:[]},{name:"Log out",desc:"Log out of your session",click:n.logOut}],w.perm_promise.then(function(){n.redirectUnlessCanAccessTab=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];w.can_access_tab(e,t)||(redirectionPath=n?"app.patient.activity":"app.activities",a.go(redirectionPath))},n.navbar=[],w.can_access_tab("messages")&&n.navbar.push({name:"Messages",desc:"Conversations with your patients",route:"app.messages",subroutes:["app.messages.message"]}),w.can_access_tab("online_booking")&&n.navbar.push({name:"Online Booking",desc:"Browse online booking related info, and setup",route:"app.online_booking_dashboard.patients",subroutes:["app.online_booking_dashboard.customization","app.online_booking_dashboard.widgets"]}),w.can_access_tab("patients")&&n.navbar.push({name:"Patients",desc:"Browse your patients",route:"app.patients.patients",
subroutes:["app.patient","app.patients.unsubscribe"]}),w.can_access_tab("payments","is_payments_tab_activated")&&n.navbar.push({name:"Payments",desc:"Request payments",route:"app.payments.request-payment",subroutes:["app.payments.payment-history","app.payments.patients","app.payments.analytics","app.payments.online-widget","app.payments.bank-setup"]}),w.can_access_tab("calendar")&&n.navbar.push({name:"Calendar",desc:"Browse your appointments on a calendar",route:"app.calendar",subroutes:[]}),w.can_access_tab("waitlist","is_waitlist_tab_activated")&&n.navbar.push({name:"Waitlist",desc:"Fill appointment slot for patients in queue",route:"app.appointment-slots-waitlist",subroutes:[]}),w.can_access_tab("templates")&&n.navbar.push({name:"Templates",desc:"Templates Campaigns: Reminders, Recalls, Reviews, Birthday, Missed, Cancelled, Appointment Request, Appointment Confirmed, Appointment Rescheduled, New Patient, New PMS Appointment, Payments, Waitlist Asap Appointment, Waitlist Continuing Care",route:"app.campaigns_templates.default",subroutes:["app.campaigns_templates.custom","app.campaign_template"]}),w.can_access_tab("campaigns")&&n.navbar.push({name:"Campaigns",desc:"Manual Email and SMS Campaigns",route:"app.campaigns_manuals",subroutes:["app.campaign_manual"]}),w.can_access_tab("form-responses")&&(n.navbar.push({name:"Forms",desc:"Form responses from patients",route:"app.enlive",subroutes:[],show_when_enlive_enabled:!0}),n.navbar.push({name:"Forms",desc:"Form responses from patients",route:"app.form-responses",subroutes:[],hide_when_enlive_enabled:!0})),w.can_access_tab("analytics")&&n.navbar.push({name:"Analytics",desc:"Analytics for your organization",route:"app.analytics",subroutes:[]}),n.navbar.push({name:"Marketplace",desc:"NexHealth Marketplace",route:"app.marketplace",subroutes:[],external_url:"https://marketplace.nexhealth.com/"}),n.$watch(function(){return a.current.name},function(e,t){_.each(n.navbar,function(t){t.active=t.route==e||-1!=e.indexOf(t.route)||t.subroutes&&(-1!=t.subroutes.indexOf(e)||_.some(t.subroutes,function(t){return-1!=e.indexOf(t)}))})})}),n.srefNav=function(e){e.route?a.go(e.route):e.click()}}]),App.controller("appointmentSlotsWaitlistForSlotsListCtrl",["$scope","$controller",function(e,t){e.slots_list=e.slots,e.is_confirmed_slots_list=!1,e.$on("removeSlotByBatchId",function(t,n){_.remove(e.slots_list,function(e){return e.batch_id===n})})}]),App.controller("appointmentSlotsWaitlistForConfirmedSlotsListCtrl",["$scope","$controller",function(e,t){e.slots_list=e.confirmed_slots,e.is_confirmed_slots_list=!0}]),App.controller("appointmentSlotsWaitlistCtrl",["$scope","$cookies","$state","$stateParams","$rootScope","Perm","$interval","AsapList","AsapPatients","AsapListCancelBatch","ngDialog","responseHelper","datesInTimezone","CampaignContinuingCareRecalls",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u){e.loadContinuingCareRecalls=function(){e.recallsLoading=!0,e.continuing_care_recalls=u.$search(_.merge({location_id:i.location.id,all:!0})),e.continuing_care_recalls.$finally(function(){e.recallsLoading=!1})},setPopupAttrs=function(){p.getOpenDialogs().forEach(function(e){p.close(e)}),e.appointment={date:null},e.provider={id:null},e.is_readonly=!1,e.prov_submitted=!1;var t=new Date;t.setDate(t.getDate()-30);var n=new Date;n.setDate(n.getDate()),e.continuing_care={due_date_start:t,due_date_end:n,recall_type_codes:[]},e.current_filter="all",e.continuing_care_recalls&&_.each(e.continuing_care_recalls,function(e){e.is_selected=!1})},e.slots_loading=!0,e.confirmed_slots_loading=!0,e.cancel_batch_submitting=[],e.min_appt_length=15,e.statuses=[{list_type:"sent",name:"Active",isChecked:!0},{list_type:"confirmed",name:"Accepted",isChecked:!1},{list_type:"on_waitlist",name:"On Waitlist",isChecked:!1},{list_type:"failed",name:"Failed",isChecked:!1},{list_type:"cancelled",name:"Cancelled",isChecked:!1}],e.current_status,e.statuses[0],e.filter_options=["all","asap_list","continuing_care"],e.filter_descriptions={all:"ASAP + Continuing Care",asap_list:"Only",continuing_care:"Only"},setPopupAttrs(),e.openNewSlotPopup=function(){e.activePill=0,e.newAsapListDialog=p.open({template:"/app/views/appointment-slots-waitlist/modal/form.html",className:"ne__modal ne__modal--manual ne__modal--waitlist",scope:e}),e.newAsapListDialog.closePromise.then(function(t){setPopupAttrs(),1==t.value&&e.filterByStatus("sent")})},e.goToFilters=function(){e.activePill=0},e.setFilterOption=function(t){e.current_filter=t},e.isContinuingCareOrAll=function(){return"all"==e.current_filter||"continuing_care"==e.current_filter},e.isAsapListOrAll=function(){return"all"==e.current_filter||"asap_list"==e.current_filter},e.isAll=function(){return"all"==e.current_filter},e.patientsSearchTitle=function(){return"all"==e.current_filter?"Patients on your ASAP list and Continuing Care":"continuing_care"==e.current_filter?"Patients on your Continuing Care list":"Patients on your ASAP list"},e.continuingCareNotReady=function(){return!!e.isContinuingCareOrAll()&&(0==e.selectedRecallTypes().length||null==e.continuing_care.due_date_start||null==e.continuing_care.due_date_end)},e.selectedRecallTypes=function(){return e.continuing_care_recalls.filter(function(e){return e.is_selected})},e.toggleContinuingCareRecallType=function(t){t.is_selected=!t.is_selected,e.continuing_care.recall_type_codes=e.selectedRecallTypes()},e.getPatients=function(){e.prov_submitted=!0,e.provider.id&&e.appointment.date&&(e.activePill=1,e.popup_loading=!0,req=l.$search({location_id:i.location.id,provider_id:e.provider.id,date:e.appointment.date,filter_option:e.current_filter,due_date_start:e.continuing_care.due_date_start,due_date_end:e.continuing_care.due_date_end,recall_type_codes:e.continuing_care.recall_type_codes.map(function(e){return e.id}).join(",")}),req.$finally(function(){e.popup_loading=!1,resp=req.$response,resp.data.code?(_.each(resp.data.data,function(e){e.appointment_date_with_tz_and_offset=new Date(Date.parse(e.appointment_date_with_tz_and_offset))}),e.patients=resp.data.data,e.popup_errors=null):resp.error&&resp.error.length?e.popup_errors=resp.error:e.popup_errors=resp.data.error}))},e.removePatient=function(t){e.is_readonly||(e.patients=e.patients.filter(function(e){return e!==t}))},e.startDateBeforeRender=function(e){var t=new Date;t.setUTCHours(0,0,0,0),e.filter(function(e){return e.utcDateValue<t.getTime()}).forEach(function(e){e.selectable=!1})},e.addToWaitlist=function(){if(e.is_readonly||!e.patients||!e.patients.length)return!1;e.is_readonly=!0,e.popup_errors=null,e.popup_loading=!0,date_formatted=m.convertFromUserToLocTimezone(e.appointment.date),req=r.$build({institution_id:i.institution.id,location_id:i.location.id,provider_id:e.provider.id,appointment_date:date_formatted,patients:e.patients}),req.$save().$finally(function(){e.is_readonly=!1,e.popup_loading=!1,req.$response.data.code?(e.newAsapListDialog&&e.newAsapListDialog.close(!0),d.redirectOrToastOnResp(req)):(response_error=req.$response.error,response_error&&response_error[0]?e.popup_errors=response_error:e.popup_errors=req.$response.data.error)})},e.filterByStatus=function(t){_.each(e.statuses,function(n){n.list_type===t?(n.isChecked=!0,e.current_status=n):n.isChecked=!1}),e.getSlotsWaitlists(t)},e.getSlotsWaitlists=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"slots",a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;e[n+"_loading"]=!0,opts={location_id:i.location.id,provider_id:e.provider.id,"status[]":t},"confirmed_slots"==n&&(opts=_.merge(opts,{updated_within_last_day:!0})),req="on_waitlist"===t?l.$search({location_id:i.location.id,without_slots:!0}):r.$search(opts),req.$finally(function(){e[n+"_loading"]=!1,resp=req.$response,resp.data.code?("on_waitlist"===t?(_.each(resp.data.data,function(e){e.appointment_date_with_tz_and_offset=new Date(Date.parse(e.appointment_date_with_tz_and_offset))}),e[n]=_.map(resp.data.data,function(e){return{slots:[e]}})):e[n]=resp.data.data,e[n+"_errors"]=void 0,a&&a()):resp.error&&resp.error.length?e[n+"_errors"]=resp.error:e[n+"_errors"]=resp.data.error})},e.cancelBatch=function(t){e.cancel_batch_submitting[t]=!0,cancel_batch=c.$new(),cancel_batch.batch_id=t,req=cancel_batch.$save(),req.$finally(function(){e.cancel_batch_submitting[t]=!1,resp=req.$response,resp.data.code&&e.current_status&&"sent"===e.current_status.list_type&&i.$broadcast("removeSlotByBatchId",t),d.redirectOrToastOnResp(req)})},e.loaddocs=function(){e.providers=o.friends({no_self:!0}).result,e.providers=_.sortBy(e.providers,function(e){return e.display_name||e.name})},onInitialize=function(){e.loaddocs(),callback=function(){e.filterByStatus("sent")},e.sent_loading=!0,e.getSlotsWaitlists("confirmed","confirmed_slots",callback),e.loadContinuingCareRecalls(),setPopupAttrs()},o.perm_promise.then(function(){e.redirectUnlessCanAccessTab("waitlist","is_waitlist_tab_activated"),onInitialize(),e.$on("loc_change",function(){onInitialize()})})}]),App.controller("apptCommonCtrl",["$scope","$api","$rootScope","responseHelper","Appointment","Perm","ngDialog","datesInTimezone",function(e,t,n,a,i,o,s,r){e.min_appt_length=15,e.appt_types=e.ngDialogData.appt_types,e.is_range_selected=e.ngDialogData.is_range_selected,e.other_appt_type={appt_category:{name:"Other",category:"Other",minutes:15},id:0,category:"Other"},dateAddMinutes=function(e,t){return moment(e).add(t,"m").toISOString()},e.loaddocs=function(){var t=o.friends({no_self:!0,perms:["schedule"]}).result;e.providers=_.sortBy(t,function(e){return e.display_name||e.name})},e.setMyMinutes=function(){if(e.appt){var t=e.appt.start_time,n=e.appt.end_time;e.myminutes=(moment(n)-moment(t))/6e4,e.myminutes>1440?e.appt.long_running=!0:e.appt.long_running=!1}},e.timeUpdate=function(t,a){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];newDateStr=i?r.convertFromUserToLocTimezone(t):moment(t).toISOString(),a?(e.appt.start_time=newDateStr,e.appt.start_time_with_tz=moment(newDateStr).tz(n.timezone).format(),e.appt.appointment_type_id&&e.chooseApptType(e.appt.appointment_type_id)):(e.appt.end_time=newDateStr,e.appt.end_time_with_tz=moment(newDateStr).tz(n.timezone).format()),e.setMyMinutes()},watchProviderChange=function(){e.$watch("appt.provider_id",function(t,n){"number"==typeof t&&e.setMinApptLength(t)})},e.setMinApptLength=function(t){var a=_.find(e.providers,function(e){return e.id==t});void 0!==a&&(e.min_appt_length=a.min_appt_length||15),n.$broadcast("refreshDatetimepicker")},e.chooseApptType=function(t){if(appt_type=_.find(e.appt_types,function(e){return e.id==t}),angular.isUndefined(appt_type)||null===appt_type||0===appt_type.id){var n=new Date(moment(e.appt.end_time))-new Date(moment(e.appt.start_time));e.myminutes=n>0?n/6e4:15}else e.myminutes=appt_type.appt_category.minutes;e.timeUpdate(dateAddMinutes(e.appt.start_time,e.myminutes),!1,!1)},e.chooseProvider=function(t){e.appt.provider_id=t},e.get_prov_name=function(t){return _.find(e.providers,{id:t}).name},e.select_appt_type=function(t){e.appt.appointment_type_id=t},e.isEndTimeEditable=function(t){if(e.appt.unavailable)return!0},e.saveWithLongRunningCheck=function(e,t){moment(e.end_time).diff(e.start_time,"minutes")>1440?(e.unavailable?entity_name="unavailable slot":entity_name="appointment",dialog=s.open({template:"/app/views/modal/confirm.html",data:{text:"Are you sure you want to save "+entity_name+" longer than 24 hours?"},controller:"confirmCtrl",className:"ne__modal"}),dialog.closePromise.then(function(e){!0===e.value&&t()})):t()}}]);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};App.controller("apptCreateCtrl",["$controller","$scope","$api","$rootScope","authService","responseHelper","Appointment","$stateParams","Perm","datesInTimezone",function(e,t,n,a,i,o,s,r,l,c){e("apptCommonCtrl",{$scope:t}),promiseFn=function(){l.perm_promise.then(function(){t.loaddocs(),watchProviderChange(),t.doctorIds&&1===t.doctorIds.length?t.appt.provider_id=t.doctorIds[0]:t.providers.length>0&&(t.appt.provider_id=t.providers[0].id)})},t.initialize=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];t.doctorIds=t.ngDialogData.doctorIds,t.patientPage=t.ngDialogData.patientPage,t.result={},t.display={stage:1},start_time=c.convertFromLocToUtcTimezone(t.ngDialogData.start_time,!1),timezone_offset=start_time.tz(a.timezone).format("Z"),start_time=start_time.toISOString(),e?(end_time=dateAddMinutes(start_time,t.myminutes),t.myminutes=60,t.appt={start_time:start_time,unavailable:!0,end_time:end_time,timezone_offset:timezone_offset,appointment_type_id:0},t.dropdownNameStart="dropdownStart2",t.dropdownNameEnd="dropdownEnd2"):(end_time=c.convertFromLocToUtcTimezone(t.ngDialogData.end_time),t.appt={start_time:start_time,unavailable:!1,end_time:end_time,timezone_offset:timezone_offset},t.dropdownNameStart="dropdownStart1",t.dropdownNameEnd="dropdownEnd1"),promiseFn(),t.appt.start_time_with_tz=moment(t.appt.start_time).tz(a.timezone).format(),t.appt.end_time_with_tz=moment(t.appt.end_time).tz(a.timezone).format()},t.initialize(),t.validatePatient=function(){return void 0!==t.result&&"object"!=_typeof(t.result.patient)},t.searchPatients=function(e){return n("GET","/patient_searches",{name:e,location_id:a.location.id}).then(function(e){return e.data.data.map(function(e){return e})})},t.submitAppointment=function(){t.patientPage?patientId=r.id:patientId=t.result.patient.id,additionalRequestParams={patient_id:patientId,appointment_type_id:t.appt.appointment_type_id},submitCreateAction(additionalRequestParams)},t.submitUnavailability=function(){additionalRequestParams={unavailable:!0},submitCreateAction(additionalRequestParams,!0)},submitCreateAction=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];callback=function(){t.submitted=!0,t.appt.provider_id?e.provider_id=t.appt.provider_id:t.providers.length>0?e.provider_id=t.providers[0].id:e.provider_id=i.getUserId(),requestParams={appt:_.merge({start_time:t.appt.start_time,end_time:t.appt.end_time,confirmed:!0,priority:"Medium",note:t.appt.note,location_id:a.location.id},e)},createAppt=s.$create(requestParams),createAppt.$then(function(e){o.redirectOrToastOnResp(createAppt)&&(appt=e.appt,delids=e.delids,addEventParams={id:appt.id,start:moment(appt.start_time).tz(a.timezone).utcOffset(0,!0).format(),end:moment(appt.end_time).tz(a.timezone).utcOffset(0,!0).format(),allDay:!1,stick:!0,confirmed:appt.confirmed,note:appt.note,priority:appt.priority,rendering:"",dow:""},n?(addEventParams=_.merge(addEventParams,{title:t.get_prov_name(appt.provider_id)+"\nUnavailable",className:"fc-event-unavailable"}),delids&&delids.length>0&&a.$broadcast("cancelEvents",delids)):addEventParams=_.merge(addEventParams,{title:appt.patient_name,className:"fc-event-just-created",patient_id:appt.patient_id}),a.$broadcast("addEvent",addEventParams),t.closeThisDialog())})},t.saveWithLongRunningCheck(t.appt,callback)}}]),App.controller("apptDetailCtrl",["$controller","$scope","$api","$rootScope","$filter","responseHelper","PaymentMethod","Appointment","Transaction","Perm","ngDialog",function(e,t,n,a,i,o,s,r,l,c,p){if(e("apptCommonCtrl",{$scope:t}),t.appt=t.ngDialogData.appt,t.now=moment().toISOString(),t.appt_is_past=t.appt.start_time<t.now,t.buttonDisabled=!1,t.payment_errors=[],t.setMyMinutes(),t.appt.start_time_with_tz=moment(t.appt.start_time).tz(a.timezone).format(),t.appt.end_time_with_tz=moment(t.appt.end_time).tz(a.timezone).format(),"unpaid"==t.appt.status?t.tab_index=2:t.tab_index=0,t.apptConfirm=function(e){withPopupCallback=function(){t.closeThisDialog()},withoutPopupCallback=function(){e.confirmed=!0,t.apptUpdate(e,!1)},a.activityProcessed(null,e.id,withPopupCallback,withoutPopupCallback)},t.apptUpdate=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];additionalRequestParams={patient_missed:e.patient_missed,checkin_at:e.checkin_at,confirmed:e.confirmed,cancelled:e.cancelled,appointment_type_id:e.appointment_type_id,status:e.status},apptUpdateAction(e,additionalRequestParams,t)},t.apptUnavailableUpdate=function(e){additionalRequestParams={},apptUpdateAction(e,additionalRequestParams)},apptUpdateAction=function(e,n){var a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];callback=function(){e.appt=_.merge({start_time:e.start_time,end_time:e.end_time,note:e.note},n),"paid"===e.status&&(e.appt.paid=!0),e.$save(["appt"]),apptSaveCallback(e,!0)},a?t.saveWithLongRunningCheck(e,callback):callback()},apptSaveCallback=function(e,n){e.$then(function(i){if(o.redirectOrToastOnResp(e)){if(data=i.$response.data.data,!data)return;e=data.appt,delids=data.delids,delids&&delids.length>0&&a.$broadcast("cancelEvents",delids),e&&e.confirmed&&a.$broadcast("apptConfirmed",e),e&&a.$broadcast("replaceEvents",[e]),!0===n&&t.closeThisDialog()}})},show_checkin=function(){t.appt.hidden_checkin_at?(t.appt.checkin_at=t.appt.hidden_checkin_at,t.appt.hidden_checkin_at=null):t.appt.checkin_at=moment().toISOString()},hide_checkin=function(){t.appt.hidden_checkin_at||(t.appt.hidden_checkin_at=t.appt.checkin_at,t.appt.checkin_at="")},t.setApptStatus=function(e,n){savePrevStatus(),t.appt.status=e,"unpaid"===e?(t.appt.cancelled=!1,t.appt.patient_missed=!1,show_checkin()):"paid"===e?(t.appt.cancelled=!1,t.appt.patient_missed=!1,show_checkin()):"cancelled"===e?(t.appt.cancelled=!0,t.appt.patient_missed=!1,hide_checkin()):"no-show"===e?(t.appt.cancelled=!1,t.appt.patient_missed=!0,hide_checkin()):"waiting"===e?(t.appt.cancelled=!1,t.appt.patient_missed=!1,hide_checkin()):"upcoming"===e&&(t.appt.cancelled=!1,t.appt.patient_missed=!1,hide_checkin())},savePrevStatus=function(){"upcoming"===t.appt.status&&(t.appt.hidden_status=t.appt.status)},t.apptUnavailableCancel=function(e){apptCancelAction(e,"this unavailable slot")},t.apptCancel=function(e){apptCancelAction(e,"this appointment request")},apptCancelAction=function(e,n){withPopupCallback=function(){"function"==typeof t.closeThisDialog&&t.closeThisDialog()},withoutPopupCallback=function(){dialog=p.open({template:"/app/views/modal/confirm.html",data:{text:"Are you sure you want to cancel "+n+"?"},controller:"confirmCtrl",className:"ne__modal"}),dialog.closePromise.then(function(n){!0===n.value&&e.$destroy().$then(function(n){e.unavailable?a.$broadcast("deleteEvents",[e.id]):a.$broadcast("cancelEvents",[e.id]),"function"==typeof t.closeThisDialog&&t.closeThisDialog()})})},e.unavailable?withoutPopupCallback():a.activityProcessed(null,e.id,withPopupCallback,withoutPopupCallback)},c.perm_promise.then(function(){t.loaddocs(),t.institution=c.institution,t.confirmed_status="true"==t.institution.config.confirmed_status||!0===t.institution.config.confirmed_status,t.appt.unavailable?(t.dropdownNameStart="dropdownStart2",t.dropdownNameEnd="dropdownEnd2"):(t.dropdownNameStart="dropdownStart1",t.dropdownNameEnd="dropdownEnd1"),watchProviderChange(),angular.isUndefined(t.appt.provider_id)&&t.providers.length>0&&(t.appt.provider_id=t.providers[0].id),a.$broadcast("refreshCalendar")}),t.reminder_text=function(e){return(Date.parse(e)<Date.now()?"A reminder text was sent at ":"A reminder text will be sent at ")+i("date")(e,"M/d/yy")},getFutureReminderTime=function(){var e;_.each(t.appt.reminder_times,function(t){Date.parse(t)>=Date.now()&&(e=t)}),t.future_reminder_time=e},t.appt.patient_confirmed||getFutureReminderTime(),!0!==t.appt.paid&&!1===t.appt.unavailable){var d=s.$search({id:t.appt.patient_id});d.$then(function(e){t.paymentMethods=d.$response.data.data,t.paymentMethods.forEach(function(e,n){!0===e.default&&(t.defaultMethod=e.token)})})}t.submit_payment=function(e){t.buttonDisabled=!0,t.payment_errors=[],t.buttonDisabled=!0;var n={payment_token:t.appt.defaultMethod,appointment_id:t.appt.id,amount:t.appt.amount,id:t.appt.patient_id},i=l.$create(n);i.$then(function(e){o.redirectOrToastOnResp(e),t.buttonDisabled=!1,i.$response.data.code&&(a.$broadcast("markApptPaid",t.appt.id),a.$broadcast("setParentApptPaid",t.appt.id),t.appt.paid=!0,t.appt.status="paid",t.closeThisDialog())})}}]),App.controller("paymentsCtrl",["$scope","$api","$rootScope","$state","responseHelper","authService","PaymentMethod","Appointment","Transaction","$stateParams",function(e,t,n,a,i,o,s,r,l,c){if(e.appt=e.ngDialogData.appt,e.validateAmount=function(){return"number"==typeof e.appt.amount&&e.appt.amount>0},!0!==e.appt.paid){var p=s.$search({id:e.appt.patient_id});p.$then(function(t){e.paymentMethods=p.$response.data.data,e.paymentMethods.forEach(function(t,n){!0===t.default&&(console.log("h"),e.defaultMethod=t.token)})})}e.mark_appt_paid=function(a){t("POST","/mark_appt_paid",{id:a.id}).then(function(t,i){n.$broadcast("markApptPaid",a.id),a.paid=!0,a.status="paid",e.closeThisDialog()})},e.submit_payment=function(t){e.buttonDisabled=!0,e.payment_errors=[];e.buttonDisabled=!0;var a={payment_token:e.appt.defaultMethod,appointment_id:e.appt.id,amount:e.appt.amount,id:c.id},o=l.$create(a);o.$then(function(t){i.redirectOrToastOnResp(t),e.buttonDisabled=!1,o.$response.data.code&&(n.$broadcast("markApptPaid",e.appt.id),n.$broadcast("setParentApptPaid",e.appt.id),e.appt.paid=!0,e.appt.status="paid",e.closeThisDialog())})}}]),App.controller("calendarCtrl",["$scope","$rootScope","$window","$timeout","$interval","$q","Appointment","ngDialog","Perm","AppointmentSlot","datesInTimezone",function(e,t,n,a,i,o,s,r,l,c,p){function d(){e.loading=!0;var n=void 0;e.filterdocids(),search_opts={location_id:t.location.id,cancelled:e.includeCancelled,start:e.appt_interval_start,end:e.appt_interval_end,nex_only:e.includeNexOnly},_.filter(e.doctors,function(e){return!e.isChecked}).length&&(search_opts["provider_ids[]"]=e.doctorIds),n=s.$search(search_opts),n.$then(function(){var t=n.$response.data.data;e.new_events=[],e.events=_.map(t,e.eventFromAppt),e.unavailable_slots=[],e.refreshEventSources(),1===e.doctorIds.length&&e.getWorkingHours(e.doctors[0].id),a(function(){e.loading=!1},0)})}var m=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],u=document.getElementById("appointments-wrapper");e.loading=!0,e.submitted=!1,e.show={sidebar:!1},e.isEditable=!1,e.patientPage=!1,e.noAppointments=!1,e.includeCancelled=!1,e.includeNexOnly=!1,e.events=[],e.unavailable_slots=[],e.new_events=[],e.eventSources=[e.events,e.unavailable_slots,e.new_events],e.doc_id_watch_inited=!1,e.filterdocids=function(){e.doctorIds=_.map(_.filter(e.doctors,"isChecked"),function(e){return e.id})},e.loaddocs=function(){var t=l.friends({perms:["schedule"],no_self:!0}).result;e.doctors=_.sortBy(t,function(e){return e.display_name||e.name}),_.each(e.doctors,function(e){return e.isChecked=!0})},e.check_providers=function(t){"all"==t?_.each(e.doctors,function(e){return e.isChecked=!0}):"none"==t&&_.each(e.doctors,function(e){return e.isChecked=null}),e.filterdocids()},l.perm_promise.then(function(){e.redirectUnlessCanAccessTab("calendar"),e.doctor_promise=o(function(t,a){e.loaddocs(),e.$on("loc_change",function(){e.loaddocs(),e.getAppointments()}),e.$watch("doctors",function(t,n){e.doc_id_watch_inited?(e.filterdocids(),e.getAppointments()):e.doc_id_watch_inited=!0},!0),t(!0);var o=0;e.fixHeightInterval=i(function(){o<5?($("div[ui-calendar]").fullCalendar("option",{height:n.innerHeight-u.getBoundingClientRect().top-32}),o++):i.cancel(e.fixHeightInterval)},300)}),e.uiConfig={calendar:{defaultView:"agendaWeek",editable:e.isEditable,header:{left:"month agendaWeek agendaDay",center:"prev today next",right:"title"},eventOverlap:!1,timezone:"UTC",eventLimit:8,eventLimitText:"more...",allDaySlot:!1,slotLabelFormat:"h(:mm) A",displayEventTime:!0,displayEventEnd:!1,slotDuration:"00:15:00",slotLabelInterval:"00:60:00",selectable:!0,selectHelper:!0,buttonIcons:{prev:" ne__icon__arrow--left",next:" ne__icon__arrow--right"},height:n.innerHeight-u.getBoundingClientRect().top-32,windowResize:function(e){$("div[ui-calendar]").fullCalendar("option",{height:n.innerHeight-u.getBoundingClientRect().top-32})},eventClick:function(t,n,a){e.appt_details(t)},viewRender:function(t,n){e.appt_interval_start=p.convertFromLocToUtcTimezone(t.intervalStart._d),e.appt_interval_end=p.convertFromLocToUtcTimezone(t.intervalEnd._d),e.getAppointments()},dayClick:function(e,t,n,a){isRangeSelected=!1},select:function(t,n,a,i){"undefined"==typeof isRangeSelected&&(isRangeSelected=!0),start_time=t.toISOString(),t.hasTime()&&n.hasTime()?end_time=n.toISOString():end_time=n.subtract(1,"days").toISOString(),e.newAppointmentDialog=r.open({template:"/app/views/modal/appt/appt-create-layout.html",controller:"apptCreateCtrl",data:{start_time:start_time,end_time:end_time,is_range_selected:isRangeSelected,doctorIds:e.doctorIds},className:"ne__modal ne__modal--appt ne__modal--appt-create"}),isRangeSelected=!0,e.newAppointmentDialog.closePromise.then(function(e){$("*[ui-calendar]").fullCalendar("unselect")})}}}}),e.getAppointments=function(){l.perm_promise.then(function(){e.doctor_promise.then(function(){d()})})},e.refreshEventSources=function(){e.eventSources.splice(0,e.eventSources.length,e.events,e.unavailable_slots,e.new_events)},e.$on("deleteEvents",function(t,n){_.each(n,function(t){e.removeAppt(t)}),e.refreshEventSources()}),e.$on("replaceEvents",function(t,n){_.each(n,function(t){t.cancelled&&!e.includeCancelled?e.removeAppt(t.id):e.replaceAppt(t)}),e.new_events=_.filter(e.new_events,function(t){_.find(e.events,function(e){t.id,e.id})}),e.refreshEventSources()}),e.$on("cancelEvents",function(t,n){_.each(n,function(t){e.includeCancelled?(event=_.find(e.events.concat(e.new_events),function(e){return e.id==t}),event&&(event.cancelled=!0,event.status="cancelled",e.replaceAppt(event,!0))):e.removeAppt(t)}),e.refreshEventSources()}),e.$on("apptConfirmed",function(t,n){scopeEvent=_.find(e.events.concat(e.new_events),function(e){return e.id==n.id}),scopeEvent&&(scopeEvent.status=n.status,scopeEvent.confirmed=n.confirmed,e.replaceAppt(scopeEvent,!0)),e.refreshEventSources()}),e.$on("addEvent",function(t,n){e.new_events=angular.copy(e.new_events).concat([n]),e.refreshEventSources()}),e.$on("refreshCalendar",function(e){d()}),e.removeAppt=function(t){if(-1==_.findIndex(e.events.concat(e.new_events),function(e){return e.id==t}))return!1;e.events=_.filter(e.events,function(e){return e.id!=t}),e.new_events=_.filter(e.new_events,function(e){return e.id!=t}),e.refreshEventSources()},e.replaceAppt=function(n){var a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];event=a?n:{id:n.id,start:moment(n.start_time).tz(t.timezone).utcOffset(0,!0).format(),end:moment(n.end_time).tz(t.timezone).utcOffset(0,!0).format(),allDay:!1,title:n.patient_name,stick:!0,confirmed:n.confirmed,note:n.note,priority:n.priority,patient_id:n.patient_id,rendering:"",dow:""},Object.assign(event,colorizeEvent(n)),("nex"===n.foreign_id_type||n.misc&&n.misc.is_booked_on_nexhealth)&&(event.className=event.className+" fc-event-booked-via-nexhealth"),e.events=_.filter(e.events,function(e){return e.id!=n.id}).concat(event)},e.appointments=[],e.date=moment().toISOString(),e.onClickEditCalendar=function(){e.isEditable=!e.isEditable},e.open=function(t){t.preventDefault(),t.stopPropagation(),e.opened=!0},e.minDate=e.minDate?null:moment().toISOString(),e.dateOptions={formatYear:"yy",startingDay:1},e.today=function(){e.start_time=moment().toISOString(),e.end_time=moment().toISOString()},e.today(),e.eventFromAppt=function(e){var n={allDay:!1,confirmed:e.confirmed,dow:"",end:moment(e.end_time).tz(t.timezone).utcOffset(0,!0).format(),foreign_id_type:e.foreign_id_type,id:e.id,note:e.note,patient_id:e.patient_id,priority:e.priority,rendering:"",start:moment(e.start_time).tz(t.timezone).utcOffset(0,!0).format(),stick:!0,title:e.patient_name,misc:e.misc};return _.each(e.activities,function(t){!0===t.confirmed_by_patient&&(e.patient_confirmed=!0)}),Object.assign(n,colorizeEvent(e)),("nex"===e.foreign_id_type||e.misc.is_booked_on_nexhealth)&&(n.className=n.className+" fc-event-booked-via-nexhealth"),n},colorizeEvent=function(e){var t="",n=!1;!1===e.confirmed&&(t="fc-event-office-unconfirmed"),l.institution.config.confirmed_status?!0===e.confirmed&&(t="fc-event-patient-confirmed"):!0===e.confirmed&&(t="fc-event-office-confirmed"),e.patient_confirmed&&(t="fc-event-patient-confirmed"),e.unavailable&&(e.operatory_name?name=e.operatory_name:name=e.provider_name,n=name+"\nUnavailable",t="fc-event-unavailable"),e.cancelled&&(n="Cancelled - "+e.patient_name,t="fc-event-cancelled"),e.patient_missed&&(n="No-Show - "+e.patient_name,t="fc-event-no-show");return n?{className:t,title:n}:{className:t}},unavailableFromSlot=function(e,t){return{id:"uv-"+t,start:e.begin_time,end:e.end_time,allDay:!1,title:"",stick:!0,confirmed:!1,note:"",priority:"",patient_id:"",color:"rgba(127, 152, 222, .2)",rendering:"background",dow:[m.indexOf(e.day)]}},e.getWorkingHours=function(n){var a=c.$find(n,{timezone:t.timezone});a.$then(function(){e.unavailable_slots=_.map(a.$response.data.data,unavailableFromSlot),e.refreshEventSources()})},e.interval=i(function(){e.getAppointments()},12e4),e.$on("$destroy",function(){i.cancel(e.interval)})}]),App.controller("callbacksCtrl",["Perm","$api","$scope","$state","responseHelper","$stateParams","$interval",function(e,t,n,a,i,o,s){n.loading=!0,lg("$stateParams",o),n.sendCallback=function(){t("GET","/callbacks/"+o.emrName+"/oauth_token_store",{code:o.code}).then(function(e,t){n.loading=!1,n.success=!0},function(e,t){n.loading=!1,n.error=!0})},e.perm_promise.then(function(){n.sendCallback()},function(){})}]),App.controller("campaignCtrl",["$api","$rootScope","$scope","$state","$stateParams","responseHelper","Campaign","Perm","ngDialog","SERVER_BASE_URL","$timeout","SweetAlert","APP_COLORS","authService","FileUploader","$q","$sce","datesInTimezone","CampaignSmsMsgsCount","AppointmentCategory","EnliveSmartCommand",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,g,f,h,v,y,b,w){loaddocs=function(){var e=r.friends({ids:!0,no_self:!0});n.doctors=e.result},r.perm_promise.then(function(){loaddocs(),n.$on("loc_change",function(){loaddocs()}),i.id&&!n.loadCampaignInProgress&&loadCampaign(i.id)}),loadCampaign=function(e){n.loadingCampaign=!0,n.loadCampaignInProgress=!0,n.campaign=s.$find(i.id,{location_id:t.location.id}),n.campaign.$finally(function(){n.loadCampaignInProgress=!1,setSentStat(),n.campaign.$response.data.code&&(n.campaign.location_id==t.location.id||_.includes(n.campaign.multi_locations_ids,t.location.id)||(campaign_location=_.find(t.locations,function(e){return e.id==n.campaign.location_id}),t.set_main_location(campaign_location)),loadEnliveSmartCommands(),n.campaign&&n.isTimeSlotsMacrosEnabled(n.campaign)?loadTimeSlotsMacros():(n.loadingCampaign=!1,n.$broadcast("campaignControllerLoaded")))})},n.time_slots_macros_loading=!0,loadTimeSlotsMacros=function(){n.time_slots_macros_loading=!0,appt_categories_req=b.$search(locationParams()),appt_categories_req.$finally(function(){n.time_slots_macros=appt_categories_req.$response.data.data,n.time_slots_macros_loading=!1,updateDefaultMacrosStates(),n.loadingCampaign=!1,n.$broadcast("campaignControllerLoaded")})},locationParams=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t.institution.is_appt_categories_location_specific&&(e.location_id=t.location.id),e},n.isTimeSlotsMacrosEnabled=function(e){return!(t.institution.is_appt_categories_location_specific&&"manual"==e.campaign_type&&e.multi_locations_ids&&e.multi_locations_ids.length>1)&&["recall","missed_recall","cancelled_recall","continuing_care_recall","manual"].includes(e.campaign_type)},n.openTimeSlotsMacros=!1,n.openPatientMacros=!0,updateDefaultMacrosStates=function(){n.campaign&&n.time_slots_macros&&n.time_slots_macros.length>0&&(n.openTimeSlotsMacros=n.isTimeSlotsMacrosEnabled(n.campaign)&&"manual"!=n.campaign.campaign_type),n.openPatientMacros=!n.openTimeSlotsMacros},n.enlive_enabled=!1,n.enlive_forms_macros_loading=!0,
loadEnliveSmartCommands=function(){var e=_.find(t.locations,function(e){return e.id==n.campaign.location_id});if(e&&e.enlive_enabled&&(n.enlive_enabled=!0),!n.enlive_enabled)return void(n.enlive_forms_macros_loading=!1);n.enlive_forms_macros_loading=!0,req=w.$search({location_id:n.campaign.location_id}),req.$finally(function(){n.enlive_forms_macros=req.$response.data.data,n.enlive_forms_macros_loading=!1})},loadCampaignResponsedCount=function(e){e&&y.get({campaign_ids:e,location_id:t.location.id}).then(function(e){n.responsedCount=e.data.data.count},function(e){})},setSentStat=function(){n.sent_stat={},n.sent_stat.total_sent=n.campaign.sent_count,n.campaign.sent_stat&&(n.sent_stat.opened=n.campaign.sent_stat.opened,n.sent_stat.total_sent>0?n.sent_stat.open_rate_percentage=Math.round(100*n.sent_stat.opened/n.sent_stat.total_sent):n.sent_stat.open_rate_percentage=0,n.sent_stat.clicked=n.campaign.sent_stat.clicked,n.sent_stat.bounced=n.campaign.sent_stat.bounced)},n.openCampaignsStatPopup=function(e,t){n.marginTop=$(e.currentTarget)[0].getBoundingClientRect().top,n.stat_type=t,n.campaignsStatDialog&&n.campaignsStatDialog.close(),n.campaignsStatDialog=l.open({template:"/app/views/campaigns/modal/stat.html",className:"ne__modal ne__modal--stat",controller:"campaignsStatCtrl",data:{is_csv_upload:n.campaign.campaign_setting.is_csv_upload,campaigns_ids:n.campaign.id,stat_type:n.stat_type,open_rate_percentage:n.sent_stat.open_rate_percentage}}),n.campaignsStatDialog.closePromise.then(function(e){n.stat_type=null})},n.$on("ngDialog.opened",function(){n.campaignsStatDialog&&(content=$("#"+n.campaignsStatDialog.id+" .ngdialog-content")[0],content&&(content.style.top=n.marginTop+"px"))}),n.activateTemplate=function(){if(!0===n.campaign.is_activated)d.swal({title:"Ready?",text:"Once you activate this template, messages will start going out to patients. Are you sure you would like to activate?",type:"warning",showCancelButton:!0,showConfirmButton:!0,confirmButtonColor:m.success,confirmButtonText:"Yes, activate it!",cancelButtonText:"No, cancel pls!",closeOnConfirm:!0,closeOnCancel:!0},function(e){error_callback=function(){n.campaign.is_activated=!1},e?n.save_campaign({attrs:["is_activated"]},!1,error_callback):error_callback()});else if(!1===n.campaign.is_activated){if(["payment","waitlist_asap_appointment","waitlist_continuing_care"].includes(n.campaign.campaign_layout.campaign_type))return void(n.campaign.is_activated=!0);d.swal({title:"Deactivate?",text:"Messages won't be sent to patients once deactivated.",type:"warning",showCancelButton:!0,showConfirmButton:!0,confirmButtonColor:m.warning,confirmButtonText:"Deactivate",cancelButtonText:"No, keep this template activated!",closeOnConfirm:!0,closeOnCancel:!0},function(e){error_callback=function(){n.campaign.is_activated=!0},e?n.save_campaign({attrs:["is_activated"]},!1,error_callback):error_callback()})}},n.convertCampaignSettingDates=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return _.each(["appt_from","appt_to","last_seen_appt_from","last_seen_appt_to"],function(a){e&&e[a]&&(converted_date=v.convertFromUserToLocTimezone(e[a]),converted_date=moment(converted_date).tz(t.timezone).format("YYYY-MM-DD"),n?e[a]=converted_date:(date_from_browser=new Date(converted_date),date_from_browser.setTime(date_from_browser.getTime()+60*date_from_browser.getTimezoneOffset()*1e3),e[a]=date_from_browser))}),e},n.save_campaign=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];n.laddaSaveLoading=!0,n.saving=!0,e=e||{},n.campaign.silent=e.silent,n.campaign.description=e.description,"manual"==n.campaign.campaign_layout.campaign_type&&(n.campaign_email_subject_before=_.clone(n.campaign.campaign_layout.email_subject),n.campaign_email_body_before=_.clone(n.campaign.campaign_layout.email_body),n.campaign_sms_body_before=_.clone(n.campaign.campaign_layout.sms_body),n.convertCampaignSettingDates(n.campaign.campaign_setting,!0)),e.attrs?(n.campaign.campaign=_.pick(n.campaign,e.attrs),n.campaign.campaign.reused_campaign_id=e.reused_campaign_id,n.campaign.$save(["silent","description","campaign"])):(n.campaign.campaign=_.clone(n.campaign),n.campaign.$save()),n.campaign.$finally(function(){n.laddaSaveLoading=!1,n.laddaFinalizeLoading=!1,n.saving=!1,n.campaign.$response.data.code?(t&&t(),o.redirectOrToastOnResp(n.campaign)):(o.redirectOrToastOnResp(n.campaign),"manual"==n.campaign.campaign_layout.campaign_type&&(n.campaign.campaign_layout.email_subject=n.campaign_email_subject_before,n.campaign.campaign_layout.email_body=n.campaign_email_body_before,n.campaign.campaign_layout.sms_body=n.campaign_sms_body_before),a&&a())})},n.editorConfig={sanitize:!1,toolbar:[{name:"basicStyling",items:["bold","italic","underline","-","leftAlign","centerAlign","rightAlign","blockJustify","-"]},{name:"paragraph",items:["orderedList","unorderedList","-"]},{name:"colors",items:["fontColor","backgroundColor","-"]},{name:"doers",items:["removeFormatting","-"]},{name:"links",items:["image","hr","link","-"]},{name:"styling",items:["format","font","size"]}]},n.images_api={insertImage:function(){return editableElement=angular.element("#email_body_wysiwyg").find("iframe")[0],editableElement&&editableElement.contentWindow.focus(),n.deferred_image=f.defer(),p(function(){angular.element("#image-pick").trigger("click")},0),n.deferred_image.promise}},n.insertCommand=function(e,t){"email"==e?insertCommandForEmail(t):insertCommandForSms(t)},insertCommandForEmail=function(e){editorFrame=angular.element("#email_body_wysiwyg").find("iframe")[0],editorFrame&&(editorWindow=editorFrame.contentWindow,editorWindow.document.body.focus(),editorWindow.getSelection?(sel=editorWindow.getSelection(),sel.getRangeAt&&(range=sel.getRangeAt(0),range.deleteContents(),commandNode=document.createTextNode(e),range.insertNode(commandNode),range.setStartBefore(commandNode),range.setEndAfter(commandNode),sel.removeAllRanges(),sel.addRange(range),angular.element(editorWindow.document.body).trigger("change"))):editorWindow.document.selection&&editorWindow.document.selection.createRange&&(editorWindow.document.selection.createRange().text=e,angular.element(editorWindow.document.body).trigger("change")))},insertCommandForSms=function(e){smsEditor=angular.element("#sms_body_editor")[0],smsEditor&&(smsEditor.focus(),smsEditor.selectionStart||"0"==smsEditor.selectionStart?(startPos=smsEditor.selectionStart,endPos=smsEditor.selectionEnd,value=smsEditor.value,smsEditor.value=value.substring(0,startPos)+e+value.substring(endPos,value.length),smsEditor.setSelectionRange(startPos,startPos+e.length,"forward"),angular.element(smsEditor).trigger("change")):document.selection&&document.selection.createRange&&(sel=document.selection.createRange(),sel.text=e,angular.element(smsEditor).trigger("change")))},n.loadEmailPreview=function(a,i){n.loadingEmailPreview=!0,stopLoading=function(){n.loadingEmailPreview=!1},path="/campaigns/"+n.campaign.id+"/campaign_text_preview",e("POST",path,{location_id:t.location.id},a).then(function(a){n.show_email_subject_preview=h.trustAsHtml(a.data.data),html_path="/campaigns/"+n.campaign.id+"/campaign_html_preview",e("POST",html_path,{location_id:t.location.id},i).then(function(e){n.show_email_body_preview=h.trustAsHtml(e.data),stopLoading()},function(){stopLoading()})},function(){stopLoading()})},n.loadSmsPreview=function(a){n.loadingSmsPreview=!0,stopLoading=function(){n.loadingSmsPreview=!1},path="/campaigns/"+n.campaign.id+"/campaign_text_preview",e("POST",path,{location_id:t.location.id,for_sms_body:!0},a).then(function(e){n.show_sms_body_preview=h.trustAsHtml(e.data.data),stopLoading()},function(){stopLoading()})},n.set_uploader=function(){uploader_url=c+"/campaigns/"+n.campaign.id+"/attach_image?subdomain="+u.getUserSubdomain(),n.campaign.current_schedule&&n.campaign.current_schedule.id&&(uploader_url=uploader_url+"&campaign_schedule_id="+n.campaign.current_schedule.id),n.uploader=new g({url:uploader_url,headers:{Authorization:u.getUserAuthorization().auth},formData:[{}],removeAfterUpload:!0,autoUpload:!1}),n.uploader.onSuccessItem=function(e,t,a,i){n.uploading=!1,t.data&&n.deferred_image.resolve('<img src="'+t.data.image_url+'" style="width: 30%"/>')},n.uploader.onBeforeUploadItem=function(e){n.uploading=!0},n.uploader.onErrorItem=function(e,t,a,i){n.uploading=!1},n.uploader.onAfterAddingFile=function(e){e.upload()}},showPopupUnsaved=function(e,n,a){if(!a)return!0;popupUnsavedForm=t.confirm_modal({text:"Changes were made on this page, do you want to save them before close it?",custom_confirm:"Save changes",custom_cancel:"Don't save"}),popupUnsavedForm.closePromise.then(function(t){t.value?(e(),resetMessagesContentsChanged()):(resetMessagesContents(),resetMessagesContentsChanged(),n())})}}]),App.controller("campaignCustomTemplatesCtrl",["$rootScope","$scope","$state","$stateParams","Campaign","CampaignContinuingCareRecalls","ngDialog","$q","ProcedureCode","$api",function(e,t,n,a,i,o,s,r,l,c){t.formData={name:null},t.loadProcedureCodes=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,a=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t.proceduresLoading=!0,search_params={location_id:e.location.id},n&&(t.formData.name=n.campaign_layout.name,search_params.campaign_id=n.id,!a&&n.campaign_layout.procedure_code_ids&&n.campaign_layout.procedure_code_ids.length&&(search_params["ids[]"]=n.campaign_layout.procedure_code_ids)),t.procedure_codes=l.$search(search_params),t.procedure_codes.$finally(function(){t.proceduresLoading=!1,a&&n&&(t.selected_procedure_codes=t.selectedProcedureCodes())})},t.showProcedureCodes=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t.proceduresEdit=n,t.campaignProcedureCodesDialog=s.open({template:"/app/views/campaigns/campaign_custom/modal/post-procedure-types.html",className:"ne__modal ne__modal--care-types",scope:t}),t.loadProcedureCodes(e,n)},t.selectedProcedureCodes=function(){return _.filter(t.procedure_codes,"is_selected")},t.savePostOpFollowup=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;t.proceduresLoading=!0,procedure_code_ids=_.map(t.selectedProcedureCodes(),"id"),opts={location_id:e.location.id,campaign:{campaign_layout:{name:t.formData.name,procedure_code_ids:JSON.stringify(procedure_code_ids)}}},base_url="/campaigns/",n?(requestType="PUT",requestUrl=base_url+n.id,opts.campaign.campaign_layout.id=n.campaign_layout.id):(requestType="POST",requestUrl=base_url,opts.campaign.campaign_layout.campaign_type="post_procedure_followup"),c(requestType,requestUrl,opts).then(function(a){t.campaignProcedureCodesDialog&&t.campaignProcedureCodesDialog.close(),t.campaignCustomDialog&&t.campaignCustomDialog.close(),n&&a.data.code?(t.campaign=a.data.data,t.procedure_codes=t.campaign.campaign_layout.procedure_codes):e.$broadcast("loc_change",e.location)})},t.toggleProcedureCode=function(e,n){n&&(e.is_selected=!e.is_selected,t.selected_procedure_codes=t.selectedProcedureCodes())},t.loadContinuingCareRecalls=function(){t.recallsLoading=!0,t.continuing_care_recalls=o.$search(_.merge({location_id:e.location.id})),t.continuing_care_recalls.$finally(function(){t.recallsLoading=!1})},t.showContinuingCareRecallsTypes=function(){t.campaignContinuingRecareRecallsTypesDialog=s.open({template:"/app/views/campaigns/campaign_custom/modal/continuing_care_types.html",className:"ne__modal ne__modal--care-types",scope:t}),t.loadContinuingCareRecalls()},t.selectedRecalls=function(){return t.continuing_care_recalls.filter(function(e){return e.is_selected})},t.saveContinuingCareRecall=function(){defered_recalls=r.defer(),defered_recalls.promise.then(function(){t.campaignContinuingRecareRecallsTypesDialog&&t.campaignContinuingRecareRecallsTypesDialog.close(),t.campaignCustomDialog&&t.campaignCustomDialog.close(),e.$broadcast("loc_change",e.location)}),t.recallsLoading=!0,t.selectedRecalls().forEach(function(t,n,a){i.$create(_.merge({location_id:e.location.id,campaign:{campaign_layout:{recall_type_id:t.id,campaign_type:"continuing_care_recall",name:t.name}}})).$then(function(){n===a.length-1&&defered_recalls.resolve(!0)})})},t.toggleContinuingCareRecall=function(e){e.is_selected=!e.is_selected,t.selected_recalls=t.selectedRecalls()}}]),App.controller("campaignManualCtrl",["$controller","$rootScope","$scope","$state","$stateParams","Perm","Campaign","ngDialog","responseHelper","SweetAlert","$window","$timeout",function(e,t,n,a,i,o,s,r,l,c,p,d){n.doNotReloadCampaign||e("campaignCtrl",{$scope:n}),n.loadingCampaign=!0,n.is_manual=!0,n.current_filter=i.current_filter,n.$on("campaignControllerLoaded",function(e,a){n.redirectUnlessCanAccessTab("campaigns"),!n.campaign&&n.$parent&&n.$parent.campaign&&(n.campaign=n.$parent.campaign||s.$new()),(n.campaign.is_activated||n.campaign.is_archived)&&n.callLoadEmailPreview(),!t.is_inst_admin&&n.campaign.multi_locations_ids&&n.campaign.multi_locations_ids.length&&(accessible_locations_ids=_.map(t.locations,"id"),non_accessible_locations=n.campaign.multi_locations_ids.filter(function(e){return!accessible_locations_ids.includes(e)}),n.denyPatientsEdit=non_accessible_locations.length>0),n.convertCampaignSettingDates(n.campaign.campaign_setting),n.set_uploader(),watchContentChange(),n.loadingCampaign=!1,n.sendLater=!1,n.sendText=(!0===n.sendLater?"Send at scheduled date":"Send now")||"Send now"}),n.finalizeCampaignPopup=function(){n.campaign.campaign_setting.patients_csv_uploading_in_progress?(callback=function(){showFinalizeCampaignPopup()},n.saveDraft(callback)):showFinalizeCampaignPopup()},showFinalizeCampaignPopup=function(){n.campaign.campaign_setting.scheduled_at?(n.showScheduledAt=!0,n.scheduledAtUpdate(n.campaign.campaign_setting.scheduled_at)):n.showScheduledAt=!1,n.finalize_modal=r.open({template:"/app/views/campaigns/campaign_manual/modal/send.html",scope:n,className:"ne__modal ne__modal--manual ne__modal--manual__finalize"})},n.saveDraft=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!validateNoCampaignName())return!1;callback=function(){resetMessagesContentsChanged(),e&&e()},n.save_campaign({attrs:["campaign_layout","campaign_setting"]},callback)},n.finalizeCampaign=function(){return n.finalize_modal.close(),!!validateNoCampaignName()&&(!!validateFinalizeCampaign()&&(n.laddaFinalizeLoading=!0,n.loadingCampaign=!0,callback=function(){resetMessagesContentsChanged(),send_campaign=n.campaign.send_campaign.$new(),send_campaign.$save().$finally(function(){n.laddaFinalizeLoading=!1,n.loadingCampaign=!1,l.redirectOrToastOnResp(send_campaign),send_campaign.$response.data.code&&(n.campaign.is_activated=!0,n.callLoadEmailPreview())})},error_callback=function(){n.laddaFinalizeLoading=!1,n.loadingCampaign=!1},void n.save_campaign({silent:!0},callback,error_callback)))},n.toggleScheduledAt=function(){n.showScheduledAt=!n.showScheduledAt,n.showScheduledAt||(n.campaign.campaign_setting.scheduled_at=null,n.campaign.campaign_setting.scheduled_at_formatted=null)},n.scheduledAtUpdate=function(e){new_date=moment(e),n.campaign.campaign_setting.scheduled_at=new_date,n.campaign.campaign_setting.scheduled_at_formatted=new_date.format("D MMM, YYYY h:mm a")},validateFinalizeCampaign=function(){return setting=n.campaign.campaign_setting,layout=n.campaign.campaign_layout,!(!setting||!layout)&&(setting.email_enabled||setting.sms_enabled?setting.email_enabled&&(!layout.email_body||layout.email_body.replace("INSERTLOGO","").replace(/\<[^>]*\>/g,"").length<=15)?(c.swal({title:"Error",text:"Email content should contain more than 15 characters, please fix and finalize again."}),!1):!setting.email_enabled||null!==layout.email_subject&&void 0!==layout.email_subject&&""!==layout.email_subject?!(setting.sms_enabled&&(!layout.sms_body||layout.sms_body.replace("New message from LOCATIONNAME:","").length<=15))||(c.swal({title:"Error",text:"Sms content should contain more than 15 characters, please fix and finalize again."}),!1):(c.swal({title:"Error",text:"Email subject cannot be empty, please fix and finalize again."}),!1):(c.swal({title:"Error",text:"Please enable email or sms sending."}),!1))},n.showEmailPreview=function(){n.stage="email_preview",n.callLoadEmailPreview()},n.callLoadEmailPreview=function(){n.loadEmailPreview(n.campaign.campaign_layout.email_subject,n.campaign.campaign_layout.email_body)},n.closeEmailPreview=function(){n.stage="main"},n.sendTest=function(e){n.msg_type=e,n.send_test=n.campaign.send_test.$new(),n.stage="send_test"},n.sendTestMessage=function(){n.saving=!0,n.send_test.location_id=t.location.id,n.send_test.email_subject=n.campaign.campaign_layout.email_subject,n.send_test.email_body=n.campaign.campaign_layout.email_body,n.send_test.sms_body=n.campaign.campaign_layout.sms_body,n.send_test.$save().$then(function(e){n.saving=!1,n.stage="main",l.redirectOrToastOnResp(n.send_test)})},n.editPatients=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];n.activePill=2,n.doNotReloadCampaign=!0,r.open({template:"/app/views/campaigns/campaign_manual/modal/new.html",className:"ne__modal ne__modal--manual",data:{restrictEdit:e},scope:n,controller:"campaignManualFiltersCtrl"})},n.showPatients=function(){n.editPatients(!0)},n.toggleIsReused=function(e){e.preventDefault(),toggleCallback=function(e){d(function(){n.campaign.campaign_layout.is_reused=!n.campaign.campaign_layout.is_reused,n.save_campaign({attrs:["campaign_layout.id","campaign_layout.is_reused"]},e)})},n.campaign.campaign_layout.is_reused?(n.campaign.is_activated&&!n.campaign.last_sent_at&&n.campaign.campaign_setting&&n.campaign.campaign_setting.scheduled_at?campaign_filter="scheduled":n.is_activated||(campaign_filter="sent"),dialog=t.confirm_modal({title:"Remove from Reuse",text:"Are you sure you want to remove this campaign from your Reuse folder? It will be moved back to the "+_.capitalize(campaign_filter)+" one.",custom_confirm:"Remove from reuse"}),dialog.closePromise.then(function(e){1==e.value&&(redirectTo=function(){a.go("app.campaigns_manuals",{current_filter:campaign_filter})},toggleCallback(redirectTo))})):(redirectTo=function(){a.go("app.campaigns_manuals",{current_filter:"reuse"})},toggleCallback(redirectTo))},n.reuseCampaign=function(){if(n.campaign.campaign_setting.is_csv_upload)return void t.confirm_modal({text:"We have a brand new CSV uploading feature. You need to create a new campaign to use it.",custom_confirm:"Ok"});dialog=t.confirm_modal({text:"A new draft campaign with the same content will be created. Do you want to proceed?",custom_confirm:"Create new campaign"}),dialog.closePromise.then(function(e){1==e.value&&(n.loadingCampaign=!0,new_campaign_layout=_.clone(n.campaign.campaign_layout),new_campaign_layout.id=null,new_campaign_layout.is_reused=!1,new_campaign_setting=_.clone(n.campaign.campaign_setting),new_campaign_setting.id=null,new_campaign_setting.campaign_id=null,new_campaign_setting.scheduled_at=!1,new_campaign_setting.recipients_added_ids=[],new_campaign_setting.recipients_removed_ids=[],new_campaign_multi_locations_ids=n.campaign.multi_locations_ids,reused_campaign_id=n.campaign.id,n.campaign=s.$new(),n.campaign.location_id=t.location.id,n.campaign.multi_locations_ids=new_campaign_multi_locations_ids,!t.is_inst_admin&&n.campaign.multi_locations_ids&&n.campaign.multi_locations_ids.length&&(accessible_locations_ids=_.map(t.locations,"id"),n.campaign.multi_locations_ids=_.intersection(n.campaign.multi_locations_ids,accessible_locations_ids)),n.campaign.campaign_layout=new_campaign_layout,n.campaign.campaign_setting=new_campaign_setting,callback=function(){a.go("app.campaign_manual",{id:n.campaign.id},{reload:!0}),n.loadingCampaign=!1},n.save_campaign({attrs:["campaign_layout","campaign_setting","multi_locations_ids"],reused_campaign_id:reused_campaign_id},callback))})},watchContentChange=function(){n.initial_email_body=n.campaign.campaign_layout.email_body,n.initial_email_subject=n.campaign.campaign_layout.email_subject,n.$watch("campaign.campaign_layout.email_body",function(e,t){e==n.initial_email_body?n.email_body_changed=!1:n.email_body_changed=!0}),n.$watch("campaign.campaign_layout.email_subject",function(e,t){e==n.initial_email_subject?n.email_subject_changed=!1:n.email_subject_changed=!0}),n.initial_sms_body=n.campaign.campaign_layout.sms_body,n.$watch("campaign.campaign_layout.sms_body",function(e,t){e==n.initial_sms_body?n.sms_body_changed=!1:n.sms_body_changed=!0}),n.initial_campaign_name=n.campaign.campaign_layout.name,n.$watch("campaign.campaign_layout.name",function(e,t){e==n.initial_campaign_name?n.campaign_name_changed=!1:n.campaign_name_changed=!0})},p.onbeforeunload=function(e){return validateNoCampaignName()?showPopupUnsavedIfRequired():"Please update the campaign name to proceed."},n.$on("$destroy",function(e){p.onbeforeunload=void 0}),showPopupUnsavedIfRequired=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return do_not_save_callback=function(){t&&a.go(t.name,t.params)},save_callback=function(){n.save_campaign({attrs:["campaign_layout","campaign_setting","multi_locations_ids"]},do_not_save_callback)},n.email_body_changed||n.email_subject_changed||n.sms_body_changed?(showPopupUnsaved(save_callback,do_not_save_callback,e),res=!0):res=void 0,res},showPopupNoCampaignName=function(){return n.email_body_changed||n.email_subject_changed||n.sms_body_changed?(showPopupUnsaved(save_callback,do_not_save_callback,with_popup),res=!0):res=void 0,res},resetMessagesContentsChanged=function(){n.email_body_changed=n.email_subject_changed=n.sms_body_changed=n.campaign_name_changed=!1},resetMessagesContents=function(){n.email_body_changed&&(n.campaign.campaign_layout.email_body=n.initial_email_body),n.sms_body_changed&&(n.campaign.campaign_layout.sms_body=n.initial_sms_body),n.email_subject_changed&&(n.campaign.campaign_layout.email_subject=n.initial_email_subject),n.campaign_name_changed&&(n.campaign.campaign_layout.name=n.initial_campaign_name)},n.$on("$stateChangeStart",function(e,t,n,a,i,o){"app.campaign_manual"===a.name&&"app.campaign_manual"!==t.name&&(validateNoCampaignName()&&!showPopupUnsavedIfRequired(!0,t)||e.preventDefault())}),validateNoCampaignName=function(){return campaign_name=n.campaign.campaign_layout.name&&n.campaign.campaign_layout.name.toLowerCase().trim(),!!(n.campaign.is_activated||n.campaign.is_archived||campaign_name&&campaign_name.length&&"untitled campaign"!=campaign_name)||(c.swal({title:"Hold your horses",text:"Please edit the campaign title",type:"warning",confirmButtonColor:"#DCDEDF"}),!1)}}]),App.controller("campaignManualFiltersCtrl",["$controller","$api","$rootScope","$scope","$state","responseHelper","Campaign","CampaignPatients","Perm","SweetAlert","ngDialog","FileUploader","SERVER_BASE_URL","authService","$timeout","fileResponse",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,g,f){function h(){return!!a.selected_locations_ids.length||(c.swal({title:"Error",text:"Please choose a location"}),!1)}function v(){if(!1===a.showAllActiveFilter&&(a.campaign.campaign_setting.select_all_active=!1),a.showCsvUploadFilter||(a.campaign.campaign_setting.recipients_added_ids=[],a.attachment=null,a.campaign.campaign_setting.is_csv_upload=!1),!1===a.showAgeFilter&&(a.campaign.campaign_setting.age_min=null,a.campaign.campaign_setting.age_max=null),!1===a.showGenderFilter&&(a.campaign.campaign_setting.gender=null),!1===a.showLastSeenFilter&&resetCampaignSettingsLastSeenDates(),!1===a.showApptDatesFilter&&resetCampaignSettingsApptDates(),!1===a.showLastSeenFilter&&!1===a.showApptDatesFilter&&(resetCampaignSettingsLastSeenDates(),resetCampaignSettingsApptDates()),!1===a.showProvidersFilter&&(a.campaign.campaign_setting.provider_ids=[]),!0===a.showAgeFilter){if((0!=a.campaign.campaign_setting.age_min||0!=a.campaign.campaign_setting.age_max)&&(0!=a.campaign.campaign_setting.age_min&&!a.campaign.campaign_setting.age_min||0!=a.campaign.campaign_setting.age_max&&!a.campaign.campaign_setting.age_max))return c.swal({title:"Error",text:"Please choose an age"}),!1;if(a.campaign.campaign_setting.age_min>a.campaign.campaign_setting.age_max)return c.swal({title:"Error",text:"Please choose age max greater then age min"}),!1}if(!0===a.showGenderFilter&&0!==a.campaign.campaign_setting.gender&&!a.campaign.campaign_setting.gender)return c.swal({title:"Error",text:"Please choose a gender"}),!1;if(!0===a.showLastSeenFilter){if(!a.campaign.campaign_setting.last_seen_appt_from||!a.campaign.campaign_setting.last_seen_appt_to)return c.swal({title:"Error",text:"Please choose a last seen date range"}),!1;if(a.campaign.campaign_setting.last_seen_appt_from>a.campaign.campaign_setting.last_seen_appt_to)return c.swal({title:"Error",text:"Please choose a valid last seen date range"}),!1}if(!0===a.showApptDatesFilter){if(!a.campaign.campaign_setting.appt_to||!a.campaign.campaign_setting.appt_from)return c.swal({title:"Error",text:"Please choose an appointment date range"}),!1;if(a.campaign.campaign_setting.appt_from>a.campaign.campaign_setting.appt_to)return c.swal({title:"Error",text:"Please choose a valid appointment date range"}),!1}return!0!==a.showProvidersFilter||a.campaign.campaign_setting.provider_ids.length?a.showAllActiveFilter||a.showCsvUploadFilter||a.showAgeFilter||a.showGenderFilter||a.showLastSeenFilter||a.showApptDatesFilter||a.showProvidersFilter?!(!0===a.showCsvUploadFilter&&!a.attachment&&a.invalidCsv)||(c.swal({title:"Error",text:"Please Upload a valid CSV file"}),!1):(c.swal({title:"Error",text:"Please select at least one option before proceeding"}),!1):(c.swal({title:"Error",text:"Please select at least one provider to filter by"}),!1)}a.ngDialogData&&(a.ngDialogData.parent_controller&&e(a.ngDialogData.parent_controller,{$scope:a}),a.restrictEdit=a.ngDialogData.restrictEdit||a.campaign&&(a.campaign.campaign_setting.is_csv_upload||a.campaign.campaign_setting.is_patients_from_csv)),a.loadingCampaign=!1,a.invalidCsv=!0,l.perm_promise.then(function(){a.locations=angular.copy(n.locations),a.selected_locations_ids=[],a.campaign&&a.campaign.multi_locations_ids&&a.campaign.multi_locations_ids.length?_.each(a.campaign.multi_locations_ids,function(e){a.toggleLocation(e,!0)}):a.toggleLocation(n.location.id,!0),setProviders(),set_uploader()}),setProviders=function(){perm_opts={ids:!0,no_self:!0},a.selected_locations_ids&&a.selected_locations_ids.length&&(perm_opts.location_id=a.selected_locations_ids),a.providers=l.friends(perm_opts).result,a.providers=_.sortBy(a.providers,function(e){return e.display_name||e.name})},setAvailableFilters=function(){a.disableCsvUploadFilter=a.selected_locations_ids.length>1},watchContentChange=function(){},resetScopeSearch=function(){a.scope_search={page:0,per_page:100,hit_end:!1},a.result={}},resetPatients=function(){a.patients=[]},a.campaign||(a.campaign=s.$new()),clearAllFilters=function(e){a.showApptDatesFilter=!1,a.showAgeFilter=!1,a.showAgeSlider=!1,a.showGenderFilter=!1,a.showLastSeenFilter=!1,a.showProvidersFilter=!1,"showCsvUploadFilter"==e?a.showAllActiveFilter=!1:a.showCsvUploadFilter=!1},resetFilters=function(){clearAllFilters(),a.campaign.campaign_setting.select_all_active?a.showAllActiveFilter=!0:a.showAllActiveFilter=!1,a.campaign.campaign_setting.is_csv_upload||a.campaign.campaign_setting.is_patients_from_csv?a.showCsvUploadFilter=!0:a.showCsvUploadFilter=!1,a.campaign.campaign_setting.appt_from&&a.campaign.campaign_setting.appt_to&&(a.showApptDatesFilter=!0),a.campaign.campaign_setting.last_seen_appt_from&&a.campaign.campaign_setting.last_seen_appt_to&&(a.showLastSeenFilter=!0),a.campaign.campaign_setting.gender&&(a.showGenderFilter=!0),a.campaign.campaign_setting.provider_ids.length>0&&(a.showProvidersFilter=!0),!a.campaign.campaign_setting.age_min&&0!=a.campaign.campaign_setting.age_min||!a.campaign.campaign_setting.age_max&&0!=a.campaign.campaign_setting.age_max||(a.showAgeFilter=!0,(a.campaign.campaign_setting.age_min||0==a.campaign.campaign_setting.age_min)&&(a.ageSlider.minValue=a.campaign.campaign_setting.age_min),(a.campaign.campaign_setting.age_max||0==a.campaign.campaign_setting.age_max)&&(a.ageSlider.maxValue=a.campaign.campaign_setting.age_max))},campaignSettingOnFirstLoad=function(){a.campaign_setting_on_first_load=angular.copy(a.campaign.campaign_setting)},initCampaignSetting=function(){a.init_campaign_setting=angular.copy(a.campaign.campaign_setting),a.campaign.campaign_setting&&(a.campaign.campaign_setting.recipients_added_ids.length||a.campaign.campaign_setting.recipients_removed_ids.length)&&(a.campaign_setting_changed=!0)},a.genders=["male","female","other"],a.showProvidersList=!1,a.ageSlider={minValue:0,maxValue:121,floor:0,ceil:121},resetScopeSearch(),resetPatients(),resetFilters(),initCampaignSetting(),campaignSettingOnFirstLoad(),a.$on("campaignControllerLoaded",function(e,t){resetScopeSearch(),resetPatients(),resetFilters(),initCampaignSetting(),campaignSettingOnFirstLoad()}),a.$on("$destroy",function(){return!a.ignore_destroy_event&&(!angular.equals(a.campaign.campaign_setting,a.campaign_setting_on_first_load)&&(1==a.activePill?a.campaign.id?(text="Do you want to apply filters before closing the window? ATTENTION: recipients list will be changed accordingly!",custom_confirm="Apply filters and save recipients",custom_cancel="Don't apply filters"):(text="Do you want to save campaign with selected filters?",custom_confirm="Save campaign",custom_cancel="Don't save"):2==a.activePill&&(a.campaign.id?(text="Do you want to save recipients before close the window?",custom_confirm="Save recipients"):(text="Do you want to save campaign?",custom_confirm="Save campaign"),custom_cancel="Don't save"),void n.confirm_modal({text:text,custom_confirm:custom_confirm,custom_cancel:custom_cancel}).closePromise.then(function(e){1==e.value?saveAction():a.campaign.campaign_setting=angular.copy(a.campaign_setting_on_first_load)})))}),resetCampaignSettingsLastSeenDates=function(){a.campaign.campaign_setting.last_seen_appt_from=null,a.campaign.campaign_setting.last_seen_appt_to=null},resetCampaignSettingsApptDates=function(){a.campaign.campaign_setting.appt_from=null,a.campaign.campaign_setting.appt_to=null},a.clearFilters=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&a.toggleAllLocations(!1),a.patients=[],a.patients_count=0,a.patients_cleared=!0,clearAllFilters(),a.campaign.campaign_setting.select_all_active=!1,a.campaign.campaign_setting.provider_ids=[],a.campaign.campaign_setting.age_min=null,a.campaign.campaign_setting.age_max=null,a.campaign.campaign_setting.gender=null,resetCampaignSettingsLastSeenDates(),resetCampaignSettingsApptDates(),a.campaign.campaign_setting.recipients_added_ids=[],a.campaign.campaign_setting.recipients_removed_ids=[],a.campaign.campaign_setting.is_csv_upload=!1,a.campaign.campaign_setting.is_patients_from_csv=!1},a.toggleProvider=function(e,t){provider_ids=a.campaign.campaign_setting.provider_ids,-1!=provider_ids.indexOf(e.id)?_.remove(provider_ids,function(t){return t==e.id}):provider_ids.push(e.id),a.showProvidersFilter=!0,filtersDependencies("showProvidersFilter"),t.stopPropagation()},a.toggleProvidersList=function(e){a.showProvidersFilter=!0,a.showProvidersList=!a.showProvidersList,filtersDependencies("showProvidersFilter"),e.stopPropagation()},a.toggleAgeSlider=function(e){a.showAgeFilter=!0,a.showAgeSlider=!a.showAgeSlider,a.showAgeSlider&&a.ageUpdate(),e.stopPropagation()},a.searchPatients=function(e){return t("GET","/patient_searches",{name:e,location_id:a.selected_locations_ids,has_email_or_phone:!0}).then(function(e){return e.data.data.map(function(e){return e})})},a.toggleAllLocations=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];_.each(a.locations,function(t){t.isChecked=e}),setSelectedLocations()},a.toggleLocation=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1]
;selected_location=_.filter(a.locations,function(t){return t.id==e})[0],selected_location&&(selected_location.isChecked=!selected_location.isChecked),setSelectedLocations(),t||(a.campaign_setting_changed=!0)},setSelectedLocations=function(){a.selected_locations_ids=_.compact(_.map(a.locations,function(e){if(e.isChecked)return e.id})),setAvailableFilters(),setProviders()},a.remove_patient=function(e){_.remove(a.patients,function(t){return t.id==e.id}),_.remove(a.campaign.campaign_setting.recipients_added_ids,function(t){return t==e.id}),a.campaign.campaign_setting.recipients_removed_ids.push(e.id),a.patients_count--,initCampaignSetting(),a.campaign_setting_changed=!0},a.add_patient=function(e,t,n,i){input=$(i.currentTarget).parent().siblings("#add_patient"),visible_patients_ids=_.map(a.patients,function(e){return e.id}),_.includes(visible_patients_ids,e.id)||(a.patients.unshift(e),_.remove(a.campaign.campaign_setting.recipients_removed_ids,function(t){return t==e.id}),a.campaign.campaign_setting.recipients_added_ids.push(e.id),a.patients_count++,initCampaignSetting(),a.campaign_setting_changed=!0),g(function(){input.val("")},0)},a.load_more_patients=function(){if(a.loadingCampaign||a.loading||a.scope_search.hit_end||2!=a.activePill)return!1;if((a.campaign.campaign_setting.is_csv_upload||a.campaign.campaign_setting.is_patients_from_csv)&&0!=a.campaign.campaign_setting.recipients_added_ids.length){a.patients_count=a.campaign.campaign_setting.recipients_added_ids.length;var e=!0,t=!1,n=void 0;try{for(var i,o=a.campaign.campaign_setting.recipients_added_ids[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var s=i.value;a.patients.push({last_name:s["Patient Last Name"],first_name:s["Patient First Name"],email:s.Email,phone_number:s.Phone,bio:{phone_number:s.Phone}})}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}a.scope_search.hit_end=!0}else a.loading=!0,a.scope_search.page++,campaign_setting_with_converted_dates=angular.copy(a.campaign.campaign_setting),campaign_setting_with_converted_dates=a.convertCampaignSettingDates(campaign_setting_with_converted_dates,!0),resp=r.$create({location_id:a.selected_locations_ids,campaign_id:a.campaign.id,campaign_setting:campaign_setting_with_converted_dates,page:a.scope_search.page,per_page:a.scope_search.per_page}),resp.$promise.then(function(e){a.patients_count=resp.$response.data.count,a.patients_count_description=resp.$response.data.description,resp.$response.data.data.length?a.patients=a.patients.concat(resp.$response.data.data):a.scope_search.hit_end=!0,a.loading=!1})},a.goToLocations=function(){a.activePill=0},a.goToFilters=function(){resetScopeSearch(),resetFilters(),a.activePill=1},goToRecipients=function(){if(!a.campaign.id||angular.equals(a.campaign.campaign_setting,a.init_campaign_setting)&&!a.campaign_setting_changed)goToRecipientsList();else{n.confirm_modal({title:"Filters applying",text:"Are you sure you want to apply selected filters? Recipients manually added or removed before will be cleared.",custom_confirm:"Yes, apply selected filters"}).closePromise.then(function(e){1==e.value?goToRecipientsList():(a.campaign.campaign_setting=angular.copy(a.init_campaign_setting),a.scope_search.hit_end=!1,a.activePill=2)})}},goToRecipientsList=function(){resetPatients(),a.campaign_setting_changed=!1,initCampaignSetting(),a.scope_search.hit_end=!1,a.activePill=2,a.load_more_patients()},a.saveCampaignSetting=function(){if(0===a.activePill){if(!h())return!1;a.goToFilters()}else if(1===a.activePill){if(!v())return!1;goToRecipients()}else 2===a.activePill?(saveAction(),resetFilters()):goToCampaign()},isCsvUploading=function(){return a.campaign.campaign_setting.is_patients_from_csv&&a.uploader&&a.uploader.queue&&a.uploader.queue[0]},goToCampaign=function(){i.go("app.campaign_manual",{id:a.campaign.id},{reload:!0}),"function"==typeof a.closeThisDialog&&(a.ignore_destroy_event=!0,a.closeThisDialog(),a.activePill=null)},saveAction=function(){callback=function(){resetMessagesContentsChanged(),isCsvUploading()?(a.uploader.queue[0].url=m+"/campaigns/"+a.campaign.id+"?subdomain="+u.getUserSubdomain(),a.uploader.queue[0].method="PUT",a.uploader.queue[0].upload()):goToCampaign()},a.campaign.location_id||(_.includes(a.selected_locations_ids,n.location.id)?a.campaign.location_id=n.location.id:a.campaign.location_id=a.selected_locations_ids[0]),a.campaign.multi_locations_ids=a.selected_locations_ids,a.campaign.campaign_setting.is_csv_upload=!1,isCsvUploading()&&(a.campaign.campaign_setting.recipients_added_ids=[]),a.activePill=null,a.save_campaign({attrs:["multi_locations_ids","campaign_layout","campaign_setting"]},callback)},a.$watch("campaign.campaign_setting.last_seen_appt_from",function(){a.campaign.campaign_setting.last_seen_appt_from&&(a.showLastSeenFilter=!0),filtersDependencies("showLastSeenFilter")}),a.$watch("campaign.campaign_setting.last_seen_appt_to",function(){a.campaign.campaign_setting.last_seen_appt_to&&(a.showLastSeenFilter=!0),filtersDependencies("showLastSeenFilter")}),a.$watch("campaign.campaign_setting.appt_from",function(){a.campaign.campaign_setting.appt_from&&(a.showApptDatesFilter=!0),filtersDependencies("showApptDatesFilter")}),a.$watch("campaign.campaign_setting.appt_to",function(){a.campaign.campaign_setting.appt_to&&(a.showApptDatesFilter=!0),filtersDependencies("showApptDatesFilter")}),a.toggle=function(e){a[e]=!a[e],"showAllActiveFilter"===e?(a.campaign.campaign_setting.select_all_active=!a.campaign.campaign_setting.select_all_active,!0===a.showAllActiveFilter&&(clearAllFilters(),a.campaign.campaign_setting.is_patients_from_csv=!1,v())):"showCsvUploadFilter"===e&&1==a[e]?clearAllFilters("showCsvUploadFilter"):("showAgeFilter"===e?(a.showAgeSlider=a[e],a[e]&&a.ageUpdate()):!a[e]||"showLastSeenFilter"!==e&&"showApptDatesFilter"!==e?"showProvidersFilter"===e&&(a.showProvidersList=a[e]):(resetCampaignSettingsLastSeenDates(),resetCampaignSettingsApptDates()),filtersDependencies(e))},filtersDependencies=function(e){!0===a.showApptDatesFilter&&"showApptDatesFilter"===e&&(a.showAgeFilter=!1,a.showAgeSlider=!1,a.showGenderFilter=!1,a.showLastSeenFilter=!1,a.showAllActiveFilter=!1,a.showCsvUploadFilter=!1,a.campaign.campaign_setting.is_patients_from_csv=!1),(!0===a.showAgeFilter&&"showAgeFilter"===e||!0===a.showGenderFilter&&"showGenderFilter"===e||!0===a.showLastSeenFilter&&"showLastSeenFilter"===e)&&(a.showApptDatesFilter=!1,a.showAllActiveFilter=!1,a.showCsvUploadFilter=!1,a.campaign.campaign_setting.is_patients_from_csv=!1),!0===a.showProvidersFilter&&"showProvidersFilter"===e&&(a.showAllActiveFilter=!1,a.showCsvUploadFilter=!1,a.campaign.campaign_setting.is_patients_from_csv=!1)},a.ageUpdate=function(){(a.ageSlider.minValue||0==a.ageSlider.minValue)&&(a.campaign.campaign_setting.age_min=a.ageSlider.minValue),(a.ageSlider.maxValue||0==a.ageSlider.maxValue)&&(a.campaign.campaign_setting.age_max=a.ageSlider.maxValue),a.showAgeFilter=!0,filtersDependencies("showAgeFilter")},a.$watch("campaign.campaign_setting.gender",function(){a.campaign.campaign_setting.gender&&(a.showGenderFilter=!0,filtersDependencies("showGenderFilter"))}),a.$watch("campaign.campaign_setting.provider_ids",function(){a.campaign.campaign_setting.provider_ids&&a.campaign.campaign_setting.provider_ids.length&&(a.showProvidersFilter=!0,filtersDependencies("showProvidersFilter"))}),set_uploader=function(){uploader_url=m+"/campaigns/csv_upload?subdomain="+u.getUserSubdomain(),a.uploader=new d({url:uploader_url,headers:{Authorization:u.getUserAuthorization().auth},removeAfterUpload:!1,autoUpload:!1}),a.uploader.onSuccessItem=function(e,t,n,i){if(a.uploading=!1,a.uploader.queue=[e],a.campaign.campaign_setting.recipients_added_ids=angular.copy(t.data),a.campaign.campaign_setting.is_csv_upload=!1,a.campaign.campaign_setting.is_patients_from_csv=!0,!t.code)return a.invalidCsv=!0,a.uploading_errors=t.error,a.attachment=null,a.uploading_errors&&a.uploading_errors[0]&&c.swal({title:"Invalid CSV file",text:a.uploading_errors[0],html:!0}),!1;a.invalidCsv=!1,t.description&&t.description[0]&&c.swal({title:"Note",text:t.description[0]}),a.saveCampaignSetting()},a.uploader.onBeforeUploadItem=function(e){a.uploading=!0},a.uploader.onAfterAddingFile=function(e){a.attachment=e.file,a.showCsvUploadFilter=!0,a.uploader.queue[0]&&a.uploader.queue[0].upload()}},a.loadSample=function(){var e=[["Patient Last Name","Patient First Name","Email","Phone"],["Doe","John","john@nexhealth.com","2025550191"],["Doe","Jane","","(201) 929-2938"]],t="data:text/csv;charset=utf-8,"+e.map(function(e){return e.join(",")}).join("\n"),n=encodeURI(t),a=document.createElement("a");a.setAttribute("href",n),a.setAttribute("download","sample.csv"),a.click()}}]),App.controller("campaignTemplateActionsEditMessageCtrl",["$scope","$rootScope","ngDialog","$api","FileUploader","$q","$timeout","SERVER_BASE_URL","authService",function(e,t,n,a,i,o,s,r,l){watchContentChange=function(t){"email"==t?(e.$parent.initial_email_body=e.campaign.current_schedule.email_body,e.$parent.initial_email_subject=e.campaign.current_schedule.email_subject,e.$watch("campaign.current_schedule.email_body",function(t,n){t==e.$parent.initial_email_body?e.$parent.email_body_changed=!1:e.$parent.email_body_changed=!0}),e.$watch("campaign.current_schedule.email_subject",function(t,n){t==e.$parent.initial_email_subject?e.$parent.email_subject_changed=!1:e.$parent.email_subject_changed=!0})):"sms"==t&&(e.$parent.initial_sms_body=e.campaign.current_schedule.sms_body,e.$watch("campaign.current_schedule.sms_body",function(t,n){t==e.$parent.initial_sms_body?e.$parent.sms_body_changed=!1:e.$parent.sms_body_changed=!0}))},e.sendTest=function(t){e.msg_type=t,e.send_test=e.campaign.send_test.$new(),e.sendSentModal=n.open({template:"/app/views/campaigns/partials/send-test.html",scope:e,className:"ne__modal ne__modal--send-to"})},e.closeSendTestDialogue=function(t){e.sendSentModal.close(),n.open({template:'<div class="ne__send-test-response" ng-bind-html="ngDialogData.value"></div>',data:{value:t},plain:!0,className:"ne__modal ne__modal--send-to"})},e.sendTestMessage=function(){e.saving=!0,e.send_test.location_id=t.location.id,e.send_test.email_subject=e.campaign.current_schedule.email_subject,e.send_test.email_body=e.campaign.current_schedule.email_body,e.send_test.sms_body=e.campaign.current_schedule.sms_body,e.send_test.$save().$then(function(t){e.saving=!1,e.closeSendTestDialogue(e.send_test.$response.data.description)})},watchContentChange(e.msg_type),e.set_uploader()}]),App.controller("campaignTemplateActionsCtrl",["$scope","$rootScope","ngDialog","SweetAlert","$window",function(e,t,n,a,i){function o(){for(var t=0;t<e.campaign.campaign_schedules.length;t++)if(schedule=e.campaign.campaign_schedules[t],!schedule.sms_enabled&&!schedule.email_enabled&&e.campaign.is_activated&&!e.campaign.is_archived)return sweetAlertError("Please add an email or sms for "+schedule.schedule_num+" "+schedule.schedule_unit+" "+e.campaign.human_campaign_type+", or deactivate this template to proceed."),!1;return!0}mainAction=function(){if(e.stage="main",!e.campaign||!e.campaign.campaign_type)return!1;switch(e.time_units_list=["day","week","month"],e.campaign.campaign_type){case"reminder":case"post_procedure_followup":case"survey":e.schedule_units=["minute","hour"].concat(e.time_units_list);break;case"recall":case"continuing_care_recall":e.schedule_units=e.time_units_list}e.campaign.human_campaign_type=e.campaign.campaign_type.replace(/\_/g," "),e.has_form=t.institution.has_form||t.location.has_form},e.campaign&&mainAction(),e.setStage=function(t){"edit_time"===t&&!1===e.campaign.isEdittingTime&&setCurrentSchedule(),e.stage=t},e.orderBySchedule=function(t){return coeff=1,"continuing_care_recall"!=e.campaign.campaign_type||t.is_followup||(coeff=-1),Number(t.schedule_num_in_seconds)*coeff},e.add_action_item=function(t){e.campaign.isEdittingTime=!1,e.setStage("sidebar_main"),t?setCurrentSchedule(t):setCurrentSchedule()},e.edit_action_item=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.campaign.isEdittingTime=n,!0===n&&(["reminder","recall","continuing_care_recall"].includes(e.campaign.campaign_type)||"survey"==e.campaign.campaign_type&&e.campaign.is_multiple_scheduled)?e.setStage("edit_time"):e.setStage("sidebar_main"),setCurrentSchedule(t)},e.edit_limit_time_span=function(t){e.campaign.isEdittingLimitTimeSpan=!0,e.setStage("edit_limit_time_span"),setCurrentSchedule(t)},setCurrentSchedule=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e.campaign.current_schedule=t?angular.copy(t):{schedule_num:null,schedule_unit:null}},e.cancel_action_item=function(){setCurrentSchedule(),e.setStage("main")},e.validateScheduleNum=function(e,t){return msg=!1,parseInt(e)<1?msg="Please enter positive number":"hour"==t&&parseInt(e)>72?msg="If you want to select more then 72 hours, please use the 'days' unit":"minute"==t&&(parseInt(e)%5!=0||parseInt(e)<15)&&(msg="Please enter number in intervals of 5 starting from 15 (e.g. 15, 20, 25, etc)"),msg},validateScheduleItem=function(){return e.campaign.current_schedule.schedule_num&&e.campaign.current_schedule.schedule_unit?(schedule_num_validation_error=e.validateScheduleNum(e.campaign.current_schedule.schedule_num,e.campaign.current_schedule.schedule_unit),!schedule_num_validation_error&&(sameSchedule=_.find(e.campaign.campaign_schedules,function(t){return t.id!==e.campaign.current_schedule.id&&t.schedule_num==e.campaign.current_schedule.schedule_num&&t.schedule_unit==e.campaign.current_schedule.schedule_unit}),!sameSchedule||"continuing_care_recall"===e.campaign.campaign_layout.campaign_type||(sweetAlertError("Same schedule is already saved in your actions, please use another one."),!1))):!!(!e.campaign.is_multiple_scheduled||e.campaign.current_schedule.schedule_num&&e.campaign.current_schedule.schedule_unit)||(sweetAlertError("Please enter a valid interval"),!1)},e.save_action_item=function(){validateScheduleItem()&&(e.campaign.current_schedule.id?e.campaign.campaign_schedules=_.map(e.campaign.campaign_schedules,function(t){return t.id===e.campaign.current_schedule.id&&(t=e.campaign.current_schedule),t}):e.campaign.campaign_schedules.push(e.campaign.current_schedule),saveSchedule(),e.messageTemplateEditDialog&&e.messageTemplateEditDialog.close(!0))},e.toggleCustomOption=function(t,n){setCurrentSchedule(t),e.campaign.current_schedule[n]=!e.campaign.current_schedule[n],e.save_action_item(!0)},e.delete_action_item=function(n){deleteActionPopup=t.confirm_modal({text:"Are you sure you want to remove the action?",custom_confirm:"Remove the action",custom_cancel:"Don't remove"}),deleteActionPopup.closePromise.then(function(t){1==t.value&&(n._destroy=!0,saveSchedule()),"function"==typeof e.closeThisDialog&&e.closeThisDialog()})},saveSchedule=function(){callback=function(){"main"!=e.stage&&e.setStage("main")},e.save_campaign({attrs:["campaign_schedules"]},callback())},openMessageTemplatePopup=function(t){var a=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.with_buttons=a,e.messageTemplatePreviewDialog=n.open({template:"/app/views/campaigns/campaign_template/actions/"+t+"_preview.html",scope:e,className:"ne__modal ne__modal--campaign-preview"})},e.openEmail=function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];openMessageTemplatePopup("email",t),e.loadEmailPreview(e.campaign.current_schedule.email_subject,e.campaign.current_schedule.email_body)},e.openSms=function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];openMessageTemplatePopup("sms",t),e.loadSmsPreview(e.campaign.current_schedule.sms_body)},e.activateEmail=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];setCurrentSchedule(t),e.campaign.current_schedule.email_enabled=n,e.messageTemplatePreviewDialog&&e.messageTemplatePreviewDialog.close(),e.save_action_item(!0)},removeCommunicationPopup=function(n){var a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];custom_text=a?"option":"message",deleteActionPopup=t.confirm_modal({text:"Are you sure you want to remove this "+custom_text+"?",custom_confirm:"Remove",custom_cancel:"Don't remove"}),deleteActionPopup.closePromise.then(function(t){if(1==t.value&&n(),"function"==typeof e.closeThisDialog)return e.closeThisDialog(),!1})},e.removeLimitTimeSpan=function(t){onSuccess=function(){setCurrentSchedule(t),e.campaign.current_schedule.limit_time_span_unit=null,e.campaign.current_schedule.limit_time_span_num=null,e.save_action_item(!0)},removeCommunicationPopup(onSuccess)},e.removeCommunication=function(t,n){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];onSuccess=function(){e[t](n,a)},removeCommunicationPopup(onSuccess,a)},e.activateSms=function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];setCurrentSchedule(t),e.campaign.current_schedule.sms_enabled=n,e.messageTemplatePreviewDialog&&e.messageTemplatePreviewDialog.close(),e.save_action_item(!0)},editMessageTemplate=function(t){e.messageTemplatePreviewDialog&&e.messageTemplatePreviewDialog.close(),e.msg_type=t,e.messageTemplateEditDialog=n.open({template:"/app/views/campaigns/campaign_template/actions/"+t+"_edit.html",scope:e,controller:"campaignTemplateActionsEditMessageCtrl",className:"ne__modal ne__modal--campaign-edit",preCloseCallback:function(e){if(!0!==e&&showPopupUnsavedIfRequired(!0))return!1}}),e.messageTemplateEditDialog.closePromise.then(function(e){1==e.value&&resetMessagesContentsChanged()})},e.editEmail=function(t){setCurrentSchedule(t),e.campaign.current_schedule.email_body||(e.campaign.current_schedule.email_body=e.campaign.campaign_layout.email_body),e.campaign.current_schedule.email_subject||(e.campaign.current_schedule.email_subject=e.campaign.campaign_layout.email_subject),editMessageTemplate("email")},e.editSms=function(t){setCurrentSchedule(t),e.campaign.current_schedule.sms_body||(e.campaign.current_schedule.sms_body=e.campaign.campaign_layout.sms_body),editMessageTemplate("sms")},sweetAlertError=function(e){a.swal({title:"Errors",text:e,type:"warning",confirmButtonColor:"#DCDEDF"})},i.onbeforeunload=function(t){return o()?showPopupUnsavedIfRequired():"Please add an email or sms for "+schedule.schedule_num+" "+schedule.schedule_unit+" "+e.campaign.human_campaign_type+", or deactivate this template to proceed."},e.$on("$destroy",function(e){i.onbeforeunload=void 0}),showPopupUnsavedIfRequired=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return do_not_save_callback=function(){e.messageTemplateEditDialog&&e.messageTemplateEditDialog.close(!0),n&&$state.go(n.name,n.params)},save_callback=function(){e.activateEmail(e.campaign.current_schedule),do_not_save_callback()},e.email_body_changed||e.email_subject_changed||e.sms_body_changed?(showPopupUnsaved(save_callback,do_not_save_callback,t),res=!0):res=void 0,res},resetMessagesContentsChanged=function(){e.email_body_changed=e.email_subject_changed=e.sms_body_changed=!1},resetMessagesContents=function(){e.email_body_changed&&(e.campaign.current_schedule.email_body=e.initial_email_body),e.sms_body_changed&&(e.campaign.current_schedule.sms_body=e.initial_sms_body),e.email_subject_changed&&(e.campaign.current_schedule.email_subject=e.initial_email_subject)},e.$on("$stateChangeStart",function(e,t,n,a,i,s){"app.campaign_template.actions"===a.name&&(o()&&!showPopupUnsavedIfRequired(!0,t)||e.preventDefault())})}]),App.controller("campaignTemplateHistoryCtrl",["$scope","NgTableParams","filterByDate",function(e,t,n){function a(e){if(e.appointment){var t=moment(e.created_at),n=-t.diff(moment(e.appointment.start_time),"minutes");if(n)var a=Math.round(n/1440);if(a<30&&a>=7){return Math.round(a/7)+" week"}if(a>0&&a<7)return a+" day";if(a>=30){return Math.round(a/30)+" month"}if(0===a)return"Same day"}}mainAction=function(){e.search_params={},e.search_by_date={},e.tableParams=new t({},{getData:function(t){return e.loadingLogs=!0,resp=e.campaign.logs.$fetch(_.extend({},e.search_params,e.search_by_date,{page:t.page(),per_page:t.count()})),resp.$promise.then(function(n){e.logs=resp.$response.data.data,e.loadingLogs=!1,"reminder"==e.campaign.campaign_type&&(confirmed=_.map(e.logs,function(e){return e.appointment&&e.appointment.confirmed_by_patient}),_.includes(confirmed,!0)&&(e.showConfirmed=!0));for(var i=0;i<e.logs.length;i++)e.logs[i].reminder=a(e.logs[i]);return t.total(resp.$response.data.count),e.logs})}}),reloadTable=function(){e.tableParams.page(1),e.tableParams.reload()},e.$watch("search_params",function(e,t){e!=t&&reloadTable()},!0),e.$watch("search_by_date",function(e,t){e!=t&&reloadTable()},!0)},e.toggleDateFilter=function(t){n.toggleFilter(e,t)},e.campaign&&mainAction()}]),App.controller("campaignTemplatePerformanceApptRemindersCtrl",["$scope","$stateParams","$filter","$rootScope","ReminderResponse","Perm","$api","responseHelper","datesInTimezone",function(e,t,n,a,i,o,s,r,l){e.reminder_responses_loading=!0,e.providers_aligned_left=!0,e.load_reminder_docs=function(){var t=o.friends({ids:!0,no_self:!0});e.providers=t.result,e.providers=_.sortBy(e.providers,function(e){return e.display_name||e.name}),e.providers_ids=t.ids},e.load_reminder_responses=function(){e.reminder_responses_loading=!0,e.reminder_responses_error_500=!1,e.reset_params(),search_params={date:e.reminder_responses_date_formatted},e.dashboard?search_params=_.merge(search_params,{"location_id[]":a.location.id}):search_params=_.merge(search_params,{location_id:a.location.id}),e.reminder_resp=i.$search(search_params),e.reminder_resp.$finally(function(){500==e.reminder_resp.$response.status&&(e.reminder_responses_loading=!1,e.reminder_responses_error_500=!0),e.reminder_resp.$response.data.code?(e.errors=null,res=e.reminder_resp.$response.data.data,_.each(res,function(t){e.handleReminderResponseText(t),e.dashboard&&(setInitialCampaignsOptout(t),setCampaignsSending(t))}),e.reminder_responses_initial=res,e.reminder_responses=res,e.reminder_responses_size=_.filter(res,function(e){return"pending"!=e.reminder_response_status}).length,e.dashboard||(e.$watch("providers",function(t,n){e.filterProviderIds()},!0),e.$watch("reminder_responses_statuses",function(t,n){e.filterStatusesIds()},!0))):(e.reminder_responses=[],e.reminder_resp.$response.error&&e.reminder_resp.$response.error[0]?e.errors=e.reminder_resp.$response.error:e.errors=e.reminder_resp.$response.data.error),e.reminder_responses_loading=!1})},e.countByStatus=function(t){if(e.reminder_responses)return _.filter(e.reminder_responses,function(e){return e.reminder_response_status===t}).length},e.handleReminderResponseText=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.reminder_response_text&&(t?(e.reminder_response_text_cutted=e.reminder_response_text.substring(0,50),e.reminder_response_text.length>50?e.reminder_response_show_more_link=!0:e.reminder_response_show_more_link=!1,e.reminder_response_show_less_link=!1):(e.reminder_response_text_cutted=e.reminder_response_text,e.reminder_response_text.length>50?e.reminder_response_show_less_link=!0:e.reminder_response_show_less_link=!1,e.reminder_response_show_more_link=!1))},e.reset_params=function(){e.reminder_responses_statuses=[{name:"pending",label:"Pending",isChecked:!0},{name:"cancelled",label:"Cancelled",isChecked:!0},{name:"confirmed_via_nexhealth",label:"Confirmed Via NexHealth",isChecked:!0},{name:"confirmed_via_office",label:"Confirmed Via Office",isChecked:!0},{name:"custom_response",label:"Custom Response",isChecked:!0},{name:"no_response",label:"No response",isChecked:!0}],e.dashboard||(e.check_providers("all"),e.statuses=_.map(e.reminder_responses_statuses,function(e){return e.name}))},e.filterProviderIds=function(){e.providers_ids=_.map(_.filter(e.providers,"isChecked"),function(e){return e.id}),c()},e.filterStatusesIds=function(){e.statuses=_.map(_.filter(e.reminder_responses_statuses,"isChecked"),function(e){return e.name}),c()};var c=function(){e.reminder_responses_initial&&(filtered_reminder_responses=_.filter(e.reminder_responses_initial,function(t){return items_by_provider=_.filter(e.providers_ids,function(e){return e===t.provider.id}),items_by_status=_.filter(e.statuses,function(e){return e===t.reminder_response_status}),items_by_provider.length>0&&items_by_status.length>0}),e.reminder_responses=filtered_reminder_responses)};e.check_providers=function(t){"all"==t?_.each(e.providers,function(e){return e.isChecked=!0}):"none"==t&&_.each(e.providers,function(e){return e.isChecked=null}),e.filterProviderIds()},e.check_statuses=function(t){"all"==t?_.each(e.reminder_responses_statuses,function(e){return e.isChecked=!0}):"none"==t&&_.each(e.reminder_responses_statuses,function(e){return e.isChecked=null})},e.reportDateUpdate=function(t){reminder_responses_date=l.convertFromUserToLocTimezone(t,!1),e.reminder_responses_date=reminder_responses_date.toISOString(),e.reminder_responses_date_with_tz=reminder_responses_date.format(),e.reminder_responses_date_formatted=reminder_responses_date.format("L"),e.reminder_responses_offset=reminder_responses_date.format("Z")},e.reminder_resp_campaigns_optout_saving={},e.reminder_resp_campaigns_sending={},setInitialCampaignsOptout=function(e){e.initial_campaigns_optout=angular.copy(e.campaigns_optout)},setCampaignsSending=function(e){e.campaigns_sending=_.map(e.campaigns_optout,function(e){return{id:e.id,name:e.name.replace(/s$/,"")}})},e.campaignsSendingPopupToggle=function(e,t){t.preventDefault(),t.stopPropagation(),e.campaigns_sending_dropdown_shown=!e.campaigns_sending_dropdown_shown},e.campaignsOptoutPopupToggle=function(t,n){n.preventDefault(),n.stopPropagation(),t.campaigns_optout_dropdown_shown=!t.campaigns_optout_dropdown_shown,t.campaigns_optout_dropdown_shown||e.reminder_resp_campaigns_optout_saving[""+t.id]||resetReminderRespCampaignsOptout(t)},e.sendReminderRespCampaign=function(t,n){e.reminder_resp_campaigns_sending[""+t.id]=!0,s("POST","/campaigns/"+n.id+"/send_campaign",{appt_id:t.id}).then(function(n){e.reminder_resp_campaigns_sending[""+t.id]=!1,n.$response=n,r.redirectOrToastOnResp(n,void 0,void 0,{},!1,{},1e4)})},e.saveReminderRespCampaignsOptout=function(t){e.reminder_resp_campaigns_optout_saving[""+t.id]=!0,t.campaigns_optout_dropdown_shown=!1,checked_campaigns_optout=e.checkedReminderRespCampaignsOptout(t),checked_campaigns_optout_ids=_.map(checked_campaigns_optout,"id"),checked_campaigns_optout_ids.length||(checked_campaigns_optout_ids=[""]),s("PUT","/reminder_responses/"+t.id,{reminder_response:{campaigns_optout_ids:checked_campaigns_optout_ids}}).then(function(n){e.reminder_resp_campaigns_optout_saving[""+t.id]=!1,n.data.code?setInitialCampaignsOptout(t):(resetReminderRespCampaignsOptout(t),t.campaigns_optout_dropdown_shown=!0),n.$response=n,r.redirectOrToastOnResp(n)})},resetReminderRespCampaignsOptout=function(e){e.campaigns_optout=angular.copy(e.initial_campaigns_optout)},e.checkedReminderRespCampaignsOptout=function(e){return _.filter(e.campaigns_optout,function(e){return e.is_optout})},o.perm_promise.then(function(){reminder_responses_date=t.date||moment().tz(a.timezone).format("MM/DD/YYYY"),e.reportDateUpdate(reminder_responses_date),e.dashboard||e.load_reminder_docs(),e.$watch("reminder_responses_date",function(t,n){e.load_reminder_responses()},!0)}),e.$on("loc_change",function(){e.dashboard&&(e.load_reminder_docs(),e.$watch("reminder_responses_date",function(t,n){e.load_reminder_responses()},!0))})}]),App.controller("campaignTemplatePerformanceSurveysCtrl",["Perm","$rootScope","$scope","$stateParams","NgTableParams","SurveySubmissions","filterByDate",function(e,t,n,a,i,o,s){loading=function(){n.loading=!0,t.$broadcast("refreshCampaignNpsScore",null)},loading(),n.providers_watch_inited=!1,n.providers_ids=[],n.date_filter_wording="FILTER BY DATE",e.perm_promise.then(function(){n.loaddocs=function(){n.providers=e.friends({no_self:!0}).result,n.providers=_.sortBy(n.providers,function(e){return e.display_name||e.name}),n.check_providers("none")},n.$watch("providers",function(e,t){n.providers_watch_inited?(filterProviderIds(),n.tableParams.page(1),n.tableParams.reload()):n.providers_watch_inited=!0},!0),filterProviderIds=function(){n.providers_ids=_.map(_.filter(n.providers,"isChecked"),function(e){return e.id})},n.check_providers=function(e){"all"==e?_.each(n.providers,function(e){return e.isChecked=!0}):"none"==e&&_.each(n.providers,function(e){return e.isChecked=null}),filterProviderIds()},n.tableParams=new i({},{getData:function(e){return loading(),search_opts={page:e.page(),per_page:e.count(),location_id:t.location.id},n.providers_ids.length&&(search_opts["provider_ids[]"]=n.providers_ids),n.created_at_start&&n.created_at_end&&(search_opts.created_at_start=n.created_at_start.toISOString(),search_opts.created_at_end=n.created_at_end.toISOString()),resp=o.$search(search_opts),resp.$promise.then(function(i){return n.surveys=resp.$response.data.data,t.institution.is_surveys_nps&&(_.isEmpty(resp.$response.data.description)?n.nps_score=null:n.nps_score=resp.$response.data.description,t.$broadcast("refreshCampaignNpsScore",n.nps_score)),n.loading=!1,resp.$response.data.count&&e.total(resp.$response.data.count),n.load_daterange_filter_init=!0,a.survey_id&&n.viewSurvey({id:a.survey_id}),n.surveys})}}),n.loaddocs(),s.initDateRangePicker(n)})}]),App.controller("campaignTemplatePerformanceCtrl",["$controller","$scope",function(e,t){mainAction=function(){"reminder"==t.campaign.campaign_type?e("campaignTemplatePerformanceApptRemindersCtrl",{$scope:t}):"survey"==t.campaign.campaign_type&&e("campaignTemplatePerformanceSurveysCtrl",{$scope:t})},t.campaign&&mainAction()}]),App.controller("campaignTemplateCtrl",["$controller","$scope","$state","$stateParams","Perm",function(e,t,n,a,i){i.perm_promise.then(function(){t.redirectUnlessCanAccessTab("templates")}),t.loadingCampaign=!0,e("campaignCtrl",{$scope:t}),e("campaignCustomTemplatesCtrl",{$scope:t}),t.$on("campaignControllerLoaded",function(e,n){!t.campaign&&t.$parent&&t.$parent.campaign&&(t.campaign=t.$parent.campaign),mainAction()}),t.$on("refreshCampaignNpsScore",function(e,n){t.nps_score=n}),"app.campaign_template"===n.current.name&&n.go("app.campaign_template.actions",a),t.showSelectedProcedureCodes=function(e){t.showProcedureCodes(e,!1)}}]),App.controller("campaignsTemplatesHeaderCtrl",["$scope","$rootScope","$state","Perm",function(e,t,n,a){setTemplatesShowCustomTab=function(){e.show_custom_tab=t.location&&t.location.privileges&&t.location.privileges.is_continuing_care_enabled},t.$on("setTemplatesShowCustomTab",function(){setTemplatesShowCustomTab()}),a.perm_promise.then(function(){e.redirectUnlessCanAccessTab("templates"),setTemplatesShowCustomTab(),"app.campaigns_templates"==n.current.name&&n.go("app.campaigns_templates.default")})}]),App.controller("campaignsCtrl",["$scope","$state","$stateParams","$rootScope","Campaign","Perm","ngDialog","$ocLazyLoad","APP_REQUIRES","$api","responseHelper","CampaignSmsMsgsCount",function(e,t,n,a,i,o,s,r,l,c,p,d){e.loading=!0,e.is_custom=n.is_custom,e.is_manual=n.is_manual,e.filters=["all","sent","draft","archived","reuse"],e.current_filter=n.current_filter||e.filters[0],e.load_campaigns=function(){e.loading=!0,e.is_manual?e.campaign_type_param={manuals:!0}:e.is_custom?e.campaign_type_param={"campaign_type[]":["continuing_care_recall","post_procedure_followup"]}:e.campaign_type_param={templates:!0},e.campaigns=i.$search(_.merge({location_id:a.location.id},e.campaign_type_param)),e.campaigns.$finally(function(){c("GET","/campaigns/campaigns_index_stats",{location_id:a.location.id}).then(function(t){_.each(e.campaigns,function(e){e.sent_stat={},_.each(t.data.data,function(t){t.id===e.id&&(e.sent_stat.clicked=t.clicked,e.sent_stat.bounced=t.bounced,e.sent_stat.opened=t.opened,e.sent_stat.open_rate_percentage=(t.opened/e.sent_count*100).toFixed(0))})}),setSentStat(),e.loading=!1,setManualCampaignsFilters()})})},
loadCampaignResponsedCount=function(){d.get({location_id:a.location.id}).then(function(t){e.responsedCount=t.data.data.count},function(e){})},setSentStat=function(){e.sent_stat={},e.sent_stat.total_sent=_.sum(_.map(e.campaigns,function(e){return e.sent_count})),e.sent_stat.opened=_.sum(_.map(e.campaigns,function(e){return e.sent_stat&&e.sent_stat.opened})),e.sent_stat.total_sent>0?e.sent_stat.open_rate_percentage=Math.round(100*e.sent_stat.opened/e.sent_stat.total_sent):e.sent_stat.open_rate_percentage=0,e.sent_stat.clicked=_.sum(_.map(e.campaigns,function(e){return e.sent_stat&&e.sent_stat.clicked})),e.sent_stat.bounced=_.sum(_.map(e.campaigns,function(e){return e.sent_stat&&e.sent_stat.bounced}))},setManualCampaignsFilters=function(){e.is_manual&&(e.campaigns_filtered_by_type=e.campaigns_by_type(e.current_filter),setFilteredCounts())},setFilteredCounts=function(){e.campaigns.filtered_count={},_.each(e.filters,function(t){e.campaigns.filtered_count[t]=e.campaigns_by_type(t).length})},e.$watch("campaigns.search_by_name",function(e){filterByName(e)}),filterByName=function(t){if(!e.campaigns)return!0;e.is_manual&&t?_.each(e.filters,function(n){base_rel=e.campaigns_by_type(n),filtered_by_name=searchByName(base_rel,t),n==e.current_filter&&(e.campaigns_filtered_by_name=filtered_by_name),e.campaigns.filtered_count[n]=filtered_by_name.length}):e.is_custom&&t?e.campaigns_filtered_by_name=searchByName(e.campaigns,t):(e.campaigns_filtered_by_name=null,setFilteredCounts())},searchByName=function(e,t){return _.filter(e,function(e){return e.campaign_layout.name&&e.campaign_layout.name.toLowerCase().match(t.toLowerCase())})},e.openCampaignsStatPopup=function(t,n){e.marginTop=$(t.currentTarget)[0].getBoundingClientRect().top,e.stat_type=n,e.campaignsStatDialog&&e.campaignsStatDialog.close(),e.campaignsStatDialog=s.open({template:"/app/views/campaigns/modal/stat.html",className:"ne__modal ne__modal--stat",controller:"campaignsStatCtrl",data:{campaign_type_param:e.campaign_type_param,stat_type:e.stat_type,open_rate_percentage:e.sent_stat.open_rate_percentage}}),e.campaignsStatDialog.closePromise.then(function(t){e.stat_type=null})},e.$on("ngDialog.opened",function(){e.campaignsStatDialog&&(content=$("#"+e.campaignsStatDialog.id+" .ngdialog-content")[0],content&&(content.style.top=e.marginTop+"px"))}),e.add_campaign=function(){dependencies=_.find(l.modules,function(e){return"angularFileUpload"===e.name}),r.load(dependencies.files[0]).then(function(){s.open({template:"/app/views/campaigns/campaign_manual/modal/new.html",className:"ne__modal ne__modal--manual",data:{parent_controller:"campaignManualCtrl"},controller:"campaignManualFiltersCtrl"})})},e.add_custom_template=function(){e.campaignCustomDialog=s.open({template:"/app/views/campaigns/campaign_custom/modal/new.html",className:"ne__modal ne__modal--manual ne__modal--custom",controller:"campaignCustomTemplatesCtrl",scope:e})},e.archive_campaign=function(t){if(!e.is_manual)return!1;var n=a.confirm_modal({title:"Archive campaign",text:"Are you sure you want to archive this campaign? You can always find it in your archive folder.",custom_confirm:"Archive Campaign"});stopArchiving=function(t){t=new Object({$response:t}),e.archiving=!1,p.redirectOrToastOnResp(t)},n.closePromise.then(function(n){1==n.value&&(e.archiving=!0,c("DELETE","/campaigns/"+t.id).then(function(n){n.data.code&&(t.is_archived=!0,e.campaigns_filtered_by_type=e.campaigns_by_type(e.current_filter),setFilteredCounts()),stopArchiving(n)},function(){stopArchiving(response)}))})},e.campaigns_by_type=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];switch(base_rel=e.campaigns.filter(function(e){return!e.is_archived}),t){case"sent":res=base_rel.filter(function(e){return!e.campaign_layout.is_reused&&e.is_activated&&e.last_sent_at});break;case"scheduled":res=base_rel.filter(function(e){return!e.campaign_layout.is_reused&&e.is_activated&&!e.last_sent_at&&e.campaign_setting&&e.campaign_setting.scheduled_at});break;case"draft":res=base_rel.filter(function(e){return!e.campaign_layout.is_reused&&!e.is_activated});break;case"archived":res=e.campaigns.filter(function(e){return e.is_archived});break;case"reuse":res=base_rel.filter(function(e){return e.campaign_layout.is_reused});break;default:res=base_rel}return res},e.filter_campaigns=function(t,n){if(!e.is_manual)return[];e.current_filter=n,element=$(t.currentTarget),element.addClass("active"),other_filters=element.siblings(),_.each(other_filters,function(e){$(e).removeClass("active")}),e.campaigns_filtered_by_type=e.campaigns_by_type(n),setFilteredCounts(),filterByName(e.campaigns.search_by_name)},checkPrivileges=function(){return e.is_manual?e.redirectUnlessCanAccessTab("campaigns"):e.redirectUnlessCanAccessTab("templates"),!(e.is_custom&&!e.show_custom_tab)||(t.go("app.campaigns_templates.default"),!1)},o.perm_promise.then(function(){checkPrivileges()&&(n.location_id&&n.location_id!=a.location.id&&(passed_location=_.find(a.locations,function(e){return e.id==n.location_id}),a.set_main_location(passed_location)),e.load_campaigns()),e.$on("loc_change",function(){a.$broadcast("setTemplatesShowCustomTab"),checkPrivileges()&&e.load_campaigns()})})}]),App.controller("campaignsStatCtrl",["$rootScope","$scope","$api","fileResponse",function(e,t,n,a){t.ngDialogData.campaign_type_param?t.additional_opts=t.ngDialogData.campaign_type_param:t.ngDialogData.campaigns_ids&&(t.additional_opts={campaigns_ids:t.ngDialogData.campaigns_ids}),t.open_rate_percentage=t.ngDialogData.open_rate_percentage,t.stat_type=t.ngDialogData.stat_type,t.search_params={},resetSearch=function(){t.patients=[],t.search_params.page=0,t.search_params.per_page=100,t.search_params.hit_end=!1,t.search_params.search_keyword=null},t.loadStats=function(){var i=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],o=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("text_responded"==t.stat_type)return t.fetchSmsMsgs(i,o);o?t.exporting=!0:t.loading=!0,opts={location_id:e.location.id},o||(opts=_.merge(opts,{page:t.search_params.page,per_page:t.search_params.per_page})),t.additional_opts&&(opts=_.merge(opts,t.additional_opts)),t.search_params.search_keyword&&(opts=_.merge(opts,{search_keyword:t.search_params.search_keyword})),t.stat_type&&"total_sent"!==t.stat_type&&(opts=_.merge(opts,{stat_type:t.stat_type})),api_path="/campaigns/campaigns_stat",o&&(api_path+=".csv"),n("GET",api_path,opts).then(function(e){o?(t.exporting=!1,a.download(e,"campaigns_statistic.csv")):(t.loading=!1,i&&$("input#search_campaigns_stat").blur(),e.data.data.length>0?t.patients=t.patients.concat(e.data.data):t.search_params.hit_end=!0)})},t.fetchSmsMsgs=function(){var i=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],o=arguments.length>1&&void 0!==arguments[1]&&arguments[1];o?t.exporting=!0:t.loading=!0,opts={location_id:e.location.id},o||(opts=_.merge(opts,{page:t.search_params.page,per_page:t.search_params.per_page})),t.search_params.search_keyword&&(opts=_.merge(opts,{search_keyword:t.search_params.search_keyword})),t.additional_opts&&(opts=_.merge(opts,t.additional_opts)),api_path=o?"/campaigns/sms_msgs.csv":"/campaigns/sms_msgs",n("GET",api_path,opts).then(function(e){o?(t.exporting=!1,a.download(e,"campaigns_statistic.csv")):(t.loading=!1,i&&$("input#search_campaigns_stat").blur(),e.data.data.length>0?t.patients=t.patients.concat(e.data.data):t.search_params.hit_end=!0)})},t.load_more_patients=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(t.loading||t.search_params.hit_end)return!1;t.search_params.page++,t.loadStats(e)},t.$watch("search_params.name",function(e,n){e!=n&&(resetSearch(),e&&e.length>2?(t.search_params.page++,t.search_params.search_keyword=e,t.loadStats(!1)):t.load_more_patients(!1))},!0),resetSearch(),t.load_more_patients()}]),App.controller("chargePatientCtrl",["Perm","$scope","$rootScope","$api","responseHelper","Payment","PaymentMethod","$timeout","SweetAlert","APP_COLORS",function(e,t,n,a,i,o,s,r,l,c){t.loadPayments=function(){t.loading=!0;var e=o.$search({location_id:t.payment.location_id,appointment_id:t.payment.appointment_id});return e.$finally(function(n){e.$response.data.code&&(t.payments=e.$response.data.data),t.loadPaymentMethods()})},t.loadPaymentMethods=function(){t.loading=!0;var e=s.$search({id:t.payment.patient_id});return e.$finally(function(n){e.$response.data.code&&e.$response.data.data&&e.$response.data.data.length?(t.payment_methods=e.$response.data.data,default_payment_method=t.payment_methods.filter(function(e){return e.is_default})[0],default_payment_method?t.choosePaymentMethod(default_payment_method):t.choosePaymentMethod(t.payment_methods[0])):t.payment_errors=e.$response.data.error,t.loading=!1})},t.choosePaymentMethod=function(e){t.braintree_payment_method_id=e.id,_.each(t.payment_methods,function(t){t.id==e.id?t.is_active=!0:t.is_active=!1})},t.chargePatient=function(){l.swal({title:"Are you sure you want to charge $"+t.payment.amount+"?",text:"The patient will be emailed a receipt.",showCancelButton:!0,showConfirmButton:!0,confirmButtonColor:c.primary,confirmButtonText:"Yes, charge",cancelButtonText:"Cancel",closeOnConfirm:!0,closeOnCancel:!0},function(e){e&&chargePatientAction()})},chargePatientAction=function(){t.payment_charging=!0,t.payment.paid_via_online_booking=!0,t.payment.braintree_payment_method_id=t.braintree_payment_method_id,t.payment.$save().$finally(function(){t.payment.$response.data.code&&t.payment.$response.data.data?(t.payment_errors=[],t.appointment?(i.redirectOrToastOnResp(t.payment),t.payments.unshift(t.payment.$response.data.data),r(function(){t.initPayment(),t.payment_charging=!1},10)):t.patient&&(i.redirectOrToastOnResp(t.payment,"app.patient.payments",null,{id:t.patient.id},!0),t.closeThisDialog())):(t.payment_errors=t.payment.$response.data.error,t.payment_charging=!1)})},t.apptDateUpdate=function(e){t.payment.appointment_date=moment(e).format("YYYY-MM-DD")},t.initPayment=function(){t.payment=o.$new(),t.payment.location_id=n.location.id,t.appointment?(t.payment.appointment_date=t.appointment.start_time,t.payment.appointment_id=t.appointment.id,t.payment.patient_id=t.appointment.patient_id):t.patient&&(t.payment.patient_id=t.patient.id),t.payment_errors=[]},t.ngDialogData&&(t.appointment=t.ngDialogData.appointment,t.patient=t.ngDialogData.patient,t.hide_appt_fields=t.ngDialogData.hide_appt_fields),t.initPayment(),t.appointment?(t.payments=[],t.loadPayments()):t.patient&&t.loadPaymentMethods()}]),App.controller("chromeExtensionModalCtrl",["$rootScope","$scope","responseHelper","$api","DENTICON_CHROME_EXTENSION_URL",function(e,t,n,a,i){e.locations.some(function(e){return e.foreign_id_type.includes("denticon")})&&(t.chromeExtensionURL=i)}]),App.controller("composeCtrl",["$scope","$api","$rootScope","responseHelper","Conversation","Patient","$state","$http","SERVER_BASE_URL","authService","Perm",function(e,t,n,a,i,o,s,r,l,c,p){e.result={};c.getUserSubdomain(),c.getAuth();e.loaddocs=function(){var t=p.friends({ids:!0});e.doctors=t.result,e.doctorIds=t.ids},e.$on("loc_change",function(){e.loaddocs()}),p.perm_promise.then(function(){e.loaddocs()}),e.searchPatients=function(n){return t("GET","/patient_searches",{name:n,provider_ids:e.doctorIds}).then(function(e){return e.data.data.map(function(e){return e})})},e.didClickOnSend=function(t,o){var s={recipients:{location_id:n.location.id,id:[t.id]},message:{body:o},attachments:{video:null,image:null}},r=i.$create(s);r.$then(function(){a.redirectOrToastOnResp(r,"app.messages")&&e.closeThisDialog()})}}]),App.controller("confirmCtrl",["$scope",function(e){e.title=e.ngDialogData.title,e.text=e.ngDialogData.text,e.subhead=e.ngDialogData.subhead,e.custom_confirm=e.ngDialogData.custom_confirm,e.custom_cancel=e.ngDialogData.custom_cancel}]),App.controller("contactAlertCtrl",["$scope",function(e){e.phone=e.ngDialogData.phone,e.email=e.ngDialogData.email,e.subhead=e.ngDialogData.subhead,e.custom_confirm=e.ngDialogData.custom_confirm,e.custom_cancel=e.ngDialogData.custom_cancel}]),App.controller("contactCtrl",["$scope","$rootScope","$document","SweetAlert","Contact","$state",function(e,t,n,a,i,o){t.$on("$stateChangeSuccess",function(){n[0].body.scrollTop=n[0].documentElement.scrollTop=0}),e.didClickOnSend=function(t){if(e.laddaLoading=!0,console.log(t),t.$valid){var n={message:t.message.$viewValue,email:t.email.$viewValue,name:t.name.$viewValue},s=i.$create(n);s.$then(function(t){s.$response.data.code?(e.laddaLoading=!1,a.swal({title:"Message sent!",text:"You should expect a reply within a couple of hours.",type:"success",confirmButtonColor:"#DCDEDF"},function(){o.go("home.home")})):(e.laddaLoading=!1,s.$response.data.error.forEach(function(e){a.swal({title:"Errors",text:e,type:"warning",confirmButtonColor:"#DCDEDF"})}))})}else e.laddaLoading=!1,alert("Please complete all fields!")}}]),App.controller("conversationCtrl",["$scope","$controller","$interval","$rootScope","authService","responseHelper","$stateParams","Conversation","Message","$state","USER_TYPES","FileUploader","SERVER_BASE_URL","toaster","ngDialog","$filter","$timeout","Perm",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,g,f,h,v){s.show_conversations_list&&(e.is_messages_page=!0,t("patientCtrl",{$scope:e})),e.disableSendButton=!0,e.loading=!0,e.uploading=!1,e.noMessages=!1,e.hasDocuments=!1,e.messages=[],e.conversation_id=null,e.patient_id=s.id,e.clear_unread_messages_count=s.clear_unread_messages_count,e.msggcnt=0,e.messageForm={message:"",isFocused:!1,attachment:null},e.hasDocuments=null,e.$watch("messageForm.message",function(t,n){void 0===t||""===t||null===t?e.disableSendButton=!0:(e.disableSendButton=!1,e.messageForm.message=e.messageForm.message&&e.messageForm.message.length?e.messageForm.message:null!==e.messageForm.attachment?'Sent an attachment: "'+e.messageForm.attachment.name+'"':"")}),e.$watch("messageForm.attachment",function(t,n){null===t||void 0===t?(e.fileAdded=!1,e.disableSendButton=!0):(e.fileAdded=!0,e.disableSendButton=!1,e.messageForm.message=e.messageForm.message&&e.messageForm.message.length?e.messageForm.message:null!==e.messageForm.attachment?'Sent an attachment: "'+e.messageForm.attachment.name+'"':"",e.uploader.queue[0].formData=[apiParams(!0)])}),v.perm_promise.then(function(){e.is_messages_page||e.redirectUnlessCanAccessTab("messages",!1,!0),setUploader(),e.fetchMsgs(),e.$on("loc_change",function(){e.mymsgg={msgs:[]},e.msggroups=[e.mymsgg],e.fetchMsgs()})}),e.groupDocuments=function(t){var n=e.documents||[];angular.forEach(t,function(e){e.attachment_url&&e.attachment_url.length&&pushAttachmentToDocuments(e,n)}),e.documents=sortDocuments(n),e.documents.length>0&&(e.hasDocuments=!0)},pushAttachmentToDocuments=function(e,t){file_name=e.attachment_file_name,doc={file_name:file_name,url:e.attachment_url,body:e.body,updated_at:e.attachment_updated_at,id:e.id},file_name.match(/.(pdf)$/i)?doc.is_pdf=!0:file_name.match(/.(jpg|jpeg|png|gif)$/i)&&(doc.is_image=!0),t.push(doc)},sortDocuments=function(e){return e.sort(function(e,t){var n=new Date(e.updated_at).getTime();return new Date(t.updated_at).getTime()-n}),e},e.categorize_msg=function(t){if(msgs_ids=_.flatten(_.map(e.msggroups,function(e){return _.map(e.msgs,"id")})),existing_msg=_.filter(msgs_ids,function(e){return e==t.id}),!existing_msg.length){if(e.mymsgg.length>0)var n=e.mymsgg.msgs[e.mymsgg.msgs.length-1];var a=!1;if(void 0!==n){a=moment(t.created_at)-moment(n.created_at)>12e5}var i=e.mymsgg.user_id!=t.user_id;if(i||a){void 0!==e.mymsgg.user_id&&e.msggroups.length>0&&e.msggroups.splice(e.msggroups.length-1,0,angular.copy(e.mymsgg));for(var o in e.mymsgg)delete e.mymsgg[o];if(e.mymsgg.user_id=t.user_id,e.mymsgg.msgs=[],void 0!==e.conversation_req)var s=_.find(e.conversation_req.conversation_participants,function(e){return e.id==t.user_id});void 0!==s?(e.mymsgg.usrchng=i,e.mymsgg.profile_url=s.profile_url,e.mymsgg.name=s.first_name+" "+s.last_name,e.mymsgg.meta_type=s.meta_type):(e.mymsgg.usrchng=i,t.sender_info&&(e.mymsgg.profile_url=t.sender_info.image,e.mymsgg.meta_type=t.sender_info.meta_type,e.mymsgg.name=t.sender_info.name))}e.mymsgg.msgs.push(t)}},e.mymsgg={msgs:[]},e.msggroups=[e.mymsgg],e.$on("refreshConversation",function(t,n){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];_.isObject(n)&&(n=n.id),callback=!i&&function(){a.$broadcast("refreshConversationsList",append_convos=!1,redirect_to_patient_convo=!1,show_loading=!1)},e.patient_id==n?e.fetchMsgs(do_not_redirect=!0,i=i,callback=callback):callback()}),e.fetchMsgs=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o={};if(void 0!==e.mymsgg&&void 0!==e.mymsgg.msgs&&e.mymsgg.msgs.length>0){var l=e.mymsgg.msgs[e.mymsgg.msgs.length-1];void 0!==l&&(o.since=l.created_at,o.exclude_id=l.id)}var c=void 0;o.patient_id=e.patient_id,n&&(o.expire_activities=!0),s.conversationId?(c=r.$find(s.conversationId,o),e.conversation_id=s.conversationId):(o.only_last=!0,o.location_id=a.location.id,c=r.$search(o)),loadingTimeout=h(function(){t||(e.loading=!0)},300),c.$then(function(){e.conversation_req=c.$response.data.data[0],void 0!==e.conversation_req?(e.conversation_id=e.conversation_req.id,e.first_unread_message_id||(e.first_unread_message_id=e.conversation_req.first_unread_message_id),e.conversation_req.messages_list&&e.conversation_req.messages_list.length>0&&(e.noMessages=!1,_.each(e.conversation_req.messages_list,function(t){e.categorize_msg(t)}))):e.noMessages=!0,h.cancel(loadingTimeout),e.loading=!1,e.clear_unread_messages_count&&!n&&(e.clearUnreadMessagesCount(e.conversation_id),e.clear_unread_messages_count=!1),resetUploader(),i&&i(),e.conversation_req&&e.groupDocuments(e.conversation_req.messages_list)})},e.getMsgGroupClass=function(t,n){var a=parseInt(i.getUserId())===t.user_id?"align-right":"align-left";return e.currentMsgGroupMetaType=t.meta_type,p.provider_types.indexOf(t.meta_type)>=0?"message-group doctor "+a:p.staff_types.indexOf(t.meta_type)>=0?"message-group staff "+a:"Patient"===t.meta_type?"message-group patient "+a:void 0},e.toggleInputFocus=function(t){e.messageForm.isFocused="focus"===t},apiParams=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return msg_params={body:e.messageForm.message,conversation_id:e.conversation_id},t&&(msg_params=JSON.stringify(msg_params)),params={message:msg_params},e.conversation_id||(recipients_params={location_id:a.location.id,id:[e.patient_id]},t&&(recipients_params=JSON.stringify(recipients_params)),params.recipients=recipients_params),params},e.updateMessageContent=function(){e.uploader.formData=[apiParams(!0)]},uploaderUrl=function(){return e.conversation_id?apiPath="messages":apiPath="conversations",m+"/"+apiPath+"?subdomain="+i.getUserSubdomain()},e.clearMessageForm=function(){e.messageForm={message:"",isFocused:!1,attachment:null}},onMessageSent=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;t&&t.data&&t.code?(e.noMessages=!1,redirect_to_patient_convo=!1,append_convos=!1,e.conversation_id?(show_loading=!1,unshift_convos=!1):(unshift_convos=!0,show_loading=!0,e.dont_confirm_leave=!0,t.data.conversation&&(e.conversation_id=t.data.conversation.id,redirect_to_patient_convo=e.patient_id),resetUploader()),$(".scrollcontainer")[0]&&($(".scrollcontainer")[0].scrollTop=0),a.$broadcast("refreshConversationsList",append_convos,redirect_to_patient_convo,show_loading,unshift_convos),t.data.message&&e.categorize_msg(t.data.message),e.clearMessageForm(),e.clearUnreadMessagesCount(e.conversation_id,hide_new_messages_block=!0),n&&n.$response&&n.$response.status&&422==n.$response.status&&o.redirectOrToastOnResp(n)):n?o.redirectOrToastOnResp(n):t.error.forEach(function(e,t){return u.pop("error","Error",e)})},setUploader=function(){e.uploader=new d({url:uploaderUrl(),headers:{Authorization:i.getUserAuthorization().auth},formData:[apiParams(!0)],removeAfterUpload:!0,autoUpload:!1}),e.uploader.onBeforeUploadItem=function(t){e.uploading=!0},e.uploader.onAfterAddingFile=function(t){t.file.type.startsWith("image")||"application/pdf"===t.file.type?e.messageForm.attachment=t.file:(e.invalidFormatModal(),e.clearMessageForm(),e.removeAttachment())},e.uploader.onSuccessItem=function(t,n,a,i){onMessageSent(n),n.data&&n.data.conversation&&e.groupDocuments(n.data.conversation.messages_list),e.uploading=!1},e.uploader.onErrorItem=function(t,n,a,i){onMessageSent(n),e.uploading=!1}},resetUploader=function(){e.updateMessageContent(),e.uploader.url=uploaderUrl()},e.$on("$stateChangeStart",function(t,n,a){!1===e.disableSendButton&&(e.dont_confirm_leave||confirm("You didn't send your message/attachment, are you sure you want to leave?")||t.preventDefault())}),e.sendMessage=function(t){if(!0===e.fileAdded)e.uploader.queue[0].upload();else{if(e.uploading=!0,e.conversation_id)var n=l.$create(apiParams());else var n=r.$create(apiParams());e.clearMessageForm(),n.$finally(function(){onMessageSent(n.$response.data,n),e.uploading=!1})}},e.clearUnreadMessagesCount=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.conversation_req&&e.conversation_req.unread_messages_count&&a.$broadcast("refreshConversation",e.patient_id,expire_activities=!0),n&&e.first_unread_message_id&&(e.first_unread_message_id=null),a.$broadcast("clearUnreadMessagesCount",t)},e.invalidFormatModal=function(){a.message_modal({title:"Invalid Format",msg:"Only JPG, PNG, GIF image formats, or PDF document format, are accepted."})},e.seeAllAttachments=function(){g.open({template:"app/views/modal/attachments-list.html",scope:e,appendClassName:"ne__modal ne__modal--attachments"})},e.copyMessage=function(t){e.messageForm.message=t},e.addTemplate=function(){g.open({template:"app/views/modal/add-template.html",scope:e,appendClassName:"ne__modal ne__modal--add-template",data:{title:"",message:""}})},e.editTemplate=function(t){g.open({template:"app/views/modal/edit-template.html",scope:e,data:{title:t.title,message:t.message},className:"ne__modal ne__modal--edit-template"})},e.saveTemplate=function(t,n){e.templates.push({title:t,message:n}),e.modal.close()},e.deleteTemplate=function(t){return function(t){g.openConfirm({controller:["$scope",function(e){e.template=e.ngDialogData.template}],template:"app/views/modal/confirm-delete-template.html",scope:e,data:{template:t},className:"ne__modal ne__modal--confirm"}).then(function(n){_.remove(e.templates,{title:t.title})},function(e){})}(t)},e.removeAttachment=function(){e.messageForm.attachment=null,e.messageForm.message="",e.uploader.queue=[]},e.filterDate=function(e){return f("date")(e,"short")}}]),App.controller("conversationListCtrl",["$scope","authService","$filter","$api","responseHelper","Conversation","Message","Perm","$state","ngDialog","$timeout","$rootScope",function(e,t,n,a,i,o,s,r,l,c,p,d){e.show={},e.perm_promised=!1,e.noMessages=!1,e.conversations=[],l.params&&l.params.id&&(e.patient_id=parseInt(l.params.id)),resetScopeSearch=function(){e.scope_search={page:0,per_page:15,hit_end:!1}},resetScopeSearch(),e.didClickOnOpenCompose=function(){c.open({template:"/app/views/modal/compose-message.html",controller:"composeCtrl",scope:e,className:"ne__modal"})},e.loadMoreConversations=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],a=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!e.perm_promised||e.conversations_req_in_progress||e.scope_search.hit_end)return!1;i&&(e.loading=!0),e.conversations_req_in_progress=!0,e.scope_search.page++;var r=o.$search({doctor_ids:!0,page:e.scope_search.page,per_page:e.scope_search.per_page,location_id:d.location.id});r.$promise.then(function(i){var o=r.$response.data;o.data.length?e.conversations=t?_.uniqBy(e.conversations.concat(o.data),"id"):s?_.uniqBy(o.data.concat(e.conversations),"id"):o.data:e.scope_search.hit_end=!0,e.conversations.length||(e.noMessages=!0),e.messagesWithPatients={},e.conversations.forEach(function(t,a,i){var o=t,s=_.last(t.messages_list),r="",l=void 0;t.conversation_participants.forEach(function(e,t,a){s&&s.user_id===e.id&&(r=n("titleize")(e.first_name+" "+e.last_name)),"Patient"===e.meta_type&&(l=e)}),l&&(o&&(l.conversation_id=o.id,l.unread_messages_count=o.unread_messages_count),s&&(l.last_message=s.body,l.time=s.created_at_with_tz,l.time_offset=s.timezone_offset),e.messagesWithPatients[a]=l)}),e.loading=!1,e.conversations_req_in_progress=!1,a&&(_.size(e.messagesWithPatients)?(e.patient_id?parseInt(a)>0&&(e.patient_id=parseInt(a)):e.patient_id=e.messagesWithPatients[0].id,l.go("app.messages.message",{id:e.patient_id})):l.go("app.messages"))})},e.goToPatientConvo=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.patient_id=t,l.go("app.messages.message",{id:t,clear_unread_messages_count:n})},d.$on("$stateChangeStart",function(t,n,a,i,o,s){"app.messages"===n.name&&(resetScopeSearch(),e.loadMoreConversations())}),r.perm_promise.then(function(){e.redirectUnlessCanAccessTab("messages"),e.perm_promised=!0,e.$on("loc_change",function(){resetScopeSearch(),e.conversations=[],e.patient_id=null,e.loadMoreConversations()}),e.$on("refreshConversationsList",function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4];resetScopeSearch(),e.loadMoreConversations(n,a,i,o)}),e.loadMoreConversations(),e.loading=!0,e.$on("onNewMessageReceive",function(e,t){"app.messages"==l.current.name?d.$broadcast("refreshConversationsList"):d.$broadcast("refreshConversation",t.id)}),e.$on("clearUnreadMessagesCount",function(t,n){n&&(convo=_.find(e.messagesWithPatients,function(e){return e.conversation_id==n}),convo&&(convo.unread_messages_count=0))})}),e.conversationIsActive=function(e){return l.includes("app.messages")&&l.params&&parseInt(l.params.id)==e},e.searchResult={},e.searchPatients=function(e){return a("GET","/patient_searches",{name:e,location_id:d.location.id}).then(function(e){return e.data.data.map(function(e){return e})})}}]),App.controller("CustomMsgsLocationCtrl",["$scope","authService","$state","responseHelper","$stateParams","$api","$rootScope","editableThemes","editableOptions","CustomMsg",function(e,t,n,a,i,o,s,r,l,c){l.theme="bs3",r.bs3.inputClass="input-sm",r.bs3.buttonsClass="btn-sm",r.bs3.submitTpl='<button type="submit" class="btn btn-success"><span class="fa fa-check"></span></button>',r.bs3.cancelTpl='<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span class="fa fa-times text-muted"></span></button>',e.allcmtypes=["cancellation","scheduling","rescheduling","no-show","confirmation","recall","reminder","invite-sms","invite-email"],e.allowedcmtypes=[],e.isCustomMsgsDirty=!1,e.setCustomMsgsDirty=function(){e.isCustomMsgsDirty=!0},e.resetCmsgForm=function(){e.cmsgform={cmtype:"",msg:"",active:!0}},e.resetCmsgForm(),e.getCustomMsgs=function(){var t=c.$search({by:"Location",messageable_id:s.location.id});t.$then(function(){var n=t.$response.data.data;console.log(n),e.cmsgs=n,e.updateAllowedCmTypes()})},e.updateAllowedCmTypes=function(){e.allowedcmtypes=_.difference(e.allcmtypes,_.map(e.cmsgs,function(e){return e.cmtype}))},e.disableCmsgForm=function(){return-1==e.allowedcmtypes.indexOf(e.cmsgform.cmtype)},e.getCustomMsgs(),e.updateCustomMsgs=function(){e.submitted=!0,o("POST","/update_custom_msgs",{cmsgs:e.cmsgs,messageable_type:"Location",messageable_id:s.location.id}).then(function(t,n){e.isCustomMsgsDirty=!1,a.redirectOrToastOnResp({$response:t},"app.settings")})},e.addCustomMsg=function(){e.cmsgs.push({cmtype:e.cmsgform.cmtype,msg:e.cmsgform.msg,active:e.cmsgform.active}),e.updateAllowedCmTypes(),e.resetCmsgForm(),e.setCustomMsgsDirty()},e.removeCustomMsg=function(t){var n=e.cmsgs.indexOf(t);e.setCustomMsgsDirty();var a=_.findIndex(e.cmsgs,"index",n);e.cmsgs.splice(a,1),e.updateAllowedCmTypes()}}]),App.controller("customFormCtrl",["$scope","CustomFormBuilder",function(e,t){e.fieldsBySection=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.currentTab(e),a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t.fieldsBySection(e,n,a)},e.dateFormat=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"YYYY-MM-DD";return t.dateFormat(e,n)},e.toggleBoolean=function(n,a){return t.toggleBoolean(e,n,a)},e.toggleOption=function(n,a){return t.toggleOption(e,n,a)},e.optionIsChecked=function(n,a){return t.optionIsChecked(e,n,a)},e.toggleFormPolicy=function(n,a){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t.toggleFormPolicy(e,n,a,i)},e.goToStep=function(n){var a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t.goToStep(e,n,a)}}]),App.controller("activitiesCtrl",["$controller","$rootScope","$scope","responseHelper","Timeline","Patient","Perm","Appointment","toaster","authService","$state","$stateParams","NgTableParams","$api","Campaign","angularChart","datesInTimezone","$sce","filterByDate",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,g,f,h,v,y){n.is_patient_tab=d.is_patient_tab,n.is_patient_tab||e("campaignTemplatePerformanceApptRemindersCtrl",{$scope:n}),n.dashboard=!0,n.load_init=!1,n.loading=!0,n.stats_loading=!0,n.show={},n.key="All",n.akey="all",n.search={key:n.key},defaultPaginationCount=15,paginationCounts=[],n.dateWithTz=function(e){return moment(e).tz(t.timezone).format()},n.dateTimezoneOffset=function(e){return moment(e).tz(t.timezone).format("Z")},n.reset_categories=function(){n.incoming_notifications={all:{title:"Activities to review",none:"No new activity"},appt_cancel:{title:"Appt. cancellations",none:"No new cancellations",is_filtered_by_appt_date:!0,mark:"red"},appt_request:{title:"Appt. requests",none:"No new appointment requests",is_filtered_by_appt_date:!0,mark:"red"},appt_update:{title:"Appt. reschedulings",none:"No new appointment reschedulings",is_filtered_by_appt_date:!0,mark:"red"},forms:{title:"Forms",none:"No new forms submissions",mark:"success"},msgs:{title:"Messages",none:"No new messages",mark:"info"},payments:{title:"Payments",none:"No new payments",mark:"yellow"},appt_confirmations:{title:"Reminder confirmations",none:"No new reminder confirmations",is_filtered_by_appt_date:!0,always_visible:!0,mark:"lavander"},reminder_responses:{title:"Reminder responses",none:"No new reminder responses",mark:"blue"},appt_survey:{title:"Reviews",none:"No new post-appointment review submissions",mark:"success"},appt_slots_waitlists:{title:"Waitlist",none:"No new filled appointment slots",mark:"orange"}},n.categories_visible={appt_request:{title:"Appointment"},payments:{title:"Payment"},msgs:{title:"Message"}},t.institution.has_form||t.location.has_form?n.categories_visible.forms={title:"Form"}:n.categories_visible.appt_survey={title:"Review"},n.is_patient_tab?(n.outgoing_notifications={reminder_notif:{title:"Reminders",none:"No reminders notifications sent yet",is_filtered_by_appt_date:!0,mark:"deeppink"},recall_notif:{title:"Recalls",none:"No recalls notifications sent yet",is_filtered_by_appt_date:!0,mark:"deeppink"},survey_notif:{title:"Reviews",none:"No new reviews",mark:"success"},birthday_notif:{title:"Birthday",none:"No birthday notifications sent yet",mark:"royalblue"},missed_recall_notif:{title:"Missed",none:"No missed notifications sent yet",is_filtered_by_appt_date:!0,mark:"crimson"},cancelled_recall_notif:{title:"Cancelled",none:"No cancelled notifications sent yet",is_filtered_by_appt_date:!0,mark:"crimson"},appointment_created_notif:{title:"NexHealth Appointment Requests",none:"No NexHealth appointment requests sent yet",is_filtered_by_appt_date:!0,mark:"red"},appointment_confirmed_notif:{title:"NexHealth Appointment Confirmations",
none:"No NexHealth appointment confirmations sent yet",is_filtered_by_appt_date:!0,mark:"red"},appointment_rescheduled_notif:{title:"NexHealth Appointment Reschedulings",none:"No NexHealth appointment reschedulings sent yet",is_filtered_by_appt_date:!0,mark:"red"},new_patient_notif:{title:"New Patient",none:"No new patient notifications sent yet",mark:"peru"},new_appointment_notif:{title:"New EHR Appointment",none:"No new EHR appointment notifications sent yet",is_filtered_by_appt_date:!0,mark:"chocolate"},continuing_care_recall_notif:{title:"Continuing Care Recalls",none:"No continuing care recalls sent yet",is_filtered_by_appt_date:!0,mark:"saddlebrown"},post_procedure_followup_notif:{title:"Post-op",none:"No post-op follow-up sent yet",is_filtered_by_appt_date:!0,mark:"brown"},payment_notif:{title:"Payments",none:"No new payments",mark:"yellow"},message_notif:{title:"Messages",none:"No new messages",mark:"info"},waitlist_notif:{title:"Waitlist",none:"No new waitlist",mark:"orange"}},_.each(n.outgoing_notifications,function(e){e.always_visible=!0}),n.incoming_notifications.appt_confirmations.always_visible=!1):(n.outgoing_notifications={},n.incoming_notifications.dismissed={title:"Dismissed notifications",none:"No new dismissed notifications",always_visible:!0}),n.patients_notifications=_.extend({},{all:n.incoming_notifications.all},n.outgoing_notifications),n.categories=_.mapValues(n.patients_notifications,function(e){return[]})},n.isKeyInOutgoingNotifications=function(e){return _.includes(_.keys(n.outgoing_notifications),e)},n.count={},n.act_translation={All:"all","Appointment Cancelled":"appt_cancel","Appointment Requested":"appt_request","Appointment Updated":"appt_update","Message Received":"msgs","Payment Received":"payments","Appointment Confirmed":"appt_confirmations","Reminder Response Received":"reminder_responses","Appointment Slots Waitlist Confirmed":"appt_slots_waitlists","Survey Submission Created":"appt_survey","Dismissed Notifications":"dismissed","Form Response Created":"forms","Reminder Sent":"reminder_notif","Recall Sent":"recall_notif",Review:"survey_notif","Birthday Sent":"birthday_notif","Missed Recall Sent":"missed_recall_notif","Cancelled Recall Sent":"cancelled_recall_notif","Appointment Requested Sent":"appointment_created_notif","Appointment Confirmed Sent":"appointment_confirmed_notif","Appointment Rescheduled Sent":"appointment_rescheduled_notif","New Patient Sent":"new_patient_notif","New Pms Appointment Sent":"new_appointment_notif","Continuing Care Recall Sent":"continuing_care_recall_notif","Post Procedure Sent":"post_procedure_followup_notif",Payment:"payment_notif",Message:"message_notif",Waitlist:"waitlist_notif"},n.act_translation_invert=_.invert(n.act_translation),n.isOutgoingActivity=function(e){return"Payment"==e.trackable_type&&("PaymentSent"==e.activity_type||"PaymentSuccessful"==e.activity_type)||"Message"==e.trackable_type&&"MessageSent"==e.activity_type||"AppointmentSlotsWaitlist"==e.trackable_type&&"AppointmentSlotsWaitlistSent"==e.activity_type||"PatientRecall"==e.trackable_type&&"ContinuingCareRecallSent"==e.activity_type||"Patient"==e.trackable_type&&-1!==["BirthdaySent","NewPatientSent","PostProcedureSent"].indexOf(e.activity_type)||"Appointment"==e.trackable_type&&-1!==["AppointmentRequestedSent","AppointmentConfirmedSent","AppointmentRescheduledSent","ReminderSent","RecallSent","MissedRecallSent","CancelledRecallSent","ReviewSent","NewPmsAppointmentSent"].indexOf(e.activity_type)},n.patientIsUnsubscribedFrom=function(e){return!(!n.patient||!e)&&(subscription_attr=e.split("_notif").shift(),subscription=_.find(n.patient.subscriptions,function(e){return e.subscription==subscription_attr}),!!subscription&&(!(!subscription.unsubscribe_emails&&!subscription.unsubscribe_sms)&&(communication_type="",subscription.unsubscribe_emails&&subscription.unsubscribe_sms?"message_notif"==n.akey?communication_type="s":communication_type=" messages":subscription.unsubscribe_emails?communication_type=" emails":subscription.unsubscribe_sms&&(communication_type=" SMS"),"Patient is unsubscribed from receiving "+n.key+communication_type)))},setGrowthChartConfig=function(){chartsOpts=f.setGrowthChartConfig(!0),n.growthChartColors=chartsOpts[0],n.growthChartOptions=chartsOpts[1]},getMaxSurveyScore=function(){return t.institution.is_surveys_nps?10:5},patientSatisfactionChartColors=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=!1,a=!1;return e||(e=getMaxSurveyScore()),t.institution.is_surveys_nps?e>=8.5?n=!0:e>=6.5&&e<8.5&&(a=!0):e>=3.5?n=!0:e>=2.5&&e<3.5&&(a=!0),res=n?["#70D486","#FFFFFF"]:a?["#FFC76A","#FFFFFF"]:["#FF596F","#FFFFFF"],res},setPatientSatisfactionChartConfig=function(){n.patientSatisfactionChartOptions={events:!1,tooltips:{enabled:!1},hover:{animationDuration:0},backgroundColor:"#FFFFFF",cutoutPercentage:90,fill:!0,datasetFill:!1,borderWidth:0,elements:{arc:{borderWidth:0}}}},setGrowthChartConfig(),setPatientSatisfactionChartConfig(),initStatDates=function(){n.current_last_days=!0,n.stat_date_start=moment().subtract(6,"d").startOf("day"),n.stat_date_end=moment().endOf("day"),converted_dates=h.convertToInstTimezone(n.stat_date_start,n.stat_date_end,!1),n.stat_date_start=converted_dates[0],n.stat_date_end=converted_dates[1]},loadStatistic=function(){n.stats_loading=!0,n.stats_error_500=!1,u("GET","/timelines/statistics",{from_date:n.stat_date_start.toISOString(),to_date:n.stat_date_end.toISOString(),location_id:n.search["location_id[]"]}).then(function(e){n.stats_loading=!1,stats=e.data.data,n.statistics=[{value:stats.appts_booked,class_name:"appts_booked",label:"Booked via NexHealth",analytics_mode:"appts_scheduled"},{value:stats.campaign_logs.reminder,class_name:"reminders",label:"Appointments reminded",analytics_mode:"reminders"},{value:stats.appts_confirmed,class_name:"appts_confirmed",label:"Appointments confirmed",analytics_mode:"confirmed_reminders"},{value:stats.campaign_logs.recall,class_name:"recalls",label:"Recalls",analytics_mode:"recall_emails"},{value:stats.campaign_logs.missed_recall,class_name:"missed_recalls",label:"No-show follow-ups",analytics_mode:"missed_recall_texts"},{value:stats.campaign_logs.cancelled_recall,class_name:"cancelled_recalls",label:"Cancellation follow-ups",analytics_mode:"cancelled_recall_texts"},{value:stats.patient_satisfaction,class_name:"patient_satisfaction",label:"Patient satisfaction",chart_color:patientSatisfactionChartColors(stats.patient_satisfaction),analytics_mode:"patient_satisfaction"},{value:stats.payments_sum,class_name:"payments",label:"Payments via NexHealth"}],n.patientSatisfactionChartPercentage=[stats.patient_satisfaction/getMaxSurveyScore(),(getMaxSurveyScore()-stats.patient_satisfaction)/getMaxSurveyScore()],n.patientGrowthDays=f.statLabels(_.map(stats.patients_count,function(e){return e.day})),n.patientGrowthByDay=[_.map(stats.patients_count,function(e){return e.count})],n.patientGrowthTotal=_.sum(n.patientGrowthByDay[0]),f.increaseMaxYValue(n.growthChartOptions,_.max(n.patientGrowthByDay[0]))},function(e,t){n.stats_error_500=500==e.status,n.stats_loading=!1})},n.addStatWeek=function(e){n.stat_date_start.add(e,"weeks").startOf("isoWeek"),n.stat_date_end=moment(n.stat_date_start).endOf("isoWeek"),n.current_last_days=!1,loadStatistic()},n.dismiss=function(e){confirmDismiss=t.confirm_modal({title:"Are you sure about dismissing this notification?",text:"(Once dismissed, use the Dismissed Notification filter to view it.)",custom_confirm:"Dismiss"}),confirmDismiss.closePromise.then(function(t){1==t.value&&u("POST","/timelines/"+e+"/dismiss",{}).then(function(e,t){e.data&&e.data.code&&reloadTable(!0)})})},n.goToAnalyticsMode=function(e){e&&p.go("app.analytics",{mode:e,"from-date":n.stat_date_start.format("YYYY-MM-DD"),"to-date":n.stat_date_end.format("YYYY-MM-DD")})},n.onReply=function(e,n,a){withoutPopupCallback=function(){goToPageWithLocationChange(a,"app.messages.message",{id:n})},t.activityProcessed(e,null,null,withoutPopupCallback)},n.switchpage=function(e){n.key=e,n.akey=n.act_translation[e],isKeyFilteredByApptDate()?n.search_by_date.sentdate_after||n.search_by_date.sentdate_before||(n.sentdate=!1):(n.apptdate=!0,y.toggleFilter(n,"apptdate")),reloadTable()},reloadTable=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0]?page=n.search.page||1:(n.loading=!0,page=1),n.tableParams.data={},n.tableParams.page(page||1),n.tableParams.reload()},n.toggleBundle=function(e){n.key==e?(n.key="All",n.akey="all"):(n.key=e,n.akey=n.act_translation[e]),reloadTable()},n.loaddocs=function(){var e=s.friends({perms:["get_notifs"],ids:!0,all_locations:n.is_inst_admin,location_id:n.search["location_id[]"]});n.doctors=e.result,_.each(n.doctors,function(e){e.isChecked=!0}),n.doctorIds=e.ids},n.filterdocids=function(){n.doctorIds=_.map(_.filter(n.doctors,function(e){return e.isChecked}),function(e){return e.id})},n.countChecked=function(e){for(var t=0,n=0;n<e.length;n++)e[n],!0===e[n].isChecked&&t++;return t},n.get_gender_pronoun=function(e){return e&&e.bio&&"Male"==e.bio.gender?"his":e&&e.bio&&"Female"==e.bio.gender?"her":"their"},setLocationAndDocs=function(){n.search["location_id[]"]=t.location.id},s.perm_promise.then(function(){if(n.is_inst_admin=s.is_inst_admin,setLocationAndDocs(),n.filterdocids(),n.search_by_date={},n.$on("loc_change",function(){setLocationAndDocs(),n.reset_categories(),reloadTable(),initStatDates(),n.is_patient_tab||loadStatistic()}),n.reset_categories(),n.search.provider_ids=!0,void 0!==d.id){var e=o.$find(d.id);e.$then(function(){n.patient=e.$response.data.data}),n.search.patient_id=d.id,n.show.timeline_type="patient"}else n.show.timeline_type="index";n.$watch("params",function(e,t){n.load_init&&(n.loading=!0,reloadTable())},!0),initStatDates(),n.is_patient_tab||loadStatistic(),n.tableParams=new m({count:defaultPaginationCount},{counts:paginationCounts,getData:function(e){n.search.page!=e.page()&&(n.loading=!0,n.search.page=e.page());var t=n.key;return n.search.key=t,n.search.per_page=e.count(),n.is_patient_tab&&(_.isEmpty(n.search_by_date)?delete n.search.search_by_date:n.search.search_by_date=n.search_by_date),resp=i.$search(n.search),resp.$promise.then(function(a){return n.now=(new Date).toISOString(),setCounts(resp,e,t),n.categories[n.act_translation[t]]=resp.$response.data.data,_.each(resp.$response.data.data,function(e){e.email_log&&e.email_log.body_html&&(e.email_log.body_html=v.trustAsHtml(e.email_log.body_html))}),n.load_init||(n.load_init=!0),n.loading=!1,resp.$response.data.data})}}),n.$watch("search_by_date",function(e,t){e!=t&&reloadTable()},!0)}),setCounts=function(e,t,a){e.$response&&e.$response.data&&e.$response.data.count&&t.total(e.$response.data.count),e.$response&&e.$response.data&&e.$response.data.description?counts=e.$response.data.description:counts={};for(var i in n.act_translation)n.count[n.act_translation[i]]=counts[i];n.is_patient_tab?(n.count.message_notif=(counts["Message Received"]||0)+(counts["Message Sent"]||0),n.count.waitlist_notif=(counts["Appointment Slots Waitlist Confirmed"]||0)+(counts["Appointment Slots Waitlist Sent"]||0),n.count.payment_notif=(counts["Payment Received"]||0)+(counts["Payment Sent"]||0)+(counts["Payment Successful"]||0),n.count.survey_notif=(counts["Survey Submission Created"]||0)+(counts["Review Sent"]||0),patient_counts=[],_.each(_.keys(n.incoming_notifications),function(e){e=n.act_translation_invert[e],patient_counts.push(counts[e])}),n.count.all=_.sum(patient_counts)):n.count.all=_.sum(_.values(counts)),_.sum(_.values(counts))?n.no_patients_notifications=!1:n.no_patients_notifications=!0,e.$response&&e.$response.data&&e.$response.data.count&&(n.count[n.act_translation[a]]=e.$response.data.count)},n.toggleDateFilter=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];n.hide_appointment_date&&y.toggleFilter(n,e),y.toggleFilter(n,e,t)},n.onOpenFilterByDate=function(){isKeyFilteredByApptDate()?n.hide_appointment_date=!1:(y.toggleFilter(n,"sentdate",!0),n.hide_appointment_date=!0)},isKeyFilteredByApptDate=function(){return _.extend({},n.incoming_notifications,n.patients_notifications)[n.act_translation[n.key]].is_filtered_by_appt_date},n.goToPaymentsHistory=function(e){e.trackable&&e.trackable.paid_via_online_widget?paymentsUrl="app.payments.online-widget":paymentsUrl="app.payments.payment-history",goToPageWithLocationChange(e.trackable.location_id,paymentsUrl)},n.goToReminderResponses=function(e){n.loading=!0,campaigns=g.$search({location_id:e.location_id,campaign_type:"reminder"}),campaigns.$then(function(n){campaign=campaigns.$response.data.data[0],start_time_in_tz=moment.tz(e.trackable.start_time,t.timezone),start_time_in_tz.add(start_time_in_tz.utcOffset(),"minutes"),formatted_date=moment.parseZone(start_time_in_tz).format("MM/DD/YYYY"),goToParams={id:campaign.id,date:formatted_date},goToPageWithLocationChange(campaign.location_id,"app.campaign_template.performance",goToParams)})},goToPageWithLocationChange=function(e,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};item_location=_.find(t.locations,function(t){return t.id==e}),t.set_main_location(item_location),p.go(n,a)},n.$on("cancelEvents",function(e,t){reloadTable(!0)}),n.$on("apptConfirmed",function(e,t){reloadTable(!0)}),n.$on("dismissEvents",function(e){reloadTable(!0)}),n.$on("reloadDashboardData",function(e){reloadTable(!0)})}]),App.controller("DemoRequestCtrl",["$scope","DemoReq","SweetAlert",function(e,t,n){e.didClickOnSend=function(a){if(e.laddaLoading=!0,console.log(a),a.$valid){var i={message:a.message.$viewValue,email:a.email.$viewValue,full_name:a.name.$viewValue,company:a.company.$viewValue,department:a.department.$viewValue,phone_number:a.phone.$viewValue},o=t.$create(i);o.$then(function(t){o.$response.data.code?(e.laddaLoading=!1,n.swal({title:"Demo Request sent",text:"You should expect a reply within a couple of hours.",type:"success",confirmButtonColor:"#DCDEDF"},function(){})):(e.laddaLoading=!1,o.$response.data.error.forEach(function(e){n.swal({title:"Errors",text:e,type:"error",confirmButtonColor:"#DCDEDF"})}))})}else e.laddaLoading=!1,alert("Please complete all fields!")}}]),App.controller("documentCtrl",["$scope","authService","responseHelper","FileUploader","SERVER_BASE_URL","$stateParams","Document","toaster",function(e,t,n,a,i,o,s,r){var l=t.getUserAuthorization();e.title="";var c=s.$search({patient_id:o.id});c.$then(function(){e.documents=c.$response.data.data});var p=e.uploader=new a({url:i+"/documents?subdomain="+t.getUserSubdomain(),headers:{Authorization:l.auth},formData:{document:{patient_id:o.id,document_type:"General"}}});p.onSuccessItem=function(t,n,a,i){n.description.forEach(function(t,a){r.pop("success","Success",t),e.documents.push(n.data)})},p.onErrorItem=function(e,t,n,a){t.error.forEach(function(e,t){r.pop("danger","Error",e)})}}]),App.controller("EnliveFormsCtrl",["$controller","Perm","$scope","$q","EnliveDocumentDetails","ngDialog","$sce","$rootScope",function(e,t,n,a,i,o,s,r){e("EnliveSharedCtrl",{$scope:n}),n.deferred_prov_load=a.defer(),n.trustSrc=function(e){return s.trustAsResourceUrl(e)},n.data={document_query:""},n.$watch("data.document_query",function(e,t){e!==t&&n.filterDocs()},!0),n.showBlankDoc=function(e){n.formio_iframe_src=i.display_url({location_id:r.location.id,document_id:e.enlive_id}),opts={name:"request_doc_view",template:"/app/views/enlive/requests/doc_view.html",className:"ne__modal ne__enlive-requests--dialog",controller:"EnliveRequestsCtrl",scope:n},n.doc_viewer=o.open(opts)},n.deferred_prov_load.promise.then(n.loadDocuments),t.perm_promise.then(function(){n.redirectUnlessCanAccessTab("form_responses"),r.location.enlive_enabled?n.deferred_prov_load.resolve(!0):redirectToOwnFormsIfEnliveDisabled()})}]),App.controller("EnliveRequestsNewModalCtrl",["$controller","$rootScope","$scope","Patient","EnliveRequest","ngDialog","toaster",function(e,t,n,a,i,o,s){e("EnliveSharedCtrl",{$scope:n}),n.datetime_format="MM/DD/YYYY hh:mm A",n.$watch("data.patient_query",function(e,t){e!==t&&n.loadPatients()},!0),n.$watch("data.document_query",function(e,t){e!==t&&n.filterDocs()},!0),n.documents=n.ngDialogData.documents,n.tableReload=n.ngDialogData.tableReload;var r=function(){var e=new Date;return e.setDate(e.getDate()+1),e.setMinutes(e.getMinutes()-e.getMinutes()%5),e},l={patients:[],patient:null,selected_documents:[],submitting:!1,email_notes:"",sms_message:"",patient_query:"",document_query:""};n.data=l,n.setPatient=function(e){n.data.patient=e,n.data.patient_query=""},n.changePatient=function(){n.data.patient=null},n.setDueDate=function(e){n.data.due_date=e},n.selectDoc=function(e){var t=[];t="PACKET"===e.resource?e.documents:[e];var a=new Set(n.data.selected_documents.map(function(e){return e.enlive_id})),i=t.filter(function(e){return!a.has(e.enlive_id)});n.data.selected_documents=n.data.selected_documents.concat(i)},n.removeDoc=function(e){n.data.selected_documents=n.data.selected_documents.filter(function(t){return t.enlive_id!==e.enlive_id})},n.cancel=function(){n.resetForm()},n.close=function(){o.close(n.ngDialogData.ngDialogId)},n.resetForm=function(){n.data=Object.assign({},l),n.setDueDate(moment(r()).format(n.datetime_format))},n.submit=function(){n.data.submitting=!0;var e=i.$create({location_id:t.location.id,patient_id:n.data.patient.id,due_date:moment(n.data.due_date).toISOString(),email_notes:n.data.email_notes,sms_message:n.data.sms_message,enlive_document_ids:n.data.selected_documents.map(function(e){return e.enlive_id})});e.$promise.then(function(){var t=e.$response.data;n.data.submitting=!1,t.code?(s.pop("success","Success","Sent request with documents to the patient"),n.tableReload(),n.close()):t.error?s.pop("error","Error",t.error):s.pop("error","Error","Failed to create request, server error.")})},n.submitDisabled=function(){return!n.data.patient||(0===n.data.selected_documents.length||!!n.data.submitting)},n.loadPatients=function(){var e=a.$search({page:1,per_page:10,params:{location_id:t.location.id,name_dob_email:n.data.patient_query}});e.$promise.then(function(){n.data.patients=e.$response.data.data[0].patients})},n.resetForm()}]),App.controller("EnliveRequestsCtrl",["$controller","Perm","$scope","$q","$state","$stateParams","EnliveRequest","EnliveRequestDocumentDetails","EnliveDocument","NgTableParams","ngDialog","$sce","$rootScope","toaster",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u){e("EnliveSharedCtrl",{$scope:n}),n.statuses_info={DRAFT:{display:"Draft",tooltip:null},NOT_CLICKED:{display:"Not Clicked",tooltip:"Patient has not clicked the link"},CLICKED:{display:"Clicked",tooltip:"Patient has clicked the link, but not viewed any of the forms"},VIEWED:{display:"Viewed",tooltip:"Patient has viewed at least one of the forms, but has not submitted any of them yet"},IN_PROGRESS:{display:"In Progress",tooltip:"Patient has submitted at least one form"},COMPLETE:{display:"Complete",tooltip:"Patient has submitted all forms"}},n.sync_statuses_info={never_synced:{display:"Not synced",tooltip:null},is_outdated:{display:"Outdated",tooltip:null},failed:{display:"Sync Failed",tooltip:"sync_tooltip_template"},succeeded:{display:"Synced",tooltip:"sync_tooltip_template"},pending:{display:"Sync Pending",tooltip:"sync_tooltip_template"}},n.trustSrc=function(e){return d.trustAsResourceUrl(e)},n.params={search_query:""};var _={patient_query:"",form_query:"",patient:null,patients:[],document_query:"",selected_documents:[]};n.new_request=Object.assign({},_),n.deferred_prov_load=a.defer(),n.tableParams=new c({count:25},{getData:function(e){return n.loading=!0,n.deferred_prov_load.promise.then(function(){n.noResponses=!1;var t=s.$search({page:e.page(),per_page:e.count(),location_id:m.location.id,search_query:n.params.search_query});return t.$promise.then(function(a){if(n.loading=!1,t.$response.data.error&&t.$response.data.error.length>0)return n.noResponses=!0,n.failedToFetch=!0,[];if(t.$response.data){var i=t.$response.data.data;return n.noResponses=0===i.length,e.total(t.$response.data.count),i}return n.noResponses=!0,[]})})}}),n.buildPatientName=function(e){var t=e.client;return[t.first_name,t.last_name].join(" ")},n.buildDueDate=function(e){var t=e.appointment_start;return t&&0!==t.length?moment(t).format("MMM D, YYYY h:mm A"):""};var g=function(e){return"COMPLETE"===e.request_display_status&&["is_outdated","failed","succeeded","pending"].includes(e.sync_status)},f=function(e){return g(e)?n.sync_statuses_info[e.sync_status]:n.statuses_info[e.request_display_status]},h=function(e){var t="failed"===e.sync_status?e.last_sync_error_at:e.last_synced_at;return"\n        <span>Status: "+e.sync_status+"</span>\n        <span>Last Synced: "+moment(t).format("h:mm A L")+"</span>\n      "};n.buildStatus=function(e){return f(e).display},n.buildTooltip=function(e){var t=f(e).tooltip;return"sync_tooltip_template"===t?h(e):t},n.statusClass=function(e){return g(e)?"ne__sync_status_"+e.sync_status:"ne__status_"+e.request_display_status.toLowerCase()},n.shouldShowSyncButton=function(e){return g(e)?"is_outdated"===e.sync_status:"COMPLETE"===e.request_display_status},n.isStatus=function(e,t){return e.sync_status===t},n.$watch("params.search_query",function(e,t){e!==t&&(n.tableParams.page(1),n.tableParams.reload())},!0),n.showDoc=function(e,t){n.formio_iframe_src=r.display_url({location_id:m.location.id,request_id:e.id,document_id:t.id}),opts={name:"request_doc_view",template:"/app/views/enlive/requests/doc_view.html",className:"ne__modal ne__enlive-requests--dialog",controller:"EnliveRequestsCtrl",scope:n},n.doc_viewer=p.open(opts)},n.syncRequest=function(e){s.$build({id:e.id}).sync({location_id:m.location.id}).then(function(t){if(t.data&&t.data.code){u.pop("success","Success",t.data.message);var a=n.tableParams.data.findIndex(function(t){return t.id===e.id});a>0&&(n.tableParams.data[a].sync_status="pending")}else t.data&&t.data.error?u.pop("error","Error",t.data.error):u.pop("error","Error","Failed to sync, server error.")})},n.clickNewRequest=function(){p.open({template:"/app/views/enlive/requests/modal/new.html",className:"ne__modal ne__modal--manual",data:{documents:n.documents,tableReload:function(){n.tableParams.reload()}},controller:"EnliveRequestsNewModalCtrl"})},n.deferred_prov_load.promise.then(n.loadDocuments),t.perm_promise.then(function(){n.redirectUnlessCanAccessTab("form_responses"),m.location.enlive_enabled?n.deferred_prov_load.resolve(!0):redirectToOwnFormsIfEnliveDisabled()})}]),App.controller("EnliveSettingsCtrl",["$controller","Perm","$scope","$rootScope","$state","responseHelper","$api",function(e,t,n,a,i,o,s){e("EnliveSharedCtrl",{$scope:n}),n.load_enlive_settings=function(){n.enlive_settings_loading=!0,n.location_enlive_autosync_requests=a.location.enlive_autosync_requests,n.enlive_settings_loading=!1},n.toggleEnliveAutosyncRequests=function(){n.load_enlive_settings(),n.location_enlive_autosync_requests=!n.location_enlive_autosync_requests,s("PUT","/locations/"+n.location.id,{},{enlive_autosync_requests:n.location_enlive_autosync_requests}).then(function(e){n.location.enlive_autosync_requests=n.location_enlive_autosync_requests,a.location.enlive_autosync_requests=n.location.enlive_autosync_requests,o.redirectOrToastOnResp({$response:e},i.current.name,null,{},!0)})},t.perm_promise.then(function(){n.redirectUnlessCanAccessTab("form_responses"),a.location.enlive_enabled?n.load_enlive_settings():redirectToOwnFormsIfEnliveDisabled()})}]),App.controller("EnliveSharedCtrl",["$scope","$state","$rootScope","EnliveDocument",function(e,t,n,a){var i=function(){n.location.enlive_enabled||t.go("app.form-responses")};e.$on("loc_change",function(){e.tableParams&&e.tableParams.reload(),i()}),e.documents={loading:!0,records:[]},e.buildDocIconClass=function(e){return"PACKET"===e.resource?"fa-folder":"pdf"===e.source?"fa-file-pdf-o":"fa-tablet"},e.loadDocuments=function(){var t=a.$search({location_id:n.location.id});t.$promise.then(function(){t.$response.data.error&&t.$response.data.error.length>0&&(e.noResponses=!0,e.failedToFetch=!0),t.$response.data?e.documents={records:t.$response.data.data,filtered:t.$response.data.data,loading:!1}:e.noResponses=!0})},e.filterDocs=function(){0===e.data.document_query.length?e.documents.filtered=e.documents.records:e.documents.filtered=e.documents.records.filter(function(t){return t.name.toLowerCase().includes(e.data.document_query.toLowerCase())})}}]),App.controller("EnliveCtrl",["Perm","$scope","$rootScope","$state",function(e,t,n,a){e.perm_promise.then(function(){t.redirectUnlessCanAccessTab("form_responses"),n.location.enlive_enabled||redirectToOwnFormsIfEnliveDisabled(),_.includes(["app.enlive"],a.current.name)&&a.go("app.enlive.requests")})}]),App.controller("footerCtrl",["$scope","ngDialog",function(e,t){e.tos_modal=function(){t.open({template:"app/views/legal/tos.html",className:"ne__modal ne__modal--tos"})},e.privacy_modal=function(){t.open({template:"app/views/legal/privacy.html",className:"ne__modal ne__modal--privacy"})},e.refunds_modal=function(){t.open({template:"app/views/legal/refunds.html",className:"ne__modal ne__modal--refunds"})}}]),App.controller("forgotPasswordCtrl",["$scope","responseHelper","$stateParams","$state","Reset","SweetAlert",function(e,t,n,a,i,o){e.submitted=!1,e.ngDialogData&&e.ngDialogData.modal&&(e.user=e.ngDialogData.user,e.modal=!0),e.validateInput=function(t,n){var a=e.form[t];return(a.$dirty||e.submitted)&&a.$error[n]},e.didClickOnSubmit=function(){e.laddaLoading=!0,e.form.$valid&&(resetForm={reset_email:{email:e.modal?e.user.email:e.form.email.$viewValue}},e.modal&&n.inst_subdomain&&(resetForm=_.merge(resetForm,{inst_subdomain:n.inst_subdomain})),reset=i.$build(resetForm),reset.$save().$then(function(){e.modal&&e.closeThisDialog(),reset.$response.data.code?o.swal({title:"Email sent!",text:reset.$response.data.description,type:"success",confirmButtonColor:"#DCDEDF"}):reset.$response.data.error.forEach(function(e){o.swal({title:"Error",text:e,type:"error",confirmButtonColor:"#DCDEDF"})}),e.authMsg=reset.$response.data.error,e.laddaLoading=!1}))}}]),App.controller("formEditCtrl",["$scope","$stateParams","$window","$state","$rootScope","$timeout","responseHelper","Form","$q",function(e,t,n,a,i,o,s,r,l){e.showdebug="localhost"==n.location.hostname,e.loading=!0,e.init_formvals=function(){e.edit_formvals={},e.edit_pwvals={},r.initialize_formvals(e.myform.doc,e.edit_formvals),e.preview_formvals=angular.copy(e.edit_formvals),e.preview_pwvals=angular.copy(e.edit_pwvals),e.formvals=e.edit_formvals,e.pwvals=e.edit_pwvals},e.show={delems:"prefilled"},e.form_disabled=!0,e.regex=r.regex,e.select_has_val=r.select_has_val;var c=function(){for(var e=[],t="0123456789abcdef",n=0;n<36;n++)e[n]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")};e.elem_has=function(e,t){if(!e)return!1;var n=e.type;switch(t){case"required":return-1==["sect","flattext","inst_logo","hr","bool","bool_with_str"].indexOf(n);case"numeric":return"num"==n;case"desc":return-1!=["sect","select","signature","hr","flattext","hash"].indexOf(n);case"placeholder":return"select"==n?1==e.other:-1!=["sect","flattext","inst_logo","hr","signature","pw","bool"].indexOf(n);case"multifield":return"hash"==n;case"options":return-1!=["select","select_multi"].indexOf(n);default:return!0}},e.enable_overlay=function(t){lg("eo",t,e.oelem),e.oelem==t?(lg("off"),o(function(){e.oelem=null}),o(function(){$(".overlayed").removeClass("overlayed");$("#edit_overlay")})):(lg("on"),e.oelem=null,_.each(["desc","placeholder"],function(n){e.elem_has(t,n)&&(t[n]=t[n]||"")}),o(function(){e.oelem=t}),o(function(){e.html_elem=$("#ftreen-"+t.id),lg("he",e.html_elem);var n=e.html_elem.offset();$(".overlayed").removeClass("overlayed"),e.html_elem.addClass("overlayed");var a=$("#edit_overlay"),i=a.height();a.offset({left:n.left,top:n.top-i})}))},e.form_promise=r.show({id:t.id,params:{provider:!0},succ:function(t){var n=t.data.data.form;e.prefilled=t.data.data.prefilled,e.elemtypes=t.data.data.elemtypes,e.mark_depth(0,n.doc.children),e.myform=n,e.loading=!1,e.init_formvals()},err:function(e){}}),lg("$scope.ff",e.form_promise),e.save_form=function(){e.saving=!0,r.put({id:e.myform.id,params:{form:e.myform},succ:function(t){e.saving=!1},err:function(e){}})},e.disp_if_refs={},e.should_disp=function(t){if(!t.disp_if)return!0;e.disp_if_refs[di.id]||(e.disp_if_refs[d.id]=u)};var p=function(e,t,n){var a=u(t);lg("inserting into",a,e,t,n),a.splice(n,0,e)},m=function(e){var t=e.slice(),n=t.pop();return u(t).splice(n,1)[0]};e.delete_elem=function(t){i.confirm_modal({title:"Delete form element?",text:"Are you sure you want to delete this?",custom_confirm:"Yes"}).closePromise.then(function(n){if(1==n.value){lg("ELEM",t);var a=[],i=e.grab_elem(t.id,a);lg("DE:::",i,a),m(a)}e.oelem==t&&(e.oelem=null)})};var u=function(t){var n=e.myform.doc;return lg("trail",t),_.each(t,function(e){lg("ref",n,e),n=n.children[e]}),lg("refbottom",n),void 0===n.children&&(n.children=[]),n.children};e.gen_new_field=function(t){return{id:c(),type:t,options:[],desc:"",col_width:"12",name:"New - "+e.elemtypes[t].title,placeholder:"(enter placeholder here)"}},e.gen_prefilled=function(t){var n=angular.copy(e.prefilled[t]);return n.id=c(),n.sig=t,n.prefilled=!0,n.desc=n.desc||"",void 0===n.col_width&&(n.col_width=12),n},e.duplicate_elem=function(t){var n=[];e.grab_elem(t.id,n);var a=u(n.slice(0,n.length-1));if(lg("duplicate",n,t,a),t.children instanceof Array&&t.children.length>0){i.confirm_modal({title:"Duplicate",text:"Do you want to duplicate only this element, or duplicate it and everything contained within it?",custom_confirm:"Duplicate both element and its children",custom_cancel:"Only duplicate element"}).closePromise.then(function(e){g(t,a,e.value)})}else g(t,a,!1)};var g=function(e,t,n){var a=_.findIndex(t,function(t){return t==e}),i=angular.copy(e);i.id=c(),t.splice(a+1,0,i),n?f(i):i.children=[]},f=function e(t){t.id=c(),t.children instanceof Array&&_.each(t.children,e)};e.menuelem_class=function(t){var n=["menuelem-"+t.type];return e.oelem==t&&n.push("overlayed"),n.join(" ")},e.menu_drop_listener=function(t,n,a,i){e.$apply(function(){lg("deeu",t,n,a,i);var o=n.data("pos"),s=[],r=n.data("id");if(t.hasClass("prefilled"))var l=e.gen_prefilled(t.data("sig"));else if(t.hasClass("etype"))var l=e.gen_new_field(t.data("etype"));else{var c=[],d=t.find(" > .menuelem").data("id"),u=e.grab_elem(d,c),l=m(c);lg("TRAILS",c,s),lg("elems",u,_,c,s,o)}var _=e.grab_elem(r,s);if(lg("form_element",l),"in"==o)p(l,s,0);else if("after"==o){var g=s.pop();p(l,s,g+1)}e.mark_depth(0,e.myform.doc.children)})},e.grab_elem=function(t,n,a){if(void 0===a&&(a=e.myform.doc),"top"==t)return e.myform.doc;if(a.id==t)return a;if(void 0!==a.children){for(var i=null,o=0;null==i&&o<a.children.length;o++)i=e.grab_elem(t,n,a.children[o]);return i&&(n.unshift(o-1),lg("setting trail",n,o)),i}},e.mark_depth=function(t,n){_.each(n,function(n){n.depth=t,n.children instanceof Array&&e.mark_depth(t+1,n.children)})},e.add_page=function(t){void 0===t&&(t=e.myform.pages.length>0?_.maxBy(e.myform.pages,"weight"):1),e.myform.pages.push({name:"New page",desc:"Description",weight:t})},e.elem_click=function(e){lg("elem",e),"sect"==e.type&&(e.collapse=!e.collapse)},e.new_option=function(e){e.options.push({dispval:"",val:""})},e.remove_option=function(e,t){_.remove(e.options,function(e){return e==t})}}]),App.controller("formMetaCtrl",["$scope","$rootScope","Form","Perm",function(e,t,n,a){e.roles=[{name:"Patient intake",value:"intake",active:!0}],e.set_parent=function(t){e.myform.parent_id=t.id,e.myform.parent_type=t.klass},e.set_role=function(t){_.each(e.roles,function(e){e.active=e.value==t.value}),e.myform.role=t.value},e.populate_parents=function(){e.parents=[];var t=a.locsearch({perm:"forms"});e.locs=t.locs,_.each(e.locs,function(e){e.klass="Location"}),e.parents=e.parents.concat(e.locs),a.admin_at_current_inst()&&(a.institution.klass="Institution",e.parents.push(a.institution))
},e.set_default_parent=function(){_.each(e.locs,function(n){n.id==t.location.id&&(e.myform.parent_id=n.id,e.myform.parent_type="Location")})},e.save_form=function(){if(void 0!==e.myform.id)var t="put";else var t="create";n[t]({id:e.myform.id,params:e.myform,succ:function(t){void 0!==e.closeThisDialog&&e.closeThisDialog({created:!0,form:t.data.data.form})},err:function(e){}})},a.perm_promise.then(function(){void 0!==e.closeThisDialog?(e.creating=!0,e.myform={name:"",desc:"",doc:{},parent_type:"Location",role:e.roles[0].value},e.populate_parents(),e.set_default_parent()):e.form_promise.then(function(){e.populate_parents()})})}]),App.controller("formPreviewCtrl",["$scope","Form","$rootScope",function(e,t,n){e.form_promise.then(function(){e.enable_overlay=function(){},e.form_disabled=!1,e.formvals=e.preview_formvals}),e.click_select_val=t.click_select_val,e.set_key_to=t.set_key_to,e.regex=t.regex,e.select_has_val=t.select_has_val}]),App.controller("FormResponsesCtrl",["$controller","Perm","$scope","$q","$state","$stateParams","FormResponse","NgTableParams","ngDialog","$sce","$rootScope",function(e,t,n,a,i,o,s,r,l,c,p){n.load_init=!1,n.params={},n.deferred_prov_load=a.defer(),n.tableParams=new r({count:25},{getData:function(e){return n.loading=!0,n.deferred_prov_load.promise.then(function(){n.noResponses=!1;var t=s.$search({page:e.page(),per_page:e.count(),search_params:n.params,location_id:p.location.id});return t.$promise.then(function(a){if(t.$response.data){var i=t.$response.data.data;return 0===i.length?n.noResponses=!0:n.noResponses=!1,n.loading=!1,e.total(t.$response.data.count),i}return n.loading=!1,n.noResponses=!0,[]})})}}),n.buildFormName=function(e){return"custom"==e.form.form_type?e.form.name:"patient"==e.form.form_type?"New Patient":e.form.form_type},n.$watch("params.name_dob_email",function(e,t){n.load_init?e!=t&&(n.tableParams.page(1),n.tableParams.reload()):n.load_init=!0},!0),n.trustSrc=function(e){return c.trustAsResourceUrl(e)},n.pdfViewerPopup=function(e){n.pdf_url=e.pdf_url,opts={template:"/app/views/form-responses/pdf_viewer.html",className:"ne__modal ne__form-responses--pdf",controller:"FormResponsesCtrl",scope:n},n.pdf_viewer=l.open(opts)};var d=function(){p.location.enlive_enabled&&i.go("app.enlive")};n.$on("loc_change",function(){n.tableParams.reload(),d()}),n.enlive_enabled=!0,t.perm_promise.then(function(){n.redirectUnlessCanAccessTab("form_responses"),p.location.enlive_enabled?d():(n.enlive_enabled=!1,n.deferred_prov_load.resolve(!0))})}]),App.controller("formCtrl",["$scope","$api","$stateParams","$window","Form","Utils",function(e,t,n,a,i,o){if(e.form_disabled=!1,e.form_submittable=!0,e.stage="loading",a.location.hash&&a.location.hash.length>0){e.url_params={};var s=a.location.hash.replace("#","").split(",");_.each(s,function(t){var n=t.split(":");e.url_params[n[0]]=n[1]})}e.load_context=function(){if(params={},o.isNum(n.inst_id)?params.institution_id=n.inst_id:params.subdomain=n.inst_id,o.isNum(n.id))var t=n.id;else{var t=0;params.role=n.id}e.url_params&&(e.url_params.email&&e.url_params.code?(params.with_resp=!0,params.user_email=e.url_params.email,params.user_code=e.url_params.code):e.url_params.response&&(params.with_resp=!0,params.form_resp_id=e.url_params.response)),e.form_promise=i.show({id:t,params:params,unwrap:!0,succ:function(t){e.myform=t.form,e.institution=t.inst,e.pwvals={},void 0!==t.form_resp?(e.formvals=t.form_resp.response.answers,e.form_resp_id=t.form_resp.id):(e.formvals={},i.initialize_formvals(e.myform.doc,e.formvals)),e.stage="initial"},err:function(e){}})},e.click_select_val=i.click_select_val,e.set_key_to=i.set_key_to,e.regex=i.regex,e.select_has_val=i.select_has_val,e.load_context(),e.submit_form=function(){e.saving=!0,i.create_response({id:e.myform.id,params:{response:{answers:e.formvals},pwvals:e.pwvals,formv:e.myform.currentv,form_resp_id:e.form_resp_id},succ:function(t){e.saving=!1,e.stage="thankyou"},err:function(t){e.saving=!1}})}}]),App.controller("formsCtrl",["$scope","Perm","$stateParams","$state","$rootScope","responseHelper","Form","ngDialog",function(e,t,n,a,i,o,s,r){e.load_forms=function(){s.index({params:{location_id:i.location.id},succ:function(t){e.forms=t.data.data,lg("forms",e.forms,t)},err:function(t){lg("resp",t,e),e.forms=t.data.data}})},t.perm_promise.then(function(){e.load_forms(),e.$on("loc_change",function(){return e.load_forms()})}),e.create_form=function(){r.open({template:"/app/views/forms/meta.html",controller:"formMetaCtrl",className:"ngdialog-theme-default"}).closePromise.then(function(e){lg("caught modal response",e),e.value.created&&a.transitionTo("app.form.edit",{id:e.value.form.id})})},e.delete_form=function(e){}}]),App.controller("FreeTrialCtrl",["$scope","DemoReq","SweetAlert",function(e,t,n){e.didClickOnSend=function(t){e.laddaLoading=!0,console.log(t),t.$valid||(e.laddaLoading=!1,alert("Please complete all fields!"))}}]),App.controller("homeCtrl",["$scope","$state","$rootScope","$document","ngDialog","$timeout","$anchorScroll",function(e,t,n,a,i,o,s){e.thispage="home",e.show={howitworks:"patient",product:"accessible"},n.$on("$stateChangeSuccess",function(){a[0].body.scrollTop=a[0].documentElement.scrollTop=0}),e.includes=function(e){return t.includes(e)},e.goToHomePage=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e?t.go("home.home").then(function(){o(function(){s(e)},100)}):t.go("home.home")},e.toggleActive=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;arguments.length>2&&void 0!==arguments[2]&&arguments[2]&&e.preventDefault(),targets=$(e.currentTarget).parent().children(),targets&&targets.length&&(class_name="active_nav_bar_item",1==t?targets.addClass(class_name):0==t?targets.removeClass(class_name):targets.toggleClass(class_name))},e.openDemoRequest=function(){i.open({template:"/app/views/home-page/partials/modal-demo-request.html",controller:"DemoRequestCtrl",className:"ne__modal ne__modal--request-demo"})},e.openFreeTrial=function(){i.open({template:"/app/views/home-page/partials/modal-free-trial.html",controller:"FreeTrialCtrl",className:"ne__modal ne__modal--free-trial"})},e.status={isopen:!1}}]),App.controller("insuranceModalCtrl",["$scope","ngDialog",function(e,t){e.filter={search:""},e.cancel=function(){e.closeThisDialog()},e.filterf=function(t){return-1!=t.indexOf(e.filter.search)}}]),App.controller("intakeCtrl",["$controller","$scope","$api","$rootScope","$stateParams","$filter","authService","ngDialog","responseHelper","Institution","ClientAnalytic","Patient","Appointment","InsuranceCarrier","InsurancePlan","$timeout","$window","$interval","uiGmapGoogleMapApi","AppointmentSlot","$cookies","CustomFormBuilder","$document","$location","toaster","GTMService",function(e,t,n,a,i,o,s,r,l,c,p,d,u,g,f,h,v,y,b,w,k,C,S,P,A,T){e("locationsMapCtrl",{$scope:t}),e("customFormCtrl",{$scope:t}),P.search().keepauth||s.willUnauthorizeUser(!0),t.intake_form_valid=!1,t.min_appt_length=15,t.uview="existing",t.offset=0,t.stage="loading",scrollToTheElement=function(e){h(function(){var n=$("#"+e);n[0]&&n[0].scrollIntoView({behavior:"smooth"}),t.$apply()},200)},hasVisibleCustomPaymentForm=function(){return!!(t.loc&&t.loc.form_online_booking&&t.loc.form_online_booking.id&&(payments_field=_.find(t.loc.form_online_booking.fields,function(e){return!("payments"!=e.field_type||t.hideForExistingPatients&&e.is_hidden)}),payments_field))};var D=function(e){return{moment:e,long_fmt:e.format("ddd, MMM D"),hm:e.format("h:mm"),hod:e.format("A"),compareKey:e.format("DD.MM.YYYY HH:mm")}},E=function(){if(t.preselectUserData){var e=t.preselectUserData.user;t.intake.patient={first_name:e.first_name,last_name:e.last_name,email:e.email,bio:{phone_number:e.bio.phone_number,gender:e.bio.gender,zip_code:e.bio.zip_code,date_of_birth:e.bio.date_of_birth?moment(e.bio.date_of_birth).format("MM/DD/YYYY"):null}}}},x=function(){var e=P.search().start_time||"";if(!e.includes("T"))return t.ignorePreselectSlot=!0,void(t.loadingPreselect=!1);var n=t.loc,a=moment(e),i=D(a),o=function(e){return e.time.compareKey===i.compareKey},s=null,r=null,l=void 0,c=[];n.map_by_operatory&&n.appt_types_map_by_operatory?(l="Operatory",c=n.operatories):(l="User",c=n.provs),c.forEach(function(e){if(!r){var t=Object.values(e.slots).flat();r=t.find(o),r&&(s=e)}}),r?t.showPatientChoicePage(n,s,r,l):(t.is_unavailable_slot=!0,t.ignorePreselectSlot=!0,t.refreshApptSlots()),t.loadingPreselect=!1},U=function(e){var n=a.$storage.getItem("apptBookingData");if(n&&(t.preselectUserData=JSON.parse(n)),"auth"===e&&E(),"category"===e){var i=null;P.search().appt_category_id&&(i=t.inst.appt_categories.find(function(e){return e.id==P.search().appt_category_id})),i?t.chooseCategory(i):t.loadingPreselect=!1}if("patient_type"===e&&P.search().appt_category_id&&t.choosePatientType(!1),"insurance"===e){var o=P.search().insurance_choice_type||"myself";if(t.intake.appt.insurance_choice_type=o,P.search().insurance_carrier_id&&P.search().insurance_carrier_foreign_id&&(t.intake.appt.insurance_carrier={id:parseInt(P.search().insurance_carrier_id),foreign_id:parseInt(P.search().insurance_carrier_foreign_id)}),P.search().insurance_plan_id){var s=parseInt(P.search().insurance_plan_id);if("custom_plan"===o){var r=f.$search(_.merge(customInsuranceSearchParams(),{id:P.search().insurance_plan_id}));r.$promise.then(function(){if(r.$response.data.data){var e=r.$response.data.data,n=e.find(function(e){return e.id===s});t.intake.appt.insurance_plan={id:s},t.onSelectCustomPlan(n)}})}else t.intake.appt.insurance_plan={id:s}}"custom_plan"!==o&&setStageOnSelectInsurance()}"patient_choice"===e&&t.schedulingFor("self"),"initial"!==e||t.ignorePreselectSlot||t.refreshApptSlots({onSuccess:x})};if(t.setStage=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t.stage=e,"insurance"==e&&scrollToTheElement("insurance_stage"),"patient_type"==e&&scrollToTheElement("patient_type_stage"),"initial"==e&&(t.errors=[],t.intake.patient.existing=!1,T.pushEvent({event:"appointment_availability_loaded",location_id:t.loc.id})),"auth"==e&&(t.loc&&t.loc.form_online_booking&&t.loc.form_online_booking.id?(t.inst&&t.inst.is_appt_booking_patient_type_activated&&t.intake&&t.intake.appt&&!t.intake.appt.is_new_clients_patient&&(t.hideForExistingPatients=!0),C.start(t,t.loc.form_online_booking.id,!1,hasVisibleCustomPaymentForm())):(t.form={},t.form_valid=!0)),t.preselect&&U(e),n&&t.refreshApptSlots(),"auth"===e&&T.pushEvent({event:"contact_info_loaded"}),"done"==e&&T.pushEvent({event:"online_booking_completed"})},t.changeAppointmentDetails=function(){t.is_unavailable_slot=!1,t.ignorePreselectSlot=!0,t.setStage("initial",!0)},t.locs=[],i.intake_params){var M=i.intake_params.split(",");if(1==M.length)t.loc_to_open=parseInt(M[0]),t.disp_type="location";else if(M.length>=2){switch(M[0]){case"p":t.disp_type="provider",t.prov_to_open=parseInt(M[1]);break;default:t.disp_type="location",t.loc_to_open=parseInt(M[1])}if(t.url_params={},"string"==typeof M[2]){var O=M[2].split(";");_.each(O,function(e){var n=e.split(":");t.url_params[n[0]]=n[1]}),t.url_params.h&&(t.hide_unspecified=!0)}}else t.disp_type="location"}else t.disp_type="location";t.reset_intake=function(){t.intake={patient:{existing:!1,bio:{gender:"Male"}},appt:{patient:{}}}},setTimezone=function(e){t.tz=e,a.tzpromise.then(function(){a.tz.name()!=t.tz?(t.alertTimezoneDiff=!0,t.clientTimezoneAbbr=moment().tz(t.tz).format("z")):t.alertTimezoneDiff=!1}),t.set_date()},t.set_date=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e||(e=P.search().start_time&&moment(P.search().start_time).isValid()?moment.tz(P.search().start_time,t.tz):moment().tz(t.tz)),e.startOf("day"),t.intake.appt.appointment_date=e,t.intake.apptdates=_.map([0,1,2,3,4],function(e){var n=t.intake.appt.appointment_date.clone();return n.add(e,"days"),{dow:n.format("ddd"),dom:n.format("MMM D"),btn_fmt:n.format("ddd, MMM D"),moment:n}})},t.insurance_modal=function(){r.open({template:"/app/views/modal/insurance.html",controller:"insuranceModalCtrl",scope:t,className:"ne__modal"}).closePromise.then(function(){})},t.move_date=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.intake.appt.appointment_date;if(t.slotsRequestInProgress)return!1;m=_.clone(n),date_in_tz=moment.tz(m,t.tz),date_in_tz.add(e,"days"),now=moment().tz(t.tz),date_in_tz.unix()<now.unix()&&(date_in_tz=now),t.set_date(date_in_tz),t.refreshApptSlots()},t.chooseCategory=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t.intake.appt_category=void 0,h(function(){t.intake.appt_category=e.category,h(function(){T.pushEvent({event:"appointment_type_selected",appointment_type:t.intake.appt_category}),n&&(t.inst&&t.inst.is_display_appt_types_options_activated?(t.intake.appt_atype=void 0,t.setStage("category")):t.inst&&!t.intake.appt.insurance_choice_type&&t.inst.is_appt_booking_insurance_activated?t.setStage("insurance"):t.inst&&t.inst.is_appt_booking_patient_type_activated?t.setStage("patient_type"):t.setStage("initial"))})})},t.chooseAType=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t.intake.appt_atype=e.name,n&&(t.inst&&!t.intake.appt.insurance_choice_type&&t.inst.is_appt_booking_insurance_activated?t.setStage("insurance"):t.inst&&t.inst.is_appt_booking_patient_type_activated?t.setStage("patient_type"):t.setStage("initial"))},openList=function(e,t){element=$(e.currentTarget),element.is(":focus")&&(t(),h(function(){element.blur(),h(function(){element.focus()},10)},10))},t.openATypeList=function(e){t.intake.appt_atype&&(callback=function(){t.intake.appt_atype=void 0},openList(e,callback))},t.chooseInsurance=function(e){t.intake.appt.insurance_choice_type=e,T.pushEvent({event:"insurance_selected",has_insurance:"myself"!==e}),"plan"===t.intake.appt.insurance_choice_type?t.setStage("insurance_carrier"):t.inst&&t.inst.is_appt_booking_patient_type_activated?t.setStage("patient_type"):t.setStage("initial")},t.choosePatientType=function(e){t.intake.appt.is_new_clients_patient=e,T.pushEvent({event:"patient_type_selected",patient_type:e?"New":"Existing"}),t.setStage("initial")},customInsuranceSearchParams=function(){search_params={subdomain:t.inst.subdomain};var e=t.loc_to_open,n=t.prov_to_open;return e&&(search_params=_.merge(search_params,{location_id:e})),n&&(search_params=_.merge(search_params,{provider_id:n})),search_params},t.loadCustomInsurances=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e&&onInsurancePlansLoading(),search_params=customInsuranceSearchParams(),e&&(search_params=_.merge(search_params,{name:e})),t.custom_insurance_errors=void 0;var n=f.$search(search_params);return n.$promise.then(function(a){if(e&&onInsurancePlansLoaded(),e||n.$response.data.data&&n.$response.data.data.length)if(n.$response.data.data.length){if(plans=filterCustomInsurances(n.$response.data.data),plans.length)return plans;e?t.custom_insurance_errors=["No plans found."]:(t.inst.custom_insurance_plans=!1,t.loadInsuranceCarriers())}else t.custom_insurance_errors=n.$response.data.error;else t.inst.custom_insurance_plans=!1,t.loadInsuranceCarriers()})},filterCustomInsurances=function(e){return providers_ids=_.uniq(_.flatten(_.map(t.locs,function(e){return _.map(e.provs,"id")}))),providers_plans=_.filter(e,function(e){return _.filter(e.has_insurances,function(e){return"User"==e.parent_type&&_.includes(providers_ids,e.parent_id)}).length}),plans_filtered_by_loc=[],_.each(t.locs,function(t){loc_plans=_.filter(e,function(e){return _.filter(e.has_insurances,function(e){return"Location"==e.parent_type&&e.parent_id==t.id}).length}),plans_filtered_by_loc.push(filterLocationCustomInsurances(t.provs,loc_plans))}),locations_plans=_.flatten(plans_filtered_by_loc),e=_.sortBy(_.uniq(providers_plans.concat(locations_plans)),"name")},filterLocationCustomInsurances=function(e,t){return t.length?(any_provider_with_no_custom_insurances=e.find(function(e){return!e.has_insurances.length}),any_provider_with_no_custom_insurances?t:(providers_plans_ids=_.flatten(_.map(e,function(e){return _.map(e.has_insurances,"insurance_plan_id")})),locations_plans_presented_for_providers=_.filter(t,function(e){return _.includes(providers_plans_ids,e.id)}),locations_plans_presented_for_providers)):t};var F=function(e,t,n,a,i){if(!i.length)return e;var o={};i.forEach(function(i){if(i.parent_type==n){var s=e.find(function(e){return i.parent_id==e.id});if(s){var r=o[s.id];r?r.full=!0:o[s.id]={object:s,full:!0,children:[]}}}i.parent_type==a&&(localItems=_.filter(e,function(e){return child=e[t].find(function(e){return e.id==i.parent_id}),child}),_.each(localItems,function(e){var n=o[e.id];children=_.filter(e[t],function(e){return e.id==i.parent_id}),n?n.full||(n.children=n.children.concat(children)):o[e.id]={object:e,full:!1,children:children}}))});var s=[];return Object.values(o).forEach(function(e){e.full||(e.object[t]=e.children),s.push(e.object)}),s};t.loadInsuranceCarriers=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;onInsurancePlansLoading(),search_params={},e&&(search_params=_.merge(search_params,{name:e})),t.carriers_errors=void 0,t.plans_errors=void 0;var n=g.$search(search_params);return n.$promise.then(function(e){if(onInsurancePlansLoaded(),!n.$response.data.error||!n.$response.data.error[0])return n.$response.data.data;t.carriers_errors=n.$response.data.error})},t.onSelectInsuranceCarrier=function(e,n){onInsurancePlansLoading(),search_params={carer_foreign_id:e.foreign_id},n&&(search_params=_.merge(search_params,{name:n})),t.carriers_errors=void 0,t.plans_errors=void 0;var a=f.$search(search_params);return a.$promise.then(function(e){if(onInsurancePlansLoaded(),!a.$response.data.error||!a.$response.data.error[0])return t.insurance_plans_by_carrier=a.$response.data.data;t.plans_errors=a.$response.data.error})},onInsurancePlansLoading=function(){t.loadingInsurancePlans=!0},onInsurancePlansLoaded=function(){h(function(){t.loadingInsurancePlans=!1},100)},t.onSelectInsurancePlan=function(e){T.pushEvent({event:"insurance_type_selected",insurance_type:e}),t.intake.appt.insurance_carrier&&t.intake.appt.insurance_plan&&setStageOnSelectInsurance()},filterProvidersByCustomInsurance=function(e,t){return eligible_providers=[],_.each(e,function(e){e.has_insurances.length?(provider_plans_ids=_.map(e.has_insurances,"insurance_plan_id"),_.includes(provider_plans_ids,t)&&eligible_providers.push(e)):eligible_providers.push(e)}),eligible_providers},updateLocsAndProvsOnSelectCustomInsurance=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e&&e.has_insurances&&e.has_insurances.length&&(locs=F(t.locs,"provs","Location","User",e.has_insurances),locs.length?(t.locs=locs,prs=F(t.prs,"locs","User","Location",e.has_insurances),prs=filterProvidersByCustomInsurance(prs,e.id),t.prs=prs,_.each(t.locs,function(e){e.provs=_.filter(e.provs,function(e){return-1!=_.map(t.prs,"id").indexOf(e.id)})}),hideLocationsWithNoProvidersAndOperatories(n)):(t.set_loc(t.locs[0],n),t.provider=null,_.each(t.locs,function(e){e.provs=[]})))},t.onSelectCustomPlan=function(e){t.intake.appt.insurance_choice_type="custom_plan",updateLocsAndProvsOnSelectCustomInsurance(e),setStageOnSelectInsurance()},setStageOnSelectInsurance=function(){t.inst&&t.inst.is_appt_booking_patient_type_activated?t.setStage("patient_type"):t.setStage("initial")},t.openInsuranceCarriersList=function(e){t.intake.appt.insurance_carrier&&t.insurance_plans_by_carrier&&!t.loadingInsurancePlans&&(callback=function(){t.intake.appt.insurance_carrier=void 0,t.intake.appt.insurance_plan=void 0,t.insurance_plans_by_carrier=void 0},openList(e,callback))},t.showPatientChoicePage=function(e,n,a){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"User";T.pushEvent({event:"booking_for_loaded"}),t.set_loc(e,load_appt_slots=!1),"User"==i?(t.provider=n,a.operatory_id&&(t.intake.appt.operatory_id=a.operatory_id)):"Operatory"==i&&(t.operatory=n,t.intake.appt.operatory_id=n.id,a.provider_id&&(t.intake.appt.provider_id=a.provider_id)),t.time=a.time,selected_appt_types=_.filter(t.inst.atypes,function(e){return e.category==t.intake.appt_category&&e.parent_id==n.id&&e.parent_type==i}),t.inst.is_display_appt_types_options_activated?selected_appt_type=_.filter(selected_appt_types,function(e){return e.name==t.intake.appt_atype})[0]:selected_appt_type=selected_appt_types[0],selected_appt_type&&(t.intake.appt.appointment_type_id=selected_appt_type.id),t.setStage("patient_choice")},t.schedulingFor=function(e){if(T.pushEvent({event:"scheduling_for_selected",booking_for:e},!1),"self"===e)t.showFieldOnMainPage=!0,t.intake.appt.patient={},t.setStage("auth"),t.start_intake_watch(),t.intake.apptdate=t.time;else{t.showFieldOnMainPage=!1;r.open({closeByDocument:!1,template:"/app/views/modal/appt-booking-patient-form.html",controller:"intakePatientBookingCtrl",scope:t,className:"ne__modal ne__modal--appt-booking"}).closePromise.then(function(e){t.errors=[],1==e.value&&t.start_booking()})}},t.$watch("intake.appt_category",function(e,n){if(e){selected_category_atypes=_.filter(t.inst.atypes,function(t){return t.category==e}),setAtypesForDisplay(selected_category_atypes);var a=!0;if(!t.inst.is_display_appt_types_options_activated)var a=!1;"location"==t.disp_type?(t.locs=t.base_locs,_.each(t.locs,function(e){e.map_by_operatory&&e.appt_types_map_by_operatory?e.operatories=_.filter(e.base_operatories,function(e){return _.filter(selected_category_atypes,function(t){return"Operatory"==t.parent_type&&t.parent_id==e.id}).length}):e.provs=_.filter(e.base_provs,function(e){return _.filter(selected_category_atypes,function(t){return"User"==t.parent_type&&t.parent_id==e.id}).length})}),hideLocationsWithNoProvidersAndOperatories(a)):t.prs=_.filter(t.base_prs,function(e){return _.filter(selected_category_atypes,function(t){return"User"==t.parent_type&&t.parent_id==e.id}).length}),updateLocsAndProvsOnSelectCustomInsurance(t.intake.appt.insurance_plan,a),t.inst.is_display_appt_types_options_activated||t.preselect&&!t.ignorePreselectSlot||t.refreshApptSlots()}}),t.$watch("intake.appt_atype",function(e,n){e&&t.refreshApptSlots()}),t.refreshApptSlots=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.onSuccess;"provider"==t.disp_type?t.getApptSlots([t.provider],t.provider.locs,{onSuccess:n}):t.getApptSlots(t.loc.provs,[t.loc],t.loc.operatories,{onSuccess:n})},setAtypesForDisplay=function(e){t.inst.is_display_appt_types_options_activated&&(t.appointment_types_for_display=_.sortBy(_.uniqBy(e,"name"),"name"))},t.load_inst=function(){t.inst_resp=c.$find(-1,{inst_subdomain:i.inst_subdomain,loc_to_open:t.loc_to_open,prov_to_open:t.prov_to_open,hide_unspecified:t.hide_unspecified,disp_type:t.disp_type,show_locations:!0,from_intake_page:!0}),k.put("subdomain",i.inst_subdomain),t.inst_resp.$then(function(){if(t.inst=t.inst_resp.$response.data.data,setTimezone(t.inst.tz),t.$broadcast("intakeInstLoaded"),setAtypesForDisplay(t.inst.atypes),T.pushEvent({event:"online_booking_initial_load",institution_id:t.inst.id}),0==t.inst.locations.length)return t.loc=!1,t.base_prs=t.inst.providers,t.base_operatories=t.inst.operatories,!1;setLocsProvsOperatories();var e=!0;t.inst.appt_categories&&t.inst.appt_categories.length&&(e=!1),hideLocationsWithNoProvidersAndOperatories(e),"location"==t.disp_type&&1==t.locs.length&&(t.loc.operatories.length?t.set_operatory_active(t.loc.operatories[0]):t.loc.provs.length&&t.set_prov_active(t.loc.provs[0])),t.inst.appt_categories&&t.inst.appt_categories.length?(t.no_appt_category=!1,t.setStage("category")):(t.no_appt_category=!0,t.inst&&!t.intake.appt.insurance_choice_type&&t.inst.is_appt_booking_insurance_activated?t.setStage("insurance"):t.inst&&t.inst.is_appt_booking_patient_type_activated?t.setStage("patient_type"):t.setStage("initial"),t.refreshApptSlots()),t.inst&&t.inst.is_appt_booking_insurance_activated&&t.inst.custom_insurance_plans})},setLocsProvsOperatories=function(){var e=_(t.inst.has_locations).groupBy("user_id").mapValues(function(e){return _.map(e,function(e){return e.location_id})}).value(),n=_(t.inst.has_locations).groupBy("location_id").mapValues(function(e){return _.map(e,function(e){return e.user_id})}).value(),a=_(t.inst.operatories).groupBy("location_id").mapValues(function(e){return _.map(e,function(e){return e.id})}).value();if("location"==t.disp_type)t.hide_unspecified&&t.loc_to_open?t.locs=[_.find(t.inst.locations,function(e){return e.id==t.loc_to_open})]:t.loc_to_open?t.locs=_.sortBy(t.inst.locations,[function(e){return e.id!=t.loc_to_open},"weight"]):t.locs=t.inst.locations,t.base_prs=_.uniqBy(t.inst.providers,"id"),t.base_operatories=_.uniqBy(t.inst.operatories,"id");else if("provider"==t.disp_type)if(t.hide_unspecified&&"provider"==t.disp_type){t.base_prs=[_.find(t.inst.providers,function(e){return e.id==t.prov_to_open})];var i=_.map(t.base_prs,"id"),o=e[t.prov_to_open];t.locs=_.filter(t.inst.locations,function(e){return-1!=o.indexOf(e.id)})}else if(t.prov_to_open){t.base_prs=_.sortBy(_.uniqBy(t.inst.providers,"id"),function(e){return e.id!=t.prov_to_open});var i=_.map(t.base_prs,"id"),o=_.map(_.filter(t.inst.has_locations,function(e){return-1!=i.indexOf(e.user_id)}),"location_id");t.locs=_.filter(t.inst.locations,function(e){return-1!=o.indexOf(e.id)})}else t.base_prs=_.uniqBy(t.inst.providers,"id"),t.locs=t.inst.locations;t.prs=t.base_prs,t.operatories=t.base_operatories,t.locs=_.sortBy(t.locs,"weight"),t.base_locs=t.locs,_.each(t.locs,function(e){e.limit=5,void 0!==n[e.id]?e.base_provs=angular.copy(_.uniqBy(_.filter(t.base_prs,function(t){return-1!==n[e.id].indexOf(t.id)}),"id")):e.base_provs=[],e.provs=e.base_provs,void 0!==a[e.id]?e.base_operatories=angular.copy(_.uniqBy(_.filter(t.base_operatories,function(t){return-1!==a[e.id].indexOf(t.id)}),"id")):e.base_operatories=[],e.operatories=e.base_operatories}),_.each(t.prs,function(n){n.locs=_.uniqBy(_.filter(t.inst.locations,function(t){return e[n.id]&&-1!==e[n.id].indexOf(t.id)}),"id")}),_.each(t.operatories,function(e){e.loc=_.filter(t.inst.locations,function(t){return t.id==e.location_id})[0]})},distanceBetweenCoordinates=function(e,t,n,a){if(e==n&&t==a)return 0;var i=Math.PI*e/180,o=Math.PI*n/180,s=t-a,r=Math.PI*s/180,l=Math.sin(i)*Math.sin(o)+Math.cos(i)*Math.cos(o)*Math.cos(r);return l>1&&(l=1),l=Math.acos(l),l=180*l/Math.PI,l=60*l*1.1515},t.orderBySlotsPresence=function(e){return some_slots=_.some(e.slots,function(e,t){return e.length}),some_slots?0:1},t.getApptSlots=function(e,n,a){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=i.onSuccess;if(void 0===e||void 0===n)return!1;t.slotsRequestInProgress=!0,loadingSlotsTimeout=h(function(){t.loadingSlots=!0},200);var s=t.intake.appt.appointment_date.format(),r={subdomain:t.inst.subdomain,disp_type:t.disp_type,days:v.innerWidth>991?5:1,start_date:t.intake.appt.appointment_date.format(),"pids[]":_.map(e,"id"),"lids[]":_.map(n,"id")};a&&a.length&&(r["operatories_ids[]"]=_.map(a,"id")),t.inst.is_display_appt_types_options_activated&&(r.chosen_appt_type=t.intake.appt_atype),t.intake.appt_category?r.category=t.intake.appt_category:r.length=t.intake.appt_minutes,resp=w.$search(r),resp.$then(function(i){if(s!=t.intake.appt.appointment_date.format())return t.loadingSlots=!1,t.slotsRequestInProgress=!1,!1;if("provider"==t.disp_type)var r="lid",l=n;else if(a&&a.length)var r="operatory_id",l=a;else var r="pid",l=e;_.each(resp.$response.data.data,function(e){var n=_.find(l,{id:parseInt(e[r])});t.assign_slots_to(n,e)}),t.loadingSlots=!1,h.cancel(loadingSlotsTimeout),t.slotsRequestInProgress=!1,o&&o()})},hideLocationsWithNoProvidersAndOperatories=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];"provider"==t.disp_type?(active_prov=t.prs[0],active_prov&&(t.set_prov_active(active_prov),active_prov.locs=findLocationsWithProvidersOrOperatories(active_prov.locs))):t.locs=findLocationsWithProvidersOrOperatories(t.locs),"location"!=t.disp_type||_.includes(t.locs,t.loc)||t.set_loc(t.locs[0],e),t.mapSettings()},findLocationsWithProvidersOrOperatories=function(e){return locs_with_provs=_.filter(e,function(e){return"provider"==t.disp_type?e.provs.length:(!e.map_by_operatory||!e.appt_types_map_by_operatory)&&e.provs.length}),locs_with_operatories=_.filter(e,function(e){return e.map_by_operatory&&e.appt_types_map_by_operatory&&e.operatories.length}),e=locs_with_operatories.length||locs_with_provs.length?_.uniq(locs_with_operatories.concat(locs_with_provs)):[e[0]]},t.assign_slots_to=function(e,n){var a={};_.each(t.intake.apptdates,function(e){a[e.btn_fmt]=[]}),_.each(n.slots,function(e){var n=moment(e.time).tz(t.tz);formatted_time=D(n),a[formatted_time.long_fmt]&&(pslot_hash={time:formatted_time},e.operatory_id&&(pslot_hash.operatory_id=e.operatory_id),e.provider_id&&(pslot_hash.provider_id=e.provider_id),a[formatted_time.long_fmt].push(pslot_hash))}),e.slots=a,e.next_avail=n.next_avail},t.start_booking=function(){r.open({template:"/app/views/modal/confirm-appt.html",scope:t,className:"ne__modal"}).closePromise.then(function(e){1==e.value?(t.setStage("auth"),t.start_intake_watch(),t.intake.apptdate=t.time):t.intake.appt.patient={}})},t.toggleprov=function(e){e.active?e.active=!1:(t.set_prov_active(e),e.limit=5,"provider"==t.disp_type?(t.getApptSlots([e],e.locs),t.mapSettings(e.locs,!0)):t.getApptSlots([e],[t.loc]))},t.forgotpwmodal=function(){r.open({template:"/app/views/modal/forgot-password.html",data:{user:t.intake.patient,modal:!0},controller:"forgotPasswordCtrl",className:"ne__modal"}).closePromise.then(function(e){e.value})},t.toggle_limit=function(e){void 0===e.limit?e.limit=5:e.limit=void 0},t.set_prov_active=function(e){e&&("provider"==t.disp_type?_.each(t.prs,function(n){n.id==e.id?(n.active=!0,t.provider=n):n.active=!1}):_.each(t.locs,function(n){_.each(n.provs,function(n){n.active=n.id==e.id,n.active&&(t.provider=n)})}))},t.set_operatory_active=function(e){e&&"location"==t.disp_type&&_.each(t.locs,function(n){_.each(n.operatories,function(n){n.active=n.id==e.id,n.active&&(t.operatory=n)})})},t.start_intake_watch=function(){t.$watch("intake",function(e,n){var a=!0;if(t.intake.patient.existing)var i=["email","password"];else{var i=["first_name","last_name","email"];!1===t.showFieldOnMainPage?patientInfoFields=["phone_number","zip_code"]:patientInfoFields=["gender","phone_number","zip_code","date_of_birth"],_.each(patientInfoFields,function(e){var n=t.intake.patient.bio[e];n&&""!=n||(a=!1),"date_of_birth"==e&&t.intake.date_invalid_class&&(a=!1)}),t.inst.misc.require_insurance&&!t.intake.patient.bio.insurance&&(a=!1)}_.each(i,function(e){var n=t.intake.patient[e];void 0!==n&&""!=n||(a=!1)}),t.intake_form_valid=a},!0)},t.changeLocation=function(e){T.pushEvent({event:"new_location_selected",old_location_id:t.loc.id,location_id:e.id}),t.set_loc(e)},t.set_loc=function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];!e||a&&"initial"!=t.stage||(t.loc=e,e.tz&&setTimezone(e.tz),t.setMapCenter(e.latitude,e.longitude),t.intake.appt.location_id=e.id,_.each(t.locs,function(t){t.active=t==e}),_.each(t.base_locs,function(t){t.active=t==e}),"location"==t.disp_type?(_.each(e.provs,function(e){e.limit=5}),_.each(e.operatories,function(e){e.limit=5}),n&&t.getApptSlots(e.provs,[e],e.operatories),scrollToTheElement("locwrap-"+e.id)):t.provider&&scrollToTheElement("prwrap-"+t.provider.id))},t.reset_intake(),t.load_inst(),t.preselect=!!P.search().preselect,t.loadingPreselect=t.preselect,formatDate=function(e){return moment(e,"MMDDYYYY").format("YYYY-MM-DD")},t.sendRegister=function(){t.errors=[],t.form_submitting||hasVisibleCustomPaymentForm()||(t.form_submitting=!0,t.loading=!0,t.sendRegisterAction())},t.sendRegisterAction=function(e){k.remove("subdomain"),account=angular.copy(t.intake.patient),account&&account.bio&&account.bio.date_of_birth&&(account.bio.date_of_birth=formatDate(account.bio.date_of_birth)),
t.intake.appt.provider_id?pcp_id=t.intake.appt.provider_id:t.provider&&(pcp_id=t.provider.id);var a={account:account,subdomain:i.inst_subdomain,pcp_id:pcp_id,location_id:t.intake.appt.location_id,is_new_clients_patient:t.intake.appt.is_new_clients_patient};if(t.preselectUserData){var o=t.preselectUserData.user;t.register_success=!0,t.intake.appt.patient_id=o.id,t.intake.appt.is_new_clients_patient=!1,t.sendApptRequest(e)}else n("POST","/patient_intake",a).then(function(n){t.errors=n.data.error;var a={$response:n,redirect:!1};200===n.status&&n.data&&n.data.data?!0===n.data.code?(t.register_success=!0,l.willStoreCookie(a),t.intake.appt.patient_id=n.data.data.user.id,t.intake.appt.is_new_clients_patient=n.data.data.is_new_clients_patient,t.sendApptRequest(e)):(t.loading=!1,t.form_submitting=!1):(t.loading=!1,t.form_submitting=!1,l.redirectOrToastOnResp(a))},function(e){t.loading=!1,t.form_submitting=!1,422===e.status&&!1===e.data.code&&r.open({template:"/app/views/modal/contact-alert.html",data:{phone:e.data.data[0],email:e.data.data[1],modal:!0},controller:"contactAlertCtrl",className:"ngdialog-theme-default"})})},t.sendApptRequest=function(e){t.loading=!0,t.intake.appt.start_time=t.intake.apptdate.moment.format(),t.intake.apptdate.pretty_fmt=t.intake.apptdate.moment.format("dddd, MMMM D"),!t.intake.appt.provider_id&&t.provider&&(t.intake.appt.provider_id=t.provider.id),t.intake.appt.patient&&t.intake.appt.patient.bio&&t.intake.appt.patient.bio.date_of_birth&&(t.intake.appt.patient.bio.date_of_birth=formatDate(t.intake.appt.patient.bio.date_of_birth)),""!=S[0].referrer&&(t.intake.appt.referrer=S[0].referrer),appts_opts={appt:t.intake.appt,category:t.intake.appt_category},t.form&&t.form.id&&(fields=C.formFields(t),fields&&fields.length&&(appts_opts.custom_fields={fields:fields,form_id:t.form.id})),e&&(appts_opts.payment_method_nonce=e),P.search().is_booked_from_recall&&(appts_opts.is_booked_from_recall=!0),u.$build(appts_opts).$save().$then(function(e){1==e.$response.data.code?(t.appt_request_success=!0,t.operatory?label=t.operatory.name||t.operatory.display_name:t.provider&&(label=t.provider.doctor_name),t.setStage("done"),t.openClientAnalyticUrl(e.$response.data.data.appt.id)):(t.appt_request_success=!1,t.setStage("error"),t.errors=e.$response.data.error),t.loading=!1,t.form_submitting=!1})},t.openClientAnalyticUrl=function(e){n("GET","/client_analytics/"+t.inst_resp.id,{remember_token:s.getAuth(),appointmentID:e}).then(function(e){e.data.data.url&&(v.location.href=e.data.data.url)})},t.hasSlots=function(e){return _.flatten(_.values(e.slots)).length>0}}]),App.controller("intakePatientBookingCtrl",["$scope",function(e){e.savePatient=function(){if(!e.form.patientForm.$valid)return e.errors=["Please complete all fields!"],!1;e.closeThisDialog(!0)},e.cancelPatientSaving=function(){e.errors=[],e.intake.appt.patient={},e.closeThisDialog(!1)}}]),App.controller("integrationsCtrl",["$scope","authService","$state","responseHelper","$stateParams","$api","Emr","$interval",function(e,t,n,a,i,o,s,r){e.loading={emrs:!0},e.setemr=function(t){e.emr=t},e.getEmrs=function(){e.loading.emrs=!0;var t=s.$search({});t.$then(function(){e.emrs=t.$response.data.data[0].emrs,e.loading.emrs=!1,i.emrName&&e.setemr(_.find(e.emrs,function(e){return e.name==i.emrName}))})},e.getEmrs(),e.tryauth=function(t){e.authing=t.name,t.loading=!0,e.intv=r(function(){e.getEmrStatus()},6e3)},e.getEmrStatus=function(){o("GET","/emr_status/"+e.emr.name).then(function(t,n){"complete"==t.data.status?(e.emr.loading=!1,e.emr.integration_status="complete",r.cancel(e.intv)):"integrating"==t.data.status&&(e.emr.loading=!1,e.emr.integration_status="integrating",r.cancel(e.intv))},function(e,t){})}}]),App.controller("locationsMapCtrl",["$scope","$timeout",function(e,t){e.$on("intakeInstLoaded",function(n,a){e.map={markers:[],center:{latitude:0,longitude:0},zoom:11},e.institutionAllowShowMap="true"==(e.inst.misc.show_map||"true"),e.mapOptions={zoom:9,type:"road",mapTypeControl:!1,streetViewControl:!1,zoomControl:!0,marker:{animation:"DROP",icon:{url:"/app/img/map/marker_gray.png",size:[35,35],scaledSize:[35,35],origin:[0,0]}}},setMapStyles=function(){e.mapOptions.styles=[{elementType:"geometry",stylers:[{color:"#edeeee"}]},{featureType:"administrative.country",elementType:"labels.text.fill",stylers:[{color:"#797d81"}]},{featureType:"administrative.land_parcel",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"administrative.land_parcel",elementType:"labels.text",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#797d81"}]},{featureType:"administrative.neighborhood",elementType:"labels.text.fill",stylers:[{color:"#797d81"}]},{featureType:"administrative.province",elementType:"labels.text",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"poi",elementType:"labels.text",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#bee6b8"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#ffffff"}]},{featureType:"road",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#797d81"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#dadada"}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#e1e5f7"}]},{featureType:"road.highway",elementType:"labels.text",stylers:[{color:"#96ace8"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#797d81"}]},{featureType:"water",stylers:[{color:"#00d0ff"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#e5f9fc"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{color:"#a9d8fc"}]},{featureType:"water",elementType:"labels",stylers:[{color:"#e5f9fc"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#92d0fc"}]}]},e.inst.misc&&e.inst.misc.colormap||setMapStyles(),e.inst.misc&&e.inst.misc.centermap&&e.inst.misc.mapzoom&&(e.map.zoom=e.inst.misc.mapzoom),sortLocsByNearest=function(e,t){return e&&e.coords?(userLatitude=e.coords.latitude,userLongitude=e.coords.longitude):(first_loc_with_coords=t.find(function(e){return e.latitude&&e.longitude}),userLatitude=first_loc_with_coords.latitude,userLongitude=first_loc_with_coords.longitude),initial_locs=angular.copy(t),t.sort(function(e,t){return distanceBetweenCoordinates(userLatitude,userLongitude,e.latitude,e.longitude)-distanceBetweenCoordinates(userLatitude,userLongitude,t.latitude,t.longitude)}),initial_locs},centerMapByLocations=function(t,n,a){if("location"==e.disp_type&&t.length&&n.length&&t[0].id!=n[0].id)e.set_loc(n[0]);else if(e.inst.misc.centermap||0==e.map.center.longitude||a){var i=0,o=0,s=0;_.each(n,function(e){void 0!==e.latitude&&void 0!==e.longitude&&(i+=e.latitude,o+=e.longitude,s+=1)}),e.setMapCenter(i/s,o/s)}},setMapMarkers=function(t){e.map.markers=_.map(t,function(e){return{loc:e,coords:{longitude:e.longitude,latitude:e.latitude},id:e.id}})},e.mapSettings=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(e.showmap=!1,n&&n.length||(n="provider"==e.disp_type&&e.provider?e.provider.locs:e.locs),!n||!n.length)return void(e.showmap=e.institutionAllowShowMap);callback=function(o){i==e.maxGeolocationInProgress&&t(function(){initial_locs=sortLocsByNearest(o,n),centerMapByLocations(initial_locs,n,a),setMapMarkers(n),e.showmap=e.institutionAllowShowMap})},void 0===e.maxGeolocationInProgress&&(e.maxGeolocationInProgress=0),e.maxGeolocationInProgress=e.maxGeolocationInProgress+1;var i=e.maxGeolocationInProgress;navigator.geolocation.getCurrentPosition(callback,callback)},e.setMapCenter=function(t,n){e.hide_unspecified&&(e.map.zoom=13),e.map.center={latitude:t,longitude:n}}})}]),App.controller("loginCtrl",["$scope","$rootScope","Authenticate","authService","responseHelper","$state","$stateParams","$location",function(e,t,n,a,i,o,s,r){e.authenticateUser=function(t){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;a.removeCookies();var s=n.$build(t);s.$save(),s.$then(function(){lg("AUTH RESPONSE"),"Patient"==s.utype?e.authMsg=["Sorry, NexHealth for patients is currently only available on iOS and Android!"]:(i.willStoreCookie(s,o),e.authMsg=s.$response.data.error)})};if(a.isUserAuthorized()&&"Patient"!=a.getUserType())o.go("app.activities");else if("login_booking"===o.$current.name||"login_booking_with_time"===o.$current.name)!function(){var a=r.search().d,o=r.search().l;t.subdomain=a;var l={auth_token:s.auth_token,subdomain:a};e.auth_loading=!0;var c=n.$build(l);c.$save(),c.$then(function(){if(e.auth_loading=!1,c.$response.data.code){i.willAuthorizeUser(c);var n=c.$response.data.data;t.$storage.setItem("apptBookingData",JSON.stringify(c.$response.data.data));var r="/appt/"+a+"/l,"+o+",h:y";r+="?appt_category_id="+n.appt_category_id,n.insurance_choice_type&&(r+="&insurance_choice_type="+n.insurance_choice_type),n.insurance_carrier_id&&(r+="&insurance_carrier_id="+n.insurance_carrier_id),n.insurance_carrier_foreign_id&&(r+="&insurance_carrier_foreign_id="+n.insurance_carrier_foreign_id),n.insurance_plan_id&&(r+="&insurance_plan_id="+n.insurance_plan_id),s.start_time&&(r+="&start_time="+s.start_time),r+="&keepauth=1",r+="&preselect=1",r+="&is_booked_from_recall=1",window.location.href=r}else a&&0!==a.length?o&&0!==o.length?window.location.href="/appt/"+a+"/l,"+o+",h:y":window.location.href="/appt/"+a:window.location.href="/appt"})}();else if(s.auth_token){var l={subdomain:s.subdomain,auth_token:s.auth_token};e.authenticateUser(l,s.impersonation_session_id||!0)}e.form=[{key:"email",type:"email",htmlClass:"form-group has-feedback",placeholder:"email address"},{key:"password",type:"password",htmlClass:"form-group has-feedback",placeholder:"password"},{type:"submit",style:"btn btn-block btn-success",title:"Login"}],e.schema={type:"object",title:"Login",properties:{email:{type:"string",title:"email"},password:{type:"string",title:"password"}}},e.model={},e.onSubmit=function(t){if(e.$broadcast("schemaFormValidate"),t.$valid){var n={login:{email:t.email.$viewValue,password:t.password.$viewValue},webapp:!0};e.authenticateUser(n)}}}]),App.controller("manageUsersCtrl",["$rootScope","Perm","$scope","User","$state","NgTableParams","ngDialog","$api","responseHelper",function(e,t,n,a,i,o,s,r,l){n.loading=!0,n.staff_users=[],n.search={},loadStaffUsers=function(e){return n.loading=!0,n.search.page=e.page(),n.search.per_page=e.count(),resp=a.$search(n.search),resp.$promise.finally(function(){n.loading=!1}).then(function(){return n.errors=[],n.staff_users=resp.$response.data.data,resp.$response.data.count&&e.total(resp.$response.data.count),resp.$response.data.data},function(){n.staff_users=[],n.errors=resp.$response.data.error})},t.perm_promise.then(function(){if("app.settings.manage_users"==i.current.name&&!n.can_access_manage_users)return void i.go("app.settings.personal");n.tableParams=new o({},{getData:function(e){return loadStaffUsers(e)}})}),n.newStaffUser=function(){opts={template:"/app/views/settings/tabs/manage_users/modal/new_staff.html",className:"ne__modal ne__modal--manual ne__modal--manage-users",scope:n,controller:"staffCreateCtrl"},n.newStaffDialog=s.open(opts)},e.$on("onCreateStaffUser",function(e){n.tableParams.reload()}),n.destroyStaffUser=function(t){dialog=e.confirm_modal({text:"Are you sure you want to delete this staff user?",custom_confirm:"Delete"}),dialog.closePromise.then(function(e){1==e.value&&(n.loading=!0,r("DELETE","/user/"+t.id,{}).then(function(e){e.data.code?n.tableParams.reload():n.loading=!1,responseHelperMsg(e)}))})},n.permissionsPopup=function(e){n.current_staff=e,opts={template:"/app/views/settings/tabs/manage_users/modal/permissions.html",className:"ne__modal ne__modal--manage-users-permissions",scope:n,controller:"staffPermissionsCtrl"},n.permissionsDialog=s.open(opts)},n.locationsPopup=function(e){n.current_staff=e,n.current_staff.initial_locations=angular.copy(n.current_staff.locations),opts={template:"/app/views/settings/tabs/manage_users/modal/locations.html",className:"ne__modal ne__modal--manual",scope:n},n.locationsDialog=s.open(opts),n.locationsDialog.closePromise.then(function(e){1!=e.value&&(n.current_staff.locations=n.current_staff.initial_locations)})},n.isStaffBelongsToLocation=function(e,t){return e.locations&&e.locations.some(function(e){return e.id==t})},n.toggleLocation=function(e,t){n.isStaffBelongsToLocation(e,t.id)?_.remove(e.locations,function(e){return e.id==t.id}):e.locations.push(t)},n.toggleAllLocations=function(e){_.each(n.locations,function(t){n.isStaffBelongsToLocation(e,t.id)||e.locations.push(t)})},n.clearLocations=function(e){e.locations=[]},n.saveLocations=function(e){n.locationsDialog&&n.locationsDialog.close(!0),r("PUT","/user/"+e.id,{},{assign_locations_ids:_.map(e.locations,"id")}).then(function(t){t.data.code?(e.locations=t.data.data.locations,e.initial_locations=e.locations):e.locations=e.initial_locations,responseHelperMsg(t)})},responseHelperMsg=function(e){e.$response=e,l.redirectOrToastOnResp(e)}}]),App.controller("globalMapCtrl",["$scope","$rootScope","$api","$timeout",function(e,t,n,a){e.map={markers:[],center:{latitude:0,longitude:0},zoom:11},e.setMapStyles=function(){e.mapOptions.styles=[{elementType:"geometry",stylers:[{color:"#f5f5f5"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#969696"}]},{elementType:"labels.text.stroke",stylers:[{color:"#f5f5f5"}]},{featureType:"administrative.land_parcel",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#ffffff"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#f5f5f5"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{color:"#000"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#f5f5f5"}]},{featureType:"transit.station",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#edeeee"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]}]},e.set_loc=function(t){e.loc=t,e.inst=_.find(e.insts,function(e){return e.id==loc.institution_id})},e.mergeMarkerOpts=function(e){var t={icon:{url:"/app/img/map/marker_gray.png",size:[35,35],scaledSize:[35,35],origin:[0,0]}};return t.title=e,t};var i=function(e,t){return"http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=glyphish_star|"+t},o=(encodeURI("•"),i(0,"ffee00"),i(0,"ff847a"));e.mapOptions={zoom:9,type:"road",mapTypeControl:!1,streetViewControl:!1,zoomControl:!0,marker:{animation:"DROP",icon:{url:"/app/img/map/marker_gray.png",size:[35,35],scaledSize:[35,35],origin:[0,0]}}},e.load_insts=function(){n("GET","/institutions_for_map",{}).then(function(t){var n=0,a=0,i=0;_.each(t.insts,function(t){_.each(t.locations,function(t){t.latitude&&t.longitude&&(e.map.markers.push({myicon:o,loc:t,coords:{longitude:t.longitude,latitude:t.latitude},id:t.id}),i+=1,n+=t.latitude,a+=t.longitude)})}),e.showmap=!0,e.map.center={latitude:n/i,longitude:a/i}})},e.a,e.load_insts()}]),App.controller("medicationCtrl",["$scope","responseHelper","Medication","$stateParams","editableOptions","editableThemes","toaster","SERVER_BASE_URL","$http","authService",function(e,t,n,a,i,o,s,r,l,c){e.reminderCountForm=_.range(1,11);var p=c.getUserSubdomain();e.weekdays=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],e.days=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],e.$watch("weekdays",function(t,n){console.log(e.weekdays)}),e.remove=function(t,n){e.days.splice(e.days.indexOf(t),1),console.log(e.days)},e.add=function(t,n){e.days.push(t),console.log(e.days)},e.submitted=!1,e.chosenDrug={},e.validateInput=function(t,n){var a=e.form[t];return(a.$dirty||e.submitted)&&a.$error[n]},e.setDrugId=function(t){e.drugId=t.id,e.chosenDrug=t},e.getDrugs=function(e){return l.get(r+"/drug_searches?query="+e+"&subdomain="+p,{headers:{Authorization:c.getUserAuthorization().auth}}).then(function(e){return e.data.data.map(function(e){return e})})},e.submitForm=function(){if(e.submitted=!0,!e.form.$valid)return console.log("Not valid!!"),!1;console.log("Submitted!!",e.form);var i={medication_params:{patient_id:a.id,fda_drug_id:e.drugId,drug_name:e.form.drug.$viewValue,reminder_count:e.form.reminderCount.$viewValue,days:e.days.join()}},o=n.$build(i);o.$save(),o.$then(function(){t.redirectOrToastOnResp(o)&&e.medications.push(o.$response.data.data[0])})},e.intervals=[{value:1,text:"1"},{value:2,text:"2"},{value:3,text:"3"},{value:4,text:"4"},{value:5,text:"5"}];var d=n.$search({patient_id:a.id});d.$then(function(){e.medications=d.$response.data.data,e.$watchCollection("medications",function(){},!0)}),i.theme="bs3",o.bs3.inputClass="input-sm",o.bs3.buttonsClass="btn-sm",o.bs3.submitTpl='<button type="submit" class="btn btn-success"><span class="fa fa-check"></span></button>',o.bs3.cancelTpl='<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span class="fa fa-times text-muted"></span></button>',e.didClickOnUpdate=function(a){var i={medication_params:{drug_name:a.drug_name,description:a.description,drug_duration:a.drug_duration,quantity_per_dose:a.quantity_per_dose,doses_per_interval:a.doses_per_interval,interval:a.interval,is_rx:a.is_rx}},o=n.$find(a.id);o.medication_params=i.medication_params,o.$save(["medication_params"]),o.$then(function(){t.redirectOrToastOnResp(o)&&e.medications.forEach(function(t,n){t.id===o.$response.data.data[0].id&&e.medications.splice(n,1,t)})})},e.didClickOnDelete=function(a){var i=n.$find(a);i.$then(function(){i.$destroy(),i.$then(function(){t.redirectOrToastOnResp(i)&&e.medications.forEach(function(t,n){t.id===a&&e.medications.splice(n,1)})})})}}]),App.controller("navBarSecondaryCtrl",["$scope","$rootScope","Perm","$state",function(e,t,n,a){e.multiple_locations=[t.location],e.$on("updateProfileUrl",function(t,n){e.user.profile_url=n}),e.select_locations_text="Select All",e.toggleLocations=function(){e.multiple_locations.length==e.locations.length?e.multiple_locations=[e.location]:e.multiple_locations=_.map(e.locations,function(e){return e}),t.$broadcast("updateMultipleLocations",e.multiple_locations)},e.refreshSelectButton=function(){e.multiple_locations.length==e.locations.length?e.select_locations_text="Deselect All":e.select_locations_text="Select All"},e.setMultipleLocation=function(n){var a=e.multiple_locations.indexOf(n);-1!=a?e.multiple_locations.length>1&&e.multiple_locations.splice(a,1):e.multiple_locations.push(n),t.$broadcast("updateMultipleLocations",e.multiple_locations)},e.$on("updateMultipleLocations",function(n,a){e.multiple_locations=a,1==a.length&&(t.location=a[0]),e.refreshSelectButton()}),n.perm_promise.then(function(){e.multiple_locations=[t.location],-1!=["app.analytics","app.payments.analytics"].indexOf(a.current.name)&&t.$broadcast("updateMultipleLocations",e.multiple_locations)}),e.$on("loc_change",function(){-1!=["app.analytics","app.payments.analytics"].indexOf(a.current.name)&&t.$broadcast("updateMultipleLocations",e.multiple_locations)})}]),App.controller("navBarCtrl",["$scope","$cacheFactory","$rootScope",function(e,t,n){e.cacheNavBar=t.get("navBar")||t("navBar"),e.cacheNavBar.put("more",[]),e.add_to_more=function(t){var n=e.cacheNavBar.get("more");-1===n.indexOf(t)&&(n.push(t),e.cacheNavBar.put("more",n))},e.remove_from_more=function(t){var n=e.cacheNavBar.get("more"),a=n.indexOf(t);a>-1&&n.splice(a,1),e.cacheNavBar.put("more",n)},e.is_in_more=function(t){if(e.cacheNavBar.get("more")){return-1!==e.cacheNavBar.get("more").indexOf(t)}},e.count_more=function(){if(e.cacheNavBar.get("more"))return e.cacheNavBar.get("more").length},e.is_hidden=function(e){return e.hasOwnProperty("show_when_enlive_enabled")?!n.location.enlive_enabled:!!e.hasOwnProperty("hide_when_enlive_enabled")&&n.location.enlive_enabled}}]),App.controller("notificationTabCtrl",["$api","$rootScope","$scope","authService","responseHelper","Notification","Perm","$interval","SERVER_BASE_URL","$http","$state","$document",function(e,t,n,a,i,o,s,r,l,c,p,d){n.result={},n.notifs={apptreqs:[],messages:[],checkins:[]},n.count={},n.total={},n.stickytab=null,n.toggleStickyTab=function(e){e==n.togglestickytab?n.stickytab=null:n.stickytab=e},n.bodyOverflowToggle=function(){d[0].body.classList.toggle("overflow-hidden")},n.searchPatients=function(t){return e("GET","/patient_searches",{name:t,provider_ids:n.doctorIds}).then(function(e){return e.data.data.map(function(e){return e})})},n.onSelect=function(e,t){p.go("app.patient.activity",{id:e.id})},n.clearNotifs=function(t){n.count[t]=0,e("POST","/clear_notifs",{type:t,"provider_ids[]":n.doctorIds}).then(function(){},function(){})},n.apptsMenuRefresh=function(){n.apptsmenu={past:[],future:[]}},n.apptsMenuRefresh(),n.getNotifications=function(){var e={"provider_ids[]":n.doctorIds,timezone:t.timezone};void 0!==n.now&&(e.since=n.now);var a=o.$search(e);a.$then(function(){nobj=a.$response.data.data[0],n.now=nobj.now,n.dtbegin=nobj.dtbegin,n.dtend=nobj.dtend,n.total.apptreqs=nobj.counts.apptreqs,n.count.apptreqs=nobj.counts.apptreqs,n.count.checkins=nobj.counts.checkins,n.count.messages=nobj.counts.messages,void 0===e.since?(n.notifs.apptreqs=nobj.activities.apptreqs,n.notifs.messages=nobj.activities.messages,n.total.checkins=nobj.activities.checkins.length,n.total.messages=n.notifs.messages.length,n.apptsMenuRefresh()):(n.notifs.apptreqs=n.notifs.apptreqs.concat(nobj.activities.apptreqs),n.notifs.messages=n.notifs.messages.concat(nobj.activities.messages),n.total.checkins=n.total.checkins+nobj.activities.checkins.length,n.total.messages=n.total.messages+n.notifs.messages.length),_.each(nobj.activities.checkins,function(e){now=moment(),e.moment_time=moment(e.start_time),e.moment_time<=now?n.apptsmenu.past.push(e):n.apptsmenu.future.push(e)}),sortNotifications()})},n.$on("replaceEvents",function(e,t){_.each(t,function(e){_.each(["past","future"],function(t){_.each(n.apptsmenu[t],function(t){t.id==e.id&&(t.start_time=e.start_time,t.end_time=e.end_time,t.note=e.note,t.status=e.status,t.confirmed=e.confirmed,t.patient_missed=e.patient_missed,t.checkin_at=e.checkin_at,t.cancelled=e.cancelled,t.paid=e.paid)})}),n.removeApptReq(e.id)})}),n.$on("cancelEvents",function(e,t){_.each(t,function(e){_.each(["past","future"],function(t){_.each(n.apptsmenu[t],function(t){t.id==e&&(t.status="cancelled",t.cancelled=!0)})}),n.removeApptReq(e)})}),n.$on("addEvent",function(e,t){n.onRefresh()}),n.$on("markApptPaid",function(e,t){_.each(["past","future"],function(e){_.each(n.apptsmenu[e],function(e){e.id==t&&(e.paid=!0)})})}),n.$on("apptConfirmed",function(e,t){_.each(["past","future"],function(e){_.each(n.apptsmenu[e],function(e){e.id==t.id&&(e.status=t.status,e.confirmed=t.confirmed)})}),n.removeApptReq(t.id)}),n.removeApptReq=function(e){var t=_.findIndex(n.notifs.apptreqs,function(t){return t.id==e});return-1!=t?(n.total.apptreqs=n.total.apptreqs-1,n.notifs.apptreqs.splice(t,1),sortNotifications(),!0):(sortNotifications(),!1)},n.onRefresh=function(){},n.$on("$destroy",function(){r.cancel(n.interval)}),sortNotifications=function(){_.each(["past","future"],function(e){n.apptsmenu[e]=_.sortBy(n.apptsmenu[e],"start_time")})},s.perm_promise.then(function(){var e;e=s.has_locations.length>1?s.friends({ids:!0,all_locations:!0}):s.friends({ids:!0}),n.doctorIds=e.ids,n.onRefresh()})}]),App.controller("onlineBookingCtrl",["$scope","$stateParams","Perm","$state",function(e,t,n,a){n.perm_promise.then(function(){e.redirectUnlessCanAccessTab("online_booking"),_.includes(["app.online_booking_dashboard","app.online_booking_dashboard.activities"],a.current.name)&&a.go("app.online_booking_dashboard.patients",t,{reload:!0})})}]),App.controller("onlineBookingCustomizationCtrl",["$controller","AppointmentCategory","$rootScope","$scope","Perm","$api","responseHelper","editableOptions","editableThemes","FileUploader","authService","SERVER_BASE_URL","SweetAlert","APP_COLORS","ngDialog","NgTableParams","$state",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u,g,f,h){e("onlineBookingSharedCtrl",{$scope:a}),r.theme="bs3",l.bs3.inputClass="input-sm",l.bs3.buttonsClass="btn-sm",l.bs3.submitTpl='<button type="submit" class="btn btn-success"><span class="fa fa-check"></span></button>',l.bs3.cancelTpl='<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span class="fa fa-times text-muted"></span></button>',a.minutes_options=_.range(5,245,5),a.appt_categories_loading=!0,a.removing_appt_category={},a.uploading_member_logo={},a.member_appt_categories_saving={},a.members_status_active="Active",a.members_status_inactive="Inactive",a.members_statuses=[a.members_status_active,a.members_status_inactive],a.working_hours_options_every_day="Every day",a.working_hours_options=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],resetSearchWorkingHours=function(){a.search_working_hours={page:1,per_page:15,hit_end:!0}},resetSearchWorkingHours(),responseHelperMsg=function(e){e.$response=e,s.redirectOrToastOnResp(e)},i.perm_promise.then(function(){setLocation(),setLogoUploader(),setMemberLogoUploader(),setLogo(),a.providers_meta_types=n.providers_meta_types,a.appointment_types_editor=i.can_access_tab("appointment_types"),loadApptCategories()}),a.$on("loc_change",function(){setLocation(),setLogoUploader(),setMemberLogoUploader(),setLogo(),loadApptCategories()}),loadApptCategories=function(){a.appt_categories_loading=!0,appt_categories_req=t.$search(locationParams()),appt_categories_req.$finally(function(){a.appt_categories=appt_categories_req.$response.data.data,a.appt_categories_loading=!1,loadMembers(onMembersLoadSuccess),setMemberLogoUploader()})},setLocation=function(){a.location=n.location,a.location_appt_types_map_by_operatory=a.location.appt_types_map_by_operatory,a.memberIsOperatory()?(a.member_wording="operatory",a.members_wording="operatories"):(a.member_wording="provider",a.members_wording="providers"),a.loaddocs()},a.loaddocs=function(){a.doctors=i.friends({ids:!0,no_self:!0,location_id:a.location.id}).result},setLogo=function(){!0===n.institution.enable_logo_by_location?(a.parentForLogo=a.location,a.logoUrl="locations"):(a.parentForLogo=n.institution,a.logoUrl="institutions"),"/images/missing.png"==a.parentForLogo.wlogo?a.logo_missing=!0:a.logo_missing=!1},setLogoUploader=function(){a.logo_uploader=setFileUploader(),a.logo_uploader.onBeforeUploadItem=function(){a.uploading_logo=!0},a.logo_uploader.onSuccessItem=function(e,t,n,i){a.parentForLogo.wlogo=t.data.wlogo,a.uploading_logo=!1,setLogo()},a.logo_uploader.onErrorItem=function(e,t,n,i){a.uploading_logo=!1},a.logo_uploader.onAfterAddingFile=function(e){e.url=d+"/"+a.logoUrl+"/"+a.parentForLogo.id+"/set_image?subdomain="+p.getUserSubdomain(),e.upload()}},setFileUploader=function(){return new c({headers:{Authorization:p.getUserAuthorization().auth},formData:[{}],autoUpload:!1,removeAfterUpload:!0,options:{autoUpload:!1}})},a.addApptCategory=function(){a.appt_categories.push(t.$build({minutes:15}))},a.rememberApptCategoryState=function(e,t){e["initial_"+t]=e[t]},baseApptCategoriesUrl=function(){return"/appointment_categories/"},a.saveApptCategory=function(e,t,n){if(n&&(e["initial_"+t]=n),opts={},opts[t]=e[t],e.id)requestType="PUT",requestUrl=baseApptCategoriesUrl()+e.id;else if(requestType="POST",requestUrl=baseApptCategoriesUrl(),"name"==t)opts.minutes=e.minutes;else if("minutes"==t&&!e.name)return;o(requestType,requestUrl,locationParams({appt_category:opts})).then(function(n){n.data.code?(e.id=n.data.data.id,e["initial_"+t]=null,"name"==t&&loadMembers(onMembersLoadSuccess)):e[t]=e["initial_"+t],responseHelperMsg(n)})},a.removeApptCategory=function(e){if(!e.id)return void _.remove(a.appt_categories,function(t){return t.name==e.name&&t.minutes==e.minutes});dialog=n.confirm_modal({text:"Are you sure you want to delete this appointment type?<br/> Note, it will be unassigned from all "+a.members_wording+" and existing appointments.<br>TIME_SLOTS_ smart commands in templates and campaigns will be replaced with a location booking link",custom_confirm:"Delete"}),dialog.closePromise.then(function(t){1==t.value&&(requestUrl=baseApptCategoriesUrl()+e.id,a.removing_appt_category[e.id]=!0,o("DELETE",requestUrl,locationParams()).then(function(t){a.removing_appt_category[e.id]=!1,t.data.code&&(_.remove(a.appt_categories,function(t){return t.id==e.id}),loadMembers(onMembersLoadSuccess)),responseHelperMsg(t)}))})},locationParams=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return n.institution.is_appt_categories_location_specific&&(e.location_id=n.location.id),e},a.toggleMapApptTypesByOperatory=function(){a.location_appt_types_map_by_operatory=!a.location_appt_types_map_by_operatory,a.location.appt_types_map_by_operatory?title="Turn off":title="Turn on",title+=" map appointment types by operatory?",dialog=n.confirm_modal({title:title,text:"Are you sure you want to change your online booking format? This will require you to setup your online booking again.",custom_confirm:"Change online booking format"}),a.map_appt_types_by_operatory_loading=!0,dialog.closePromise.then(function(e){1==e.value?o("PUT","/locations/"+a.location.id,{},{appt_types_map_by_operatory:a.location_appt_types_map_by_operatory}).then(function(e){a.location.appt_types_map_by_operatory=a.location_appt_types_map_by_operatory,n.location.appt_types_map_by_operatory=a.location.appt_types_map_by_operatory,s.redirectOrToastOnResp({$response:e},h.current.name,null,{},!0)}):a.location_appt_types_map_by_operatory=!a.location_appt_types_map_by_operatory,a.map_appt_types_by_operatory_loading=!1})},a.insurancesPopup=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;opts={template:"/app/views/online-booking-dashboard/tabs/customization/insurances.html",className:"ne__modal ne__modal--online-booking--insurances",controller:"onlineBookingInsurances",scope:a},e&&(opts=_.merge(opts,{data:{provider:e}})),g.open(opts)},a.updateUserType=function(e,t){e.utype=t,opts={provider:e},o("PUT","/"+a.members_wording+"/"+e.id,{},opts).then(function(e){responseHelperMsg(e)})},onMembersLoadSuccess=function(){_.each(a.members,function(e){e.display_name&&e.display_name.length||(e.display_name=e.name),a.memberIsOperatory()?e.active?e.status=a.members_status_active:e.status=a.members_status_inactive:e.provider_requestables&&_.filter(e.provider_requestables,function(e){return e.location_id==a.location.id}).length?e.status=a.members_status_active:e.status=a.members_status_inactive,e.appt_categories_dropdown_shown=!1,setInitialApptCategories(e),a.formatWorkingHours(e)})},a.formatWorkingHours=function(e){a.formatWorkingHoursData(e.working_hours),a.setInitialWorkingHours(e)},a.formatWorkingHoursData=function(e){return e?(_.each(e,function(e){"nex"!=e.foreign_id_type&&(e.non_editable=!0),a.formatWorkingHoursDates(e),a.enableWorkingHoursToggles(e),a.setWorkingHourLabel(e)}),e):e},
a.formatWorkingHoursDates=function(e){e.begin_time&&(e.begin_time_in_tz=convertTzAndSplitDate(e.begin_time)),e.end_time&&(e.end_time_in_tz=convertTzAndSplitDate(e.end_time))},convertTzAndSplitDate=function(e){return datetime_in_tz=moment.tz(e,n.timezone),{date:datetime_in_tz.format("YYYY-MM-DD"),hour:datetime_in_tz.format("hh"),minute:datetime_in_tz.format("mm"),meridian:datetime_in_tz.format("A")}},a.enableWorkingHoursToggles=function(e){e.misc&&e.misc.on_date&&(e.toggle_on_date=!0),e.misc&&e.misc.every&&(e.toggle_every=!0)},a.setInitialWorkingHours=function(e){e.initial_working_hours=angular.copy(e.working_hours)},a.setWorkingHourLabel=function(e){return e.toggle_on_date&&e.misc&&e.misc.on_date?void(e.label_members_table=moment(e.misc.on_date,"YYYY-MM-DD").format("D MMM, YYYY")):e.toggle_every?void(a.isRepeatedEveryDay(e)?e.label_members_table=a.working_hours_options_every_day:e.toggle_every&&e.misc&&e.misc.every&&e.misc.every.ref&&(e.label_members_table=moment(e.misc.every.ref,"YYYY-MM-DD").format("D MMM, YYYY"))):(e.misc&&e.misc.days&&e.misc.days.length?(weekdays=_.map(e.misc.days,function(e){return getShortWeekdayName(e)}),label_members_table=weekdays.join(", "),label=label_members_table):(label_members_table=getShortWeekdayName(e.day),label=e.day),e.label_members_table=label_members_table,void(e.label=label))},getShortWeekdayName=function(e){return weekday_index=moment.weekdays().findIndex(function(t){return t==e}),short_weekday=moment.weekdaysShort()[weekday_index],short_weekday},a.isRepeatedEveryDay=function(e){return e.misc&&e.misc.every&&"day"==e.misc.every.unit&&1==e.misc.every.num},a.workingHoursPopup=function(e,t){t.preventDefault(),t.stopPropagation(),a.workingHoursDialog=g.open({template:"/app/views/online-booking-dashboard/tabs/customization/members/working_hours_popup.html",className:"ne__modal ne__modal--online-booking",data:{member:e,doctors:a.doctors},controller:"providerWorkingHours",scope:a}),a.workingHoursDialog.closePromise.then(function(t){resetSearchWorkingHours(),e.working_hours=angular.copy(e.initial_working_hours)})},setInitialApptCategories=function(e){e.appt_categories_dropdown_list=[],_.each(a.appt_categories,function(t){new_cat=angular.copy(t),e.appt_categories_dropdown_list.push(new_cat),_.includes(_.map(e.appt_categories,"id"),new_cat.id)&&(new_cat.isChecked=!0)}),e.initial_appt_categories_dropdown_list=angular.copy(e.appt_categories_dropdown_list)},a.apptCategoriesPopupToggle=function(e,t){t.preventDefault(),t.stopPropagation(),e.appt_categories_dropdown_shown=!e.appt_categories_dropdown_shown,e.appt_categories_dropdown_shown||a.member_appt_categories_saving[""+e.id]||resetMemberApptCategoriesDropdown(e)},resetMemberApptCategoriesDropdown=function(e){e.appt_categories_dropdown_list=angular.copy(e.initial_appt_categories_dropdown_list)},checkedApptCategories=function(e){return _.filter(e.appt_categories_dropdown_list,function(e){return e.isChecked})},a.removeMemberApptCategory=function(e,t){appt_category_from_dropdown=_.filter(e.appt_categories_dropdown_list,function(e){return e.id==t})[0],appt_category_from_dropdown&&(appt_category_from_dropdown.isChecked=!1,a.saveMemberApptCategories(e))},a.saveMemberApptCategories=function(e){a.member_appt_categories_saving[""+e.id]=!0,e.appt_categories_dropdown_shown=!1,appt_categories=checkedApptCategories(e),e.appt_categories=angular.copy(appt_categories),appt_categories_ids=_.map(appt_categories,"id"),appt_categories_ids.length||(appt_categories_ids=[""]),saveOpts={appt_categories_ids:appt_categories_ids},onSuccessAndError=function(){a.member_appt_categories_saving[""+e.id]=!1},onSuccess=function(){setInitialApptCategories(e)},onError=function(){resetMemberApptCategoriesDropdown(e),e.appt_categories=checkedApptCategories(e),e.appt_categories_dropdown_shown=!0},saveMember(e,saveOpts,onSuccess,onError,onSuccessAndError)},a.apptCategoriesSortOptions={update:function(e,t){"can't be moved"==t.item.sortable.model&&t.item.sortable.cancel()},stop:function(e,t){a.appt_categories.forEach(function(e,t){t+1!==e.position&&(e.position=t+1,a.saveApptCategory(e,"position"))})}},setMemberLogoUploader=function(){a.member_logo_uploader=setFileUploader(),a.member_logo_uploader.onBeforeUploadItem=function(e){a.uploading_member_logo[e.id]=!0},a.member_logo_uploader.onSuccessItem=function(e,t,n,i){a.uploading_member_logo[e.id]=!1,member=_.find(a.members,function(t){return t.id===e.id}),member.profile_url=t.data.profile_url},a.member_logo_uploader.onErrorItem=function(e,t,n,i){a.uploading_member_logo[e.id]=!1},a.member_logo_uploader.onAfterAddingFile=function(e){e.url=d+"/"+a.members_wording+"/"+e.id+"/set_image?subdomain="+p.getUserSubdomain(),e.upload()}},a.rememberMemberName=function(e){e.initial_display_name=e.display_name},a.saveMemberName=function(e){if(!e.display_name||!e.display_name.trim().length)return e.display_name=e.initial_display_name,noMemberNameError();saveOpts={display_name:e.display_name},onSuccess=function(){e.initial_display_name=null},onError=function(){e.display_name=e.initial_display_name},saveMember(e,saveOpts,onSuccess,onError)},noMemberNameError=function(){m.swal({title:"",text:"Please set the "+a.member_wording+"'s name",type:"error",confirmButtonColor:"#DCDEDF"})},a.saveProviderMetaType=function(e,t){e.initial_meta_type=e.meta_type,e.meta_type=t,saveOpts={meta_type:e.meta_type},onSuccess=function(){e.initial_meta_type=null},onError=function(){e.meta_type=e.initial_meta_type},saveMember(e,saveOpts,onSuccess,onError)},a.saveMemberStatus=function(e,t){e.initial_status=e.status,e.status=t,a.memberIsOperatory()?saveOpts={active:e.status==a.members_status_active}:(e.initial_provider_requestables=e.provider_requestables,provider_requestables_opts=_.map(e.provider_requestables,function(e){return _.pick(e,"id","location_id","user_id")}),provider_requestables_opts.length||(provider_requestables_opts=[{location_id:a.location.id,user_id:e.id}]),e.status!=a.members_status_active&&_.each(provider_requestables_opts,function(e){e._destroy=!0}),saveOpts={provider_requestables_attributes:provider_requestables_opts}),onSuccess=function(t){e.initial_status=null,a.location.map_by_operatory&&a.location.appt_types_map_by_operatory||(e.provider_requestables=t.data.data.provider_requestables,e.initial_provider_requestables=e.provider_requestables)},onError=function(){e.status=e.initial_status,a.location.map_by_operatory&&a.location.appt_types_map_by_operatory||(e.provider_requestables=e.initial_provider_requestables)},saveMember(e,saveOpts,onSuccess,onError)},saveMember=function(e,t,n,i){var s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];opts={location_id:a.location.id},opts[a.member_wording]=t,o("PUT","/"+a.members_wording+"/"+e.id,opts).then(function(e){s&&s(),e.data.code?n(e):i(),responseHelperMsg(e)})},a.customizeFormPopup=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];opts={template:"/app/views/online-booking-dashboard/tabs/customization/forms.html",className:"ne__modal ne__modal--online-booking--insurances",controller:"onlineBookingForms",scope:a,preCloseCallback:function(e){return!0===e||(m.swal({title:"Are you sure you want to cancel?",text:"You will lose your work.",showCancelButton:!0,showConfirmButton:!0,confirmButtonColor:u.primary,confirmButtonText:"Yes, cancel",cancelButtonText:"No, nevermind",closeOnConfirm:!0,closeOnCancel:!0},function(e){e&&a.customFormDialog.close(!0)}),!1)}},a.customFormDialog=g.open(opts)}}]),App.controller("onlineBookingForms",["Perm","$scope","$rootScope","$api","responseHelper","ngDialog","SERVER_BASE_URL","authService","$timeout","SweetAlert","APP_COLORS","Form","CustomFormBuilder",function(e,t,n,a,i,o,s,r,l,c,p,d,m){setPaymentDropIn=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];t.preview_form=t.form,e?(t.braintree_wrapper="bt-drop-in-wrapper",t.braintree_dropin="bt-dropin"):(t.braintree_wrapper="bt-drop-in-wrapper-second",t.braintree_dropin="bt-dropin-second")},existingPaymentField=function(){return payments_field=t.custom_fields.filter(function(e){return"payments"==e.field_type&&!e._destroy})[0],!!payments_field},t.addNewField=function(e){"payments"==e.name&&existingPaymentField()||(t.custom_fields.push({field_type:e.name,field_label:e.label,is_required:!1,label:"",options:[],form_section:null,newly_added:!0}),"payments"==e.name&&(setPaymentDropIn(),m.start(t,t.form.id,!0)))},t.removeField=function(e){var n=t.custom_fields.indexOf(e);n>-1&&(t.custom_fields[n].id?t.custom_fields[n]._destroy=!0:t.custom_fields.splice(n,1))},t.addOption=function(e){e.options.push({label:"",placeholder:e.options.length+1})},t.removeOption=function(e,t){var n=e.options.indexOf(t);n>-1&&(e.options[n].id?e.options[n]._destroy=!0:e.options.splice(n,1))},formatCustomFields=function(){t.custom_fields=_.filter(t.custom_fields,function(e){if(e.id||!e._destroy)return e}),_.each(t.custom_fields,function(e){e.form_section=null,e.for_all_locations&&(e.all_locations_id=_.map(n.locations,"id"))})},saveFormAction=function(){formatCustomFields(),t.form.parent_id=t.form.parent.id,t.form.parent_type="Location",t.form.fields_attributes=t.custom_fields,t.form.fields_attributes.map(function(e){return e.options_attributes=e.options,e}),form_params={id:t.form.id,location_id:n.location.id,form:t.form};var e=void 0,o=void 0;form_params.form.id?(e="PUT",o="/forms/"+form_params.form.id):(e="POST",o="/forms/"),t.loading=!0,a(e,o,{},form_params).then(function(e){e.data.code?(t.form_errors=[],"function"==typeof t.closeThisDialog&&(t.closeThisDialog(!0),e.$response=e,i.redirectOrToastOnResp(e))):(t.loading=!1,t.form_errors=e.data.error)})},t.saveForm=function(){c.swal({title:"Are you sure you want to save?",text:"",showCancelButton:!0,showConfirmButton:!0,confirmButtonColor:p.primary,confirmButtonText:"Yes, save",cancelButtonText:"Cancel",closeOnConfirm:!0,closeOnCancel:!0},function(e){e&&saveFormAction()})},t.previewForm=function(){if(t.custom_fields.filter(function(e){return!e._destroy}).length<=0)return void c.swal({title:"There're no custom fields to preview.",type:"error"});t.preview=!0,t.form.fields=angular.copy(t.custom_fields).filter(function(e){return!e._destroy}).map(function(e){return e.options=e.options.filter(function(e){return!e._destroy}),e}),setPaymentDropIn(!0),opts={template:"/app/views/online-booking-dashboard/tabs/customization/form-preview.html",className:"ne__modal ne__modal--online-booking--insurances",controller:"patientFormCtrl",scope:t,data:{title:"Form Preview"}},o.open(opts)},t.is_inst_admin=e.is_inst_admin,t.initialize=function(){t.inst=n.institution,t.form_errors=null,t.field_types=[],t.custom_fields=[],t.form=null,t.showFieldOnMainPage=!0,t.loading=!0,form=d.$find(-1,{location_id:n.location.id,form_type:"online_booking"}),form.$finally(function(){t.loading=!1,form.$response.data.code?(t.field_types=form.$response.data.data.field_types,t.form=form.$response.data.data.form,t.custom_fields=form.$response.data.data.form.fields,t.user_id=form.$response.data.data.user_id,existingPaymentField()&&(setPaymentDropIn(),m.start(t,t.form.id,!0))):t.form_errors=form.$response.data.error})},t.initialize()}]),App.controller("onlineBookingInsurances",["Perm","$scope","$rootScope","$api","responseHelper","ngDialog","InsurancePlan","FileUploader","SERVER_BASE_URL","authService","$timeout",function(e,t,n,a,i,o,s,r,l,c,p){t.addEmptyInsurance=function(){t.provider?new_params={parent_id:t.provider.id,parent_type:"User"}:new_params={parent_id:n.location.id,parent_type:"Location"},t.insurance_plans.push({newly_added:!0}),t.no_visible_insurance_plans=!1},t.loadInsurances=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;e?search_params={name:e}:(t.loading=!0,search_params={online_booking_customization:!0},t.provider?search_params=_.merge(search_params,{provider_id:t.provider.id}):search_params=_.merge(search_params,{location_id:n.location.id}));var a=s.$search(search_params);return a.$promise.then(function(n){if(e)return a.$response.data.data;t.insurance_plans=a.$response.data.data,t.insurance_plans&&t.insurance_plans.length&&(t.no_visible_insurance_plans=!1),t.loading=!1})},t.onSelectInsurancePlan=function(e,n){e.newly_added=!0,e.id=n.id,e.name=n.name,t.no_visible_insurance_plans=!1},t.destroyInsurance=function(e){e._destroy=!0,_.filter(t.insurance_plans,function(e){return!e._destroy})[0]?t.no_visible_insurance_plans=!1:t.no_visible_insurance_plans=!0},t.saveInsurancePlans=function(){validateInsurancePlans()&&(t.insurance_plans_saving=!0,formatInsurancePlans(),t.provider?insurance_plans_params={provider_id:t.provider.id}:insurance_plans_params={location_id:n.location.id},insurance_plans_opts=_.map(t.insurance_plans,function(e){return _.pick(e,"id","name","all_locations_id","_destroy")}),insurance_plans_params=_.merge(insurance_plans_params,{insurance_plans:insurance_plans_opts}),a("POST","/insurance_plans/bulk_upload/",{},insurance_plans_params).then(function(e){e.data.code?"function"==typeof t.closeThisDialog&&t.closeThisDialog():t.uploading_errors=e.data.error,t.insurance_plans_saving=!1}))},validateInsurancePlans=function(){return validation=!0,_.each(t.insurance_plans,function(e){e._destroy||(errors=[],plans_by_name=_.filter(t.insurance_plans,function(t){return!t._destroy&&t.name&&e.name&&t.name.trim().length&&t.name.trim().toLowerCase()==e.name.trim().toLowerCase()}),plans_by_name.length>1&&errors.push("Please remove the duplicates"),errors.length&&(validation=!1,e.errors=errors))}),validation},formatInsurancePlans=function(){t.insurance_plans=_.filter(t.insurance_plans,function(e){if(e.id||!e._destroy)return e}),_.each(t.insurance_plans,function(e){e.for_all_locations&&(e.all_locations_id=_.map(n.locations,"id"))})},set_uploader=function(){uploader_url=l+"/insurance_plans/csv_upload?subdomain="+c.getUserSubdomain(),t.provider?form_data={provider_id:t.provider.id}:t.location?form_data={location_id:n.location.id}:form_data={},t.uploader=new r({url:uploader_url,headers:{Authorization:c.getUserAuthorization().auth},formData:[form_data],removeAfterUpload:!0,autoUpload:!1}),t.uploader.onSuccessItem=function(e,n,a,i){t.uploading=!1,t.attachment=null,n.code?(_.each(n.data,function(e){e.just_uploaded=!0,t.insurance_plans.unshift(e)}),t.no_visible_insurance_plans&&t.insurance_plans.length&&(t.no_visible_insurance_plans=!1),t.initialize(!0,!1),p(function(){t.uploading_errors=n.description},100)):t.uploading_errors=n.error},t.uploader.onBeforeUploadItem=function(e){t.uploading=!0},t.uploader.onErrorItem=function(e,n,a,i){t.uploading=!1,t.uploading_errors=n.error},t.uploader.onAfterAddingFile=function(e){t.attachment=e.file}},t.uploadCSV=function(){t.csv.for_all_locations&&t.uploader.queue[0].formData.push({all_locations_id:_.map(n.locations,"id")}),t.uploader.queue[0].upload()},t.is_inst_admin=e.is_inst_admin,t.ngDialogData&&t.ngDialogData.provider&&(t.provider=t.ngDialogData.provider),set_uploader(),t.initialize=function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t.uploading_errors=null,e?(t.activePill=0,n&&t.loadInsurances()):(t.csv={for_all_locations:!1},t.activePill=1)},t.initialize()}]),App.controller("onlineBookingPatientsCtrl",["$scope","$stateParams","$api","fileResponse","NgTableParams","Perm","$rootScope","$timeout","filterByDate","ngDialog",function(e,t,n,a,i,o,s,r,l,c){apptsOptsFilters=function(n,a,i){return a||(n.page=i.page(),n.per_page=i.count()),t.nex_only&&(n.nex_only=!0),t.has_braintree_payment_methods&&(n.has_braintree_payment_methods=!0),e.selected_statuses.length&&(patient_statuses=_.filter(e.selected_statuses,function(e){return"is_new_clients_patient"==e.attr}),patient_statuses.length&&1==patient_statuses.length&&(patient_status=patient_statuses[0],n[patient_status.attr]=patient_status.value),credit_card_status=_.find(e.selected_statuses,function(e){return"has_braintree_payment_methods"==e.attr}),credit_card_status&&(n[credit_card_status.attr]=credit_card_status.value)),e.created_at_start&&e.created_at_end&&(n.created_at_start=e.created_at_start.toISOString(),n.created_at_end=e.created_at_end.toISOString()),n},e.loadAppointments=function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return t?e.exporting=!0:e.loading=!0,opts={search_params:e.params,location_id:s.location.id,online_booking_patients:!0},opts=apptsOptsFilters(opts,t,i),api_path="/appointments",t&&(api_path+=".csv"),n("GET",api_path,opts).then(function(n){if(!t)return e.appointments=n.data.data,e.loading=!1,i.total(n.data.count),e.load_init=!0,e.load_statuses_init=!0,e.load_daterange_filter_init=!0,e.appointments;e.exporting=!1,a.download(n,"appointments.csv")})},filterStatuses=function(){e.selected_statuses=_.filter(e.statuses,function(e){return e.isChecked})},e.uncheckStatuses=function(){_.each(e.statuses,function(e){return e.isChecked=null}),filterStatuses()},e.chargePatientPopup=function(t){c.open({template:"/app/views/shared/payments/charge_patient.html",className:"ne__modal ne__modal--online-booking--insurances",controller:"chargePatientCtrl",scope:e,data:{appointment:t,hide_appt_fields:!0},trapFocus:!1})},e.loading=!0,initialize=function(){e.appointments=[],e.date_filter_wording="By appt created date",e.status_filter_wording="Filter",o.can_access_tab("payments","is_payments_tab_activated")&&(s.institution.is_payments_location_specific&&s.location.privileges.is_payments_braintree_account_setup||!s.institution.is_payments_location_specific&&s.institution.privileges.is_payments_braintree_account_setup)?e.can_access_payments=!0:e.can_access_payments=!1,e.statuses=[{name:"New Patients",value:!0,attr:"is_new_clients_patient"},{name:"Existing patients",value:!1,attr:"is_new_clients_patient"}],!t.has_braintree_payment_methods&&e.can_access_payments&&e.statuses.push({name:"Credit Card",value:!0,attr:"has_braintree_payment_methods"}),e.selected_statuses=[],e.load_init=!1,e.load_statuses_init=!1},o.perm_promise.then(function(){e.params={},initialize(),e.$on("loc_change",function(){initialize(),e.created_at_start&&e.created_at_end&&l.clearFilterDateRange(e),r(function(){e.tableParams.page(1),e.tableParams.reload()})}),e.$watch("params.name_dob_email",function(t,n){e.load_init?t!=n&&(e.tableParams.page(1),e.tableParams.reload()):e.load_init=!0},!0),e.tableParams=new i({count:25},{getData:function(t){return e.loadAppointments(!1,t)}}),l.initDateRangePicker(e),e.$watch("statuses",function(t,n){e.load_statuses_init?(filterStatuses(),e.tableParams.page(1),e.tableParams.reload()):e.load_statuses_init=!0},!0)})}]),App.controller("onlineBookingSharedCtrl",["$rootScope","$scope","Provider","Operatory","NgTableParams",function(e,t,n,a,i){t.search_member_params={},t.members_loading=!0,t.load_init=!1,t.memberIsOperatory=function(){return t.location&&t.location.map_by_operatory&&t.location.appt_types_map_by_operatory},t.membersTableParams=new i({},{getData:function(i){return t.load_init?(t.members_loading=!0,search_opts={location_id:e.location.id,page:i.page(),per_page:i.count()},search_params=_.extend(search_opts,t.search_member_params),!i.providers_only&&t.memberIsOperatory()?resp=a.$search(search_params):resp=n.$search(search_params),resp.$promise.then(function(e){return t.members_total_count=resp.$response.data.count,resp.$response&&resp.$response.data&&t.members_total_count&&i.total(t.members_total_count),t.members=resp.$response.data.data,i.onSuccess&&i.onSuccess(),t.members_loading=!1,t.members})):void(t.load_init=!0)}}),loadMembers=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t.membersTableParams.providers_only=n,t.membersTableParams.onSuccess=e,t.membersTableParams.reload()},t.$watch("search_member_params",function(e,n){e==n||!(e.search_name&&e.search_name.length>2)&&e.search_name&&e.search_name.length||(t.membersTableParams.page(1),t.membersTableParams.reload())},!0),t.$on("loc_change",function(){t.membersTableParams.page(1)})}]),App.controller("onlineBookingThirdPartyAnalyticsCtrl",["$controller","authService","$api","$scope","ngDialog","ClientAnalytic","Institution","$rootScope","Perm","$timeout","WEBAPP_BASE_URL",function(e,t,n,a,i,o,s,r,l,c,p){l.perm_promise.then(function(){a.providers=l.friends({no_self:!0}).result,a.init()}),a.init=function(){a.loading=!0,a.toEditGTM=!0,a.gtm_path="/google_tag_managers/",a.showGoogleTagManagerCode(),a.url_path="/custom_redirect_urls/",a.showURL()},hideLoading=function(){c(function(){a.loading=!1},10)},a.showGoogleTagManagerCode=function(){n("GET",a.gtm_path+r.institution.id,{remember_token:t.getAuth()}).then(function(e){void 0===e.data.data||0==e.data.data.length?a.toEditGTM=!0:(a.googleTagManagerCode=e.data.data,a.toEditGTM=!1)})},a.createGoogleTagManagerCode=function(e){a.googleTagManagerCode=e,n("POST",a.gtm_path,{id:r.institution.id,tag:a.googleTagManagerCode,remember_token:t.getAuth()}).then(function(e){a.toEditGTM=!1})},a.removeGoogleTagManagerCode=function(){n("DELETE",a.gtm_path+r.institution.id,{remember_token:t.getAuth()}).then(function(e){a.googleTagManagerCode="",a.toEditGTM=!0})},a.updateGoogleTagManagerCode=function(){a.toEditGTM=!0},a.custom_url_dialog=function(){i.open({template:"/app/views/modal/custom-url.html",className:"ne__modal"}).closePromise.then(function(e){lg("caught modal response",e)})},a.showURL=function(){n("GET",a.url_path+r.institution.id,{remember_token:t.getAuth()}).then(function(e){r.customUrls=e.data.data})},a.saveUrl=function(e,o,s,l){n("POST",a.url_path,{id:r.institution.id,location:s,provider:l,level:o,link_url:e,remember_token:t.getAuth()}).then(function(e){i.close(),a.showURL()})},a.removeUrl=function(e){n("DELETE",a.url_path+r.institution.id,{remember_token:t.getAuth(),clientID:e}).then(function(e){a.showURL()})}}]),App.controller("onlineBookingWidgetsCtrl",["$controller","$scope","$rootScope","Perm","$timeout","WEBAPP_BASE_URL",function(e,t,n,a,i,o){e("onlineBookingSharedCtrl",{$scope:t}),t.init_loading=!0,colors=["primary","secondary","tertiary","red","yellow"],a.perm_promise.then(function(){t.institution=n.institution,t.init_loading=!1,t.institution.is_appt_categories_location_specific&&(t.inst_is_appt_categories_location_specific=!0,t.initialize("location"),t.activeTab=1)}),t.initialize=function(e){t.loading=!0,t.current_tab=e,t.buttons={},"location"==e?(t.location=n.location,t.buttons[t.location.id]=generageButtons(t.location,"location"),hideLoading()):"providers"==e?loadMembers(onMembersLoadSuccess,!0):(t.buttons[t.institution.id]=generageButtons(t.institution,"institution"),hideLoading())},hideLoading=function(){i(function(){t.loading=!1},10)},generageButtons=function(e,n){return buttons=[],_.each(colors,function(a){switch(base_url=o+"/appt/"+t.institution.subdomain,n){case"institution":url=base_url;break;case"location":url=base_url+"/l,"+e.id+",h:y";break;case"provider":url=base_url+"/p,"+e.id+",h:y"}button='\n        <a href="'+url+"\" target='_blank' style='text-decoration: none;'>\n          <img alt='Book Now' src=\"https://storage.googleapis.com/nexassets/embed-button/button-"+a+".svg\" style='border: 0; margin: 0.25em;'/>\n        </a>",buttons.push(button)}),buttons},onMembersLoadSuccess=function(){_.each(t.members,function(e){t.buttons[e.id]=generageButtons(e,"provider")}),t.loading=!1},t.copyButtonCode=function(e,t,n){element=$("#button_"+e+"_"+t+"_"+n)[0],range=document.createRange(),range.selectNode(element),window.getSelection().removeAllRanges(),window.getSelection().addRange(range),document.execCommand("copy")},t.$on("loc_change",function(){t.initialize(t.current_tab)})}]),App.controller("addPatientCtrl",["$scope","Perm","responseHelper","Patient","authService","Doctor","$rootScope",function(e,t,n,a,i,o,s){e.loaddocs=function(){var n=t.friends({});e.doctors=n.result},t.perm_promise.then(function(){e.loaddocs(),e.$on("loc_change",function(){return e.loaddocs()})}),e.open=function(t){t.preventDefault(),t.stopPropagation(),e.opened=!0,e.dob=new Date(1970,0,1)},e.dob=null,e.dateOptions={formatYear:"yyyy",formatDay:"dd",formatMonth:"MM",startingDay:1},e.submitted=!1,e.validateInput=function(t,n){var a=e.form[t];return(a.$dirty||e.submitted)&&a.$error[n]},e.didClickOnSubmit=function(){if(e.submitted=!0,!e.form.$valid)return console.log("Not valid!!"),!1;console.log("Submitted!!",e.form);var t={account:{email:e.form.email.$viewValue,first_name:e.form.firstName.$viewValue,last_name:e.form.lastName.$viewValue,invited:!0,bio:{date_of_birth:e.form.dob.$viewValue,phone_number:e.form.number.$viewValue}},patient_conditions:{symptoms:null,known_conditions:null}};t.doctor={doctor_id:e.form.doctorId.$viewValue},console.log(t);var i=a.$build(t);i.$save(),i.$then(function(){n.redirectOrToastOnResp(i,"app.patients.patients")&&e.closeThisDialog()})},e.form=[{type:"section",htmlClass:"row",items:[{type:"section",htmlClass:"col-xs-12",items:["first_name","last_name","email","phone_number",{key:"date_of_birth",type:"date",validationMessage:"",placeholder:"Date of Birth",feedback:!1,disableErrorState:!0}]}]},{type:"submit",style:"btn-info",title:"Add patient"}],e.schema={type:"object",title:"Comment",properties:{first_name:{title:"First Name",type:"string",description:"Required"},last_name:{title:"Last Name",type:"string",description:"Required"},email:{title:"Email",type:"string",pattern:"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$",description:"Required"},date_of_birth:{title:"Date of Birth",type:"date",description:"Date of Birth"},phone_number:{title:"Phone Number",type:"integer",maxLength:10}},required:["first_name","last_name","email","date_of_birth","phone_number"]},e.model={},e.onSubmit=function(t){if(e.$broadcast("schemaFormValidate"),console.log(t),t.$valid){var i={account:{email:t.email.$viewValue,first_name:t.first_name.$viewValue,last_name:t.last_name.$viewValue,phone_number:parseInt(t.phone_number.$viewValue)},bio:{date_of_birth:t.date_of_birth.$viewValue},patient_conditions:{symptoms:null,known_conditions:null}};console.log(e.model),console.log(i);var o=a.$build(i);o.$save(),o.$then(function(){n.redirectOrToastOnResp(o,"app.patients.patients")&&e.closeThisDialog()})}}}]),App.controller("patientApptConfirmCtrl",["$scope","$http","$rootScope","LinkObfuscate","$stateParams",function(e,t,n,a,i){e.loading=!0;var o=a.$find(1,{code:i.code});o.$then(function(t){e.loading=!1,e.inst=t.inst,e.appt=t.obj,e.appt&&(e.loc=e.appt.location),e.appt.package_family_appts=_.includes(e.appt.nice_start_time_family_names,"<br"),e.dir=t.directions_link,o.code=i.code,o.action_type="appt_confirm",o.$save(["code","action_type"]).$then(function(e){console.log(e)})})}]),App.controller("patientApptConfirmNewCtrl",["$scope","$http","$rootScope","LinkObfuscate","$stateParams",function(e,t,n,a,i){e.loading=!0;var o=a.$find(1,{code:i.code,v2:!0});o.$then(function(t){e.loading=!1,e.inst=t.inst,e.appt=t.obj,e.appt&&(e.loc=e.appt.location),e.appt.package_family_appts=_.includes(e.appt.nice_start_time_family_names,"<br"),e.dir=t.directions_link,o.code=i.code,o.action_type="appt_confirm",o.v2=!0,o.$save(["code","action_type","v2"]).$then(function(e){console.log(e)})})}]),App.controller("apptPatientCtrl",["Perm","$scope","$rootScope","$stateParams","NgTableParams","Appointment",function(e,t,n,a,i,o){t.loading=!0,e.perm_promise.then(function(){t.$on("loc_change",function(){t.loading=!0,t.tableParams.page(1),t.tableParams.reload()}),t.tableParams=new i({},{getData:function(e){return t.loading=!0,resp=o.$search({page:e.page(),per_page:e.count(),cancelled:!0,location_id:n.location.id,patient_id:a.id}),resp.$promise.then(function(n){return t.appointments=resp.$response.data.data,t.loading=!1,e.total(resp.$response.data.count),t.appointments})}})}),t.$on("setParentApptPaid",function(e,n){_.each(t.appointments,function(e,a){if(e.id==n){var i=e;i.paid=!0,i.status="paid",t.appointments.splice(a,1,i)}})})}]),App.controller("editPatientCtrl",["$scope","Patient","responseHelper",function(e,t,n){e.patient=t.$find(e.ngDialogData.patient.id),e.save=function(){e.patient.$save(["email","id","bio"]),e.patient.$then(function(t){n.redirectOrToastOnResp(e.patient),"function"==typeof e.closeThisDialog&&e.closeThisDialog(!0)})}}]),App.controller("patientFormCtrl",["$scope","$stateParams","$controller","CustomFormBuilder",function(e,t,n,a){n("customFormCtrl",{$scope:e}),e.formSubmit=function(){return a.formSubmit(e)},a.start(e,t.formId||e.form.id,e.preview,!1,t.filterType,t.filterId)}]),App.controller("patientInviteCtrl",["$scope","$http","$api","$rootScope","authService","responseHelper","Appointment","Perm","SERVER_BASE_URL","APP_COLORS","Patient","Doctor",function(e,t,n,a,i,o,s,r,l,c,p,d){var m=this;e.loaddocs=function(){var t=r.friends({ids:!0,no_self:!0});e.doctors=t.result,e.doctorIds=t.ids},r.perm_promise.then(function(){e.loaddocs(),e.$on("loc_change",function(){return e.loaddocs()}),e.searchPatients=function(t){return n("GET","/patient_searches",{name:t,provider_ids:e.doctorIds}).then(function(e){return e.data.data.map(function(e){return e})})}}),e.open=function(t){t.preventDefault(),t.stopPropagation(),e.opened=!0,e.dob=new Date(1970,0,1)},e.dob=null,e.result={},e.dateOptions={formatYear:"yyyy",formatDay:"dd",formatMonth:"MM",startingDay:1},e.submitted=!1,e.validateInput=function(t,n){var a=m.form[t];return(a.$dirty||e.submitted)&&a.$error[n]},e.do_invite=function(e,t,n,i){a.$broadcast("invitePatient",e)},e.save_new_patient=function(){if(e.submitted=!0,!m.form.$valid)return console.log("Not valid!!"),!1;console.log("Submitted!!",m.form);var t={account:{email:m.form.email.$viewValue,first_name:m.form.firstName.$viewValue,last_name:m.form.lastName.$viewValue,invited:!0,bio:{date_of_birth:m.form.dob.$viewValue,phone_number:m.form.number.$viewValue}},patient_conditions:{symptoms:null,known_conditions:null}};t.doctor={doctor_id:m.form.doctorId.$viewValue,location_id:a.location.id},console.log(t);var n=p.$build(t);n.$save(),n.$then(function(){o.redirectOrToastOnResp(n,"app.patients.patients")&&e.closeThisDialog()})},e.model={},e.onSubmit=function(t){if(e.$broadcast("schemaFormValidate"),console.log(t),t.$valid){var n={account:{email:t.email.$viewValue,first_name:t.first_name.$viewValue,last_name:t.last_name.$viewValue,phone_number:parseInt(t.phone_number.$viewValue)},bio:{date_of_birth:t.date_of_birth.$viewValue},patient_conditions:{symptoms:null,known_conditions:null}};console.log(e.model),console.log(n);var a=p.$build(n);a.$save(),a.$then(function(){o.redirectOrToastOnResp(a,"app.patients.patients")&&e.closeThisDialog()})}}}]),App.controller("patientPaymentsOnlineMakePaymentCtrl",["$rootScope","$scope","$api","$state","$stateParams","Payment",function(e,t,n,a,i,o){t.payment_loading=!0,t.payment=i.payment,t.payment_id=i.paymentId,t.remember_token=i.rememberToken,t.is_online_widget=i.is_online_widget,t.institution_id=i.institutionId,t.location_id=i.location_id,paymentGet=function(){t.payment_loading=!0,t.payment=o.$find(t.payment_id,{institution_id:t.institution_id,remember_token:t.remember_token}),t.payment.$finally(function(){loadPaymentLogo(),t.payment.$response.data.code?t.payment.$response.data.data&&t.payment.$response.data.data.notification?t.payment.$response.data.description&&(t.payment_loading=!1,t.descriptions=t.payment.$response.data.description):"requested"!==t.payment.status&&"remind_sent"!==t.payment.status?(t.payment_loading=!1,clearErrors()):getBraintreeToken():t.payment.$response.error&&t.payment.$response.error[0]?t.errors=t.payment.$response.error:t.errors=t.payment.$response.data.error})},getBraintreeToken=function(){n("GET","/get_braintree_token",{institution_id:t.institution_id,location_id:t.payment.location_id,payment_id:t.payment.id,patient_id:t.payment.patient_id,remember_token:t.remember_token}).then(function(e){t.payment_loading=!1,e.data&&e.data.code&&e.data.data?(t.braintree_client_token=e.data.data.braintree_client_token,clearErrors(),generateBrainTreeForm()):t.errors=e.error})},t.createPayment=function(e){$("form#payment-form").hide(),clearErrors(),t.payment_loading=!0,
t.payment.method_nonce=e,t.payment.patient_id=t.payment.patient_id,t.payment.remember_token=t.remember_token,t.payment.institution_id=t.institution_id,t.payment.paid_via_online_widget=t.is_online_widget,t.payment.$save().$finally(function(){t.payment.$response.data.code?t.payment.$response.data.data&&t.payment.$response.data.data.notification?(t.payment_loading=!1,t.payment.$response.data.description&&(t.descriptions=t.payment.$response.data.description)):(clearErrors(),t.payment.$response.data.data&&t.payment.$response.data.data.id?(t.payment_id=t.payment.id,i.paymentId=t.payment_id,a.go("patient_make_payment.thank_you",{payment:t.payment,is_online_widget:t.is_online_widget,institutionId:t.institution_id,location_id:t.location_id})):t.payment_loading=!1):(t.payment_loading=!1,500==t.payment.$response.status?onErrors(["Something went wrong, please try again."]):onErrors(t.payment.$response.data.error))})},clearErrors=function(){t.errors=null},onErrors=function(e){t.payment_loading=!1,t.errors=e,generateBrainTreeForm()},generateBrainTreeForm=function(){document.getElementById("bt-dropin")?$("form#payment-form").show():(btDropInElement=document.createElement("div"),btDropInElement.id="bt-dropin",document.getElementById("bt-drop-in-wrapper").appendChild(btDropInElement),form=document.querySelector("#payment-form"),braintree.dropin.create({authorization:t.braintree_client_token,container:"#bt-dropin",paypal:{flow:"vault"}},function(e,n){form.addEventListener("submit",function(e){e.preventDefault(),n.requestPaymentMethod(function(e,n){e||t.createPayment(n.nonce)})})}))},t.goToHomePage=function(){t.is_online_widget?a.go("patient-payments-online.patient_search",{institutionId:t.institution_id,locationId:t.location_id}):a.go("home")},t.$on("patientPaymentsInstLoaded",function(e,n){t.is_online_widget&&!t.payment_id?(loadPaymentLogo(),getBraintreeToken()):paymentGet()}),loadPaymentLogo=function(){t.payment.location&&(t.location_id=t.payment.location.id),e.$broadcast("loadPaymentLogo",t.location_id)}}]),App.controller("patientPaymentsOnlineWidgetCtrl",["$rootScope","$scope","$api","$state","$stateParams","responseHelper","Patient","ActivatePatient","Payment",function(e,t,n,a,i,o,s,r,l){t.page_loading=!0,t.searchToVerifyPatient=function(){clearErrors(),t.page_loading=!0,n("POST","/patients/search_to_verify",{institution_id:t.institution_id,location_id:t.location_id,name:t.patient_form.name,email:t.patient_form.email,phone_number:t.patient_form.phone_number}).then(function(e){e=new Object({$response:e}),onResponse(e)})},onResponse=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"patient-payments-online.patient_verify",a=arguments[2];e.$response.data.code?(a||(a=successUriParams(),a.patient_form=t.patient_form,a.patient_id=e.$response.data.data.id),o.redirectOrToastOnResp(e,n,null,a)):(t.page_loading=!1,e.error&&e.error[0]?t.errors=e.error:t.errors=e.$response.data.error)},clearErrors=function(){t.errors=[]},t.resendActivationCode=function(){clearErrors(),t.patient_form.activation_code=null,t.page_loading=!0,patient=s.$new(t.patient_id),verify_phone=patient.verify_phone.$new(),verify_phone.institution_id=t.institution_id,verify_phone.location_id=t.location_id,verify_phone.phone_number=t.patient_form.phone_number,verify_phone.$save().$finally(function(e){onResponse(e),t.page_loading=!1})},t.verifyPatient=function(){clearErrors(),t.page_loading=!0,activate_patient=r.$new(t.patient_id),activate_patient.institution_id=t.institution_id,activate_patient.location_id=t.location_id,activate_patient.activation_code=t.patient_form.activation_code,activate_patient.$save().$finally(function(e){successUri=null,successParams={},e.$response.data.code&&(successUri="patient-payments-online.invoices_list",successParams=successUriParams(),successParams.patient_id=e.$response.data.data.id,successParams.rememberToken=e.$response.data.data.remember_token),onResponse(e,successUri,successParams)})},t.getInvoices=function(){t.page_loading=!0,t.payments=l.$search({institution_id:t.institution_id,location_id:t.location_id,patient_id:t.patient_id,remember_token:t.remember_token,"status[]":["requested","remind_sent"]}),t.payments.$finally(function(e){t.payments.$response.data.code?t.page_loading=!1:a.go("patient-payments-online.invoices_new",successUriParams())})},t.goToPatientPaymentPage=function(e){successParams=successUriParams(),successParams.paymentId=e,successParams.is_online_widget=!0,successParams.location_id=t.location_id,a.go("patient_make_payment.form",successParams)},t.createInvoice=function(){t.page_loading=!0,t.payment.institution_id=t.institution_id,t.payment.location_id||(t.location_id?t.payment.location_id=t.location_id:t.locs&&t.locs.length&&(t.payment.location_id=t.locs[0].id)),t.payment.patient_id=t.patient_id,t.payment.remember_token=t.remember_token,t.payment.formatted_amount="$"+t.payment.amount,t.locs&&t.locs.length&&(t.payment.location=_.filter(t.locs,function(e){return e.id==t.payment.location_id})[0]),t.payment.status="requested",successParams=successUriParams(),successParams.payment=t.payment,successParams.is_online_widget=!0,successParams.location_id=t.location_id,a.go("patient_make_payment.form",successParams)},t.apptDateUpdate=function(e){t.payment.appointment_date=moment(e).format("YYYY-MM-DD")},t.goToPatientSearch=function(e){opts={institutionId:t.institution_id,locationId:t.location_id},e&&(opts=_.merge(opts,{patient_form:e})),a.go("patient-payments-online.patient_search",opts)},successUriParams=function(){return{institutionId:t.institution_id,locationId:t.location_id,patient_id:t.patient_id,rememberToken:t.remember_token}},initialize=function(){if(t.inst){if(e.institution&&e.institution.privileges&&!e.institution.privileges.is_payments_online_widget_activated)return void a.go("home");t.patient_form=i.patient_form||{},t.institution_id=i.institutionId,t.location_id=i.locationId,t.patient_id=i.patient_id,t.remember_token=i.rememberToken,"patient-payments-online.patient_verify"!=a.current.name||t.patient_id?"patient-payments-online.invoices_list"==a.current.name?t.getInvoices():"patient-payments-online.invoices_new"==a.current.name?(t.page_loading=!1,t.payment=l.$new()):t.page_loading=!1:t.goToPatientSearch()}},t.$on("patientPaymentsInstLoaded",function(t,n){e.$broadcast("loadPaymentLogo"),initialize()}),initialize()}]),App.controller("patientPaymentsOnlineCtrl",["$rootScope","$state","$scope","Institution","$stateParams",function(e,t,n,a,i){"patient_make_payment_outdated"==t.current.name&&t.go("patient_make_payment.form",i,{reload:!0}),n.load_inst=function(){n.loading=!0,n.inst_resp=a.$find(i.institutionId,{with_privileges:!0,show_locations:!0}),n.inst_resp.$then(function(){n.inst=n.inst_resp.$response.data.data,e.institution=n.inst,n.locs=_.sortBy(n.inst.locations,"weight"),n.$broadcast("patientPaymentsInstLoaded")})},n.load_inst(),e.$on("loadPaymentLogo",function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.locationId;e.institution&&e.institution.enable_logo_by_location&&a&&(n.parentForLogo=_.filter(e.institution.locations,function(e){return e.id==a})[0]),n.parentForLogo||(n.parentForLogo=e.institution),n.loading=!1})}]),App.controller("patientPaymentsCtrl",["$controller","$scope","Patient","ngDialog",function(e,t,n,a){t.patients_tab=!0,e("paymentsHistoryCtrl",{$scope:t}),t.chargePatientPopup=function(){a.open({template:"/app/views/shared/payments/charge_patient.html",className:"ne__modal ne__modal--online-booking--insurances",controller:"chargePatientCtrl",data:{patient:t.patient},trapFocus:!1})}}]),App.controller("patientSubscriptionsCtrl",["$controller","$stateParams","Perm","$scope","responseHelper","Patient",function(e,t,n,a,i,o){a.subscriptions_loading=!0,e("patientsUnsubscribeCtrl",{$scope:a}),n.perm_promise.then(function(){a.patient=o.$find(t.id,{with_subscription:!0}),a.patient.$finally(function(){a.patient.$response.data.code?(a.errors=[],a.patient.unsubscribe_emails&&a.patient.unsubscribe_sms?a.unsubscribed_tab=!0:a.unsubscribed_tab=!1):a.errors=a.patient.$response.data.error,a.subscriptions_loading=!1})}),a.toggleSubscription=function(e,t){"emails"==t?e.unsubscribe_emails=!e.unsubscribe_emails:"sms"==t&&(e.unsubscribe_sms=!e.unsubscribe_sms),a.patient.subscription=e,a.patient.$save(["subscription"]).$finally(function(){i.redirectOrToastOnResp(a.patient)})}}]),App.controller("patientAppointmentSlotsWaitlistConfirmCtrl",["$scope","$stateParams","LinkObfuscate",function(e,t,n){e.loading=!0;var a=n.$find(1,{code:t.code});a.$then(function(n){e.inst=n.inst,e.appointment_slots_waitlist=n.obj,e.appointment_slots_waitlist&&(e.loc=e.appointment_slots_waitlist.location),e.dir=n.directions_link,a.code=t.code;var i=a.$save(["code"]);i.$then(function(){i.$response.data.code||(e.errors=i.$response.data.error),e.loading=!1})})}]),App.controller("patientCtrl",["$controller","Perm","$scope","$api","$stateParams","$state","responseHelper","Patient","$rootScope",function(e,t,n,a,i,o,s,r,l){n.editEmailMode=!1,n.editContactPhoneMode=!1,n.loadingEmailMode=!1,n.loadingContactPhoneMode=!1,t.perm_promise.then(function(){n.is_messages_page?n.redirectUnlessCanAccessTab("messages"):n.redirectUnlessCanAccessTab("patients"),n.canAccess=function(e){return t.can_access_tab(e)}}),e("paymentsActionsCommonCtrl",{$scope:n});var c=r.$find(i.id);c.$then(function(){n.patient=c,n.patient.initial_contact_email=n.patient.contact_email,setPatientPhoneNumbers(),updateTitle()}),setPatientPhoneNumbers=function(){n.patient.initial_custom_contact_number=n.patient.bio.custom_contact_number,phone_numbers=_.pick(n.patient.bio,"verified_mobile","phone_number","cell_phone_number","home_phone_number","work_phone_number"),phone_numbers_except_custom_contact=_.without(_.values(phone_numbers),n.patient.bio.custom_contact_number),n.patient.uniq_phone_numbers=_.uniq(_.compact(phone_numbers_except_custom_contact))},n.$on("$stateChangeSuccess",function(){n.patient&&updateTitle()}),updateTitle=function(){var e=l.currTitle,t=n.patient.name+"'s "+e;l.currTitle=t,document.title=t},n.onEditEmailMode=function(){n.show_conversations_list||(n.editEmailMode=!0)},n.updateEmail=function(){n.loadingEmailMode=!0,n.patient.$save(["contact_email","id"]),n.patient.$then(function(e){n.patient.$response.data.code?n.patient.initial_contact_email=n.patient.contact_email:n.patient.contact_email=n.patient.initial_contact_email,n.loadingEmailMode=!1,n.editEmailMode=!1,s.redirectOrToastOnResp(n.patient)})},n.cancelEmailUpdate=function(){n.editEmailMode=!1,n.patient.contact_email=n.patient.initial_contact_email},n.onEditContactPhoneMode=function(){n.show_conversations_list||(n.editContactPhoneMode=!0)},n.updateContactPhone=function(){n.loadingContactPhoneMode=!0,n.patient.$save(["bio","id"]),n.patient.$then(function(e){n.patient.$response.data.code?setPatientPhoneNumbers():n.patient.bio.custom_contact_number=n.patient.initial_custom_contact_number,n.loadingContactPhoneMode=!1,n.editContactPhoneMode=!1,s.redirectOrToastOnResp(n.patient)})},n.cancelContactPhoneUpdate=function(){n.editContactPhoneMode=!1,n.patient.bio.custom_contact_number=n.patient.initial_custom_contact_number},n.invite_modal=function(){l.is_blank(n.patient,"email")||l.is_blank(n.patient.bio,"phone_number")?l.message_modal({title:"Email and cell phone number missing",msg:"Sorry - we can't send an invite to a patient unless we have their cell phone number and email in the system!"}):l.send_patient_invite(n.patient.id)},n.searchResult={},n.searchPatients=function(e){return a("GET","/patient_searches",{name:e,provider_ids:n.doctorIds}).then(function(e){return e.data.data.map(function(e){return e})})},n.onSelectPatient=function(e,t){o.go(o.current.name,{id:e.id})}}]),App.controller("patientsUnsubscribeCtrl",["$scope","$rootScope","fileResponse","Perm","$controller","$timeout","$api","responseHelper",function(e,t,n,a,i,o,s,r){e.unsubscribed_tab=!0,i("patientsCtrl",{$scope:e}),e.downloadCSV=function(){e.downloading=!0,subParams=JSON.stringify(e.params);var t={all:!0,per_page:100,params:JSON.stringify(Object.assign(e.params,{unsubscribed:!0}))};return s("GET","/patients.csv",t).then(function(t){e.downloading=!1,n.download(t)})},e.updateSubscriptions=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];loadingTimeout=o(function(){e.loading=!0},300),s("PUT","/patients/"+t.id,{},{patient:_.pick(t,["id","unsubscribe_emails","unsubscribe_sms"])}).then(function(a){o.cancel(loadingTimeout),e.loading=!1,a.$response=a,r.redirectOrToastOnResp(a),n&&(t.unsubscribe_emails&&t.unsubscribe_sms||(e.unsubscribed_tab=!1))})}}]),App.controller("patientsCtrl",["$scope","$http","$q","$state","$stateParams","$location","authService","responseHelper","NgTableParams","Patient","Perm","ngDialog","SERVER_BASE_URL","$rootScope",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u){e.loading=!0,PARAM_FILTERS=["waitlisted_at","missed_last_appt","unpaid_appts","nextappt"],"app.patients"===a.current.name&&a.go("app.patients.patients",i),e.chfilter=function(t){e.params.filter==t?e.params.filter="all":e.params.filter=t},e.togglefilter=function(t){e.params[t]=!e.params[t],e.params[t]&&_.each(PARAM_FILTERS,function(n){n!=t&&(e.params[n]=!1)})},e.filterdocids=function(){provs_ids=_.map(_.filter(e.providers,"isChecked"),function(e){return e.id}),e.providers_ids=provs_ids,e.params.providers=provs_ids},e.check_providers=function(t){"all"==t?_.each(e.providers,function(e){return e.isChecked=!0}):"none"==t&&_.each(e.providers,function(e){return e.isChecked=null}),e.filterdocids()};s.getUserSubdomain();e.didClickOnOpenPatientForm=function(){d.open({template:"/app/views/add-patient.html",controller:"addPatientCtrl",scope:e,className:"ngdialog-theme-default"}).closePromise.then(function(){e.tableParams.reload()})},e.setPage=function(t){e.currentPage=t},e.maxSize=5,e.bigTotalItems=175,e.bigCurrentPage=1,e.deferred_prov_load=n.defer(),e.tableParams=new l({},{getData:function(t){return e.deferred_prov_load.promise.then(function(){e.unsubscribed_tab&&e.params.name_dob_email&&e.params.name_dob_email.length?delete e.params.unsubscribed:e.unsubscribed_tab&&(e.params.unsubscribed=!0),e.loading=!0,e.noPatients=!1;var n=c.$search({page:t.page(),per_page:t.count(),params:e.params});return n.$promise.then(function(a){var i=n.$response.data.data[0].patients;return 0===i.length?e.noPatients=!0:e.noPatients=!1,e.loading=!1,t.total(n.$response.data.data[0].count),i})})}}),e.reset_params=function(){e.unsubscribed_tab?e.params={location_id:u.location.id,unsubscribed:!0}:(e.params={filter:"all",nocheckinsince_num:2,nextappt_num:2,location_id:u.location.id},e.filterdocids())},e.loaddocs=function(){e.providers=p.friends({no_self:!0}).result,e.providers=_.sortBy(e.providers,function(e){return e.display_name||e.name}),_.each(e.providers,function(e){return e.isChecked=null})},e.$on("loc_change",function(){e.loaddocs(),e.params.location_id=u.location.id,e.tableParams.reload()}),e.load_init=!1,e.doc_id_watch_inited=!1,p.perm_promise.then(function(){e.redirectUnlessCanAccessTab("patients"),e.loaddocs(),e.reset_params(),e.$watch("providers",function(t,n){e.filterdocids()},!0),e.$watch("params",function(t,n){e.load_init?(e.tableParams.page(1),e.tableParams.reload()):e.load_init=!0},!0),e.loading=!1,e.deferred_prov_load.resolve(!0)})}]),App.controller("paymentLandingCtrl",["$scope",function(e){e.inst={logo_wide:"https://s3.amazonaws.com/nexhealth-images-production/institutions/widelogos/000/000/007/medium/IPA7D4b.png",name:"National Dental"},e.invoice=[{id:"1",appt_date:"2017-09-26T18:16:38.238Z",reason:"General Consultation",status:"Unpaid",amount:"50"}]}]),App.controller("paymentsActionsCommonCtrl",["$scope","Payment","$timeout","responseHelper",function(e,t,n,a){e.paymentStatusUpdate=function(i,o){loadingTimeout=n(function(){e.payment_loading=o},100),payment=t.$new(o),status_update=payment.status_update.$new(),status_update.status=i,status_update.$save().$then(function(t){t.$response.data.code&&(history_payment_to_update=e.payments.filter(function(e){return e.id==o})[0],history_payment_to_update&&(data=t.$response.data.data,history_payment_to_update.status=data.status,history_payment_to_update.reminded_count=data.reminded_count,history_payment_to_update.paid_at_with_tz=data.paid_at_with_tz,history_payment_to_update.status_updated_at_with_tz=data.status_updated_at_with_tz)),a.redirectOrToastOnResp(status_update),e.payment_loading=!1,n.cancel(loadingTimeout)})}}]),App.controller("paymentsAddCtrl",["$scope","$rootScope","Payment","Patient","responseHelper",function(e,t,n,a,i){e.payment=n.$build(),e.searchPatients=function(e){var n=a.$search({page:1,per_page:10,params:{location_id:t.location.id,name_dob_email:e}});return n.$promise.then(function(e){return n.$response.data.data[0].patients.map(function(e){return e})})},e.onSelectPatient=function(t){e.payment.patient_id=t.id},e.apptDateUpdate=function(t){e.payment.appointment_date=moment(t).format("YYYY-MM-DD")},e.createPayment=function(){e.loading=!0,e.payment.institution_id=t.institution.id,e.payment.location_id=t.location.id,e.payment.$save(),e.payment.$finally(function(){e.payment.$response.data.code?(e.errors=null,i.redirectOrToastOnResp(e.payment,"app.payments.payment-history","app.payments.payment-history")):(e.loading=!1,e.payment.$response.error&&e.payment.$response.error[0]?e.errors=e.payment.$response.error:e.errors=e.payment.$response.data.error)})}}]),App.controller("paymentsAnalyticsCtrl",["$scope","$rootScope","$api","Perm","angularChart",function(e,t,n,a,i){e.load_init=!0,e.chart_loading=!0,e.braintree_loading=!0,initStatDates=function(){e.current_last_days=!0,start_date=moment().subtract(6,"d"),end_date=moment(),start_date=moment.tz(start_date,t.timezone),end_date=moment.tz(end_date,t.timezone),e.stat_date_range={startDate:start_date,endDate:end_date}},setGrowthChartConfig=function(){chartsOpts=i.setGrowthChartConfig(!1,"$"),e.growthChartColors=chartsOpts[0],e.growthChartOptions=chartsOpts[1],e.date_range_options=i.fullDateRangeOptions(),e.date_range_options.eventHandlers={"apply.daterangepicker":function(t,n){setDatesWithTimezones(t.model.startDate,t.model.endDate),loadAnalytics(),e.current_last_days=!1}}},setDatesWithTimezones=function(n,a){date_start=moment(n).startOf("day"),date_end=moment(a).endOf("day"),date_offset=date_start.utcOffset(),date_start=moment.tz(date_start,t.timezone),date_start.add(date_offset-date_start.utcOffset(),"minutes"),date_end=moment.tz(date_end,t.timezone),date_end.add(date_offset-date_end.utcOffset(),"minutes"),e.stat_date_range={startDate:date_start,endDate:date_end}},loadBraintreeAmounts=function(){e.braintree_loading=!0,n("GET","/payments/braintree_transactions_amounts",{location_id:getLocationIds()}).then(function(t){e.braintree_loading=!1,e.load_init=!1,e.paymentAmountOnTheWayToTheBank=t.data.data.on_the_way_to_the_bank_amount,e.paymentAmountDisbursed=t.data.data.disbursed_amount})},loadAnalytics=function(){e.chart_loading=!0,n("GET","/payments/analytics",{from_date:e.stat_date_range.startDate.toISOString(),to_date:e.stat_date_range.endDate.toISOString(),location_id:getLocationIds()}).then(function(t){e.chart_loading=!1,e.load_init=!1,stats=t.data.data,e.paymentGrowthLabels=_.map(stats,function(e){return e.label_name}),amountByLabel=_.map(stats,function(e){return e.amount}),e.paymentGrowthGrouped=[amountByLabel],i.increaseMaxYValue(e.growthChartOptions,_.max(amountByLabel)),e.paymentGrowthTotal=t.data.count})},getLocationIds=function(){return _.map(e.multiple_locations,"id")},e.$on("updateMultipleLocations",function(t,n){e.multiple_locations=n,e.load_init||(loadBraintreeAmounts(),loadAnalytics())}),setLocations=function(){e.multiple_locations=[t.location],t.$broadcast("updateMultipleLocations",e.multiple_locations)},e.addStatWeek=function(t){e.stat_date_range.startDate.add(t,"weeks").startOf("isoWeek"),e.stat_date_range.endDate=moment(e.stat_date_range.startDate).endOf("isoWeek"),e.current_last_days=!1,loadAnalytics()},a.perm_promise.then(function(){e.$on("loc_change",function(){return setLocations()}),setGrowthChartConfig(),initStatDates(),setLocations(),e.load_init&&(loadBraintreeAmounts(),loadAnalytics())})}]),App.controller("paymentsBankSetupCtrl",["$scope","$stateParams","PaymentBankSetup","$rootScope","Perm","toaster","ngDialog","$state","SweetAlert",function(e,t,n,a,i,o,s,r,l){e.loading=!0,checkPrivileges=function(){e.can_access_bank_setup?e.bankSetupGet():r.go("app.payments",t,{reload:!0})},i.perm_promise.then(function(){checkPrivileges(),e.$on("loc_change",function(){checkPrivileges()})}),e.bankSetupGet=function(){e.loading=!0,e.bankSetupEditing=!1,params={institution_id:a.institution.id},a.institution.is_payments_location_specific?(submerchant_id=a.institution.id+"_"+a.location.id,params.location_id=a.location.id):submerchant_id=a.institution.id,e.bank_account_details=n.$find(submerchant_id,params),e.bank_account_details.$finally(function(){e.loading=!1,e.bank_account_details.$response.data.code?(e.bank_account_details.institution_id=a.institution.id,bankSetupSuccessfullResponse()):(bankSetupErrorResponse(),e.bank_account_details.$pk=null,e.bankSetupEmpty=!0,e.bank_account_details.$response.data.error&&e.bank_account_details.$response.data.error[0]&&(e.errors=e.bank_account_details.$response.data.error))})},e.bankSetupSave=function(){if(!e.can_access_bank_setup)return void l.swal({title:"Error",text:"Sorry, you don't have permission to do that",type:"error"});e.loading=!0,e.bank_account_details.institution_id=a.institution.id,a.institution.is_payments_location_specific&&(e.bank_account_details.location_id=a.location.id),e.bank_account_details.individual_details&&e.bank_account_details.individual_details.date_of_birth&&(e.bank_account_details.individual_details.date_of_birth=formatDate(e.bank_account_details.individual_details.date_of_birth,"MMDDYYYY","YYYY-MM-DD")),e.bank_account_details.$save(),e.bank_account_details.$finally(function(){e.loading=!1,e.bank_account_details.$response.data.code?(bankSetupSuccessfullResponse(),e.bank_account_details.$pk=e.bank_account_details.$response.data.data.id,o.pop("success","Bank Details Saved"),"active"==e.bank_account_details.status&&(a.institution.is_payments_location_specific?a.location.privileges.is_payments_braintree_account_setup=!0:a.institution.privileges.is_payments_braintree_account_setup=!0,e.setPaymentsPrivileges())):(bankSetupErrorResponse(),e.bank_account_details.$response.error&&e.bank_account_details.$response.error[0]?e.errors=e.bank_account_details.$response.error:e.errors=e.bank_account_details.$response.data.error)})},formatDate=function(e,t,n){return moment(e,t).format(n)},e.bankSetupEdit=function(){e.bankSetupReadOnly=!1,e.bankSetupEditing=!0},e.bankSetupCancel=function(){e.errors=null,e.bankSetupReadOnly=!0,e.bankSetupEditing=!1},bankSetupSuccessfullResponse=function(){e.errors=null,e.bankSetupReadOnly=!0,e.bankSetupEditing=!1,e.bankSetupEmpty=!1,e.bank_account_details.funding_details.account_number_last_4?e.account_number_last_4_placeholder="**** "+e.bank_account_details.funding_details.account_number_last_4:e.account_number_last_4_placeholder=e.bank_account_details.funding_details.account_number,e.bank_account_details.individual_details&&e.bank_account_details.individual_details.date_of_birth&&(e.bank_account_details.individual_details.date_of_birth=formatDate(e.bank_account_details.individual_details.date_of_birth,"YYYY-MM-DD","MMDDYYYY"))},bankSetupErrorResponse=function(){e.bankSetupReadOnly=!1},e.tos_modal=function(){s.open({template:"app/views/legal/tos.html",className:"ne__modal ne__modal--tos"})}}]),App.controller("paymentsHistoryCtrl",["$controller","$scope","$stateParams","$api","fileResponse","NgTableParams","Perm","PaymentStatuses","$rootScope","$state","$timeout","ngDialog","WEBAPP_BASE_URL","filterByDate",function(e,t,n,a,i,o,s,r,l,c,p,d,m,u){e("paymentsActionsCommonCtrl",{$scope:t}),t.loading=!0,t.params={},t.is_online_widget=n.is_online_widget,t.is_online_widget?t.date_filter_wording="By paid date":t.date_filter_wording="By requested date",t.payments=[],t.statuses=[],t.selected_statuses=[],t.load_init=!1,t.load_statuses_init=!1,t.loadPayments=function(e){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return e?t.exporting=!0:t.loading=!0,opts={search_params:t.params,location_id:l.location.id,paid_via_online_widget:t.is_online_widget},e||(opts.page=o.page(),opts.per_page=o.count()),t.patients_tab&&(opts.patient_id=n.id),t.selected_statuses.length!=t.statuses.length&&(opts.status=t.selected_statuses),t.created_at_start&&t.created_at_end&&(opts.created_at_start=t.created_at_start.toISOString(),opts.created_at_end=t.created_at_end.toISOString()),api_path="/payments",e&&(api_path+=".csv"),a("GET",api_path,opts).then(function(n){if(!e)return t.payments=n.data.data,t.loading=!1,o.total(n.data.count),t.load_init=!0,t.load_statuses_init=!0,t.load_daterange_filter_init=!0,t.payments;t.exporting=!1,t.created_at_start&&t.created_at_end?filename="Nexhealth Payments "+l.institution.name+" "+t.created_at_start.format("YYYY/MM/DD")+" - "+t.created_at_end.format("YYYY/MM/DD")+".csv":filename="Nexhealth Payments "+l.institution.name+".csv",i.download(n,filename)})},setOnlineWidgetUrl=function(){l.institution.privileges.is_payments_online_widget_location_specific&&l.location.id?location_id=l.location.id:location_id="",online_widget_payment_url=m+"/patient-payments-online/"+l.institution.id+"/"+location_id+"/search",t.embed_widget_iframe_code=""+online_widget_payment_url},s.perm_promise.then(function(){t.redirectUnlessCanAccessTab("payments","is_payments_tab_activated",t.patients_tab),t.$on("loc_change",function(){t.load_init=!1,t.selected_statuses.length!=t.statuses.length&&(t.load_statuses_init=!1,t.uncheckStatuses()),t.created_at_start&&t.created_at_end&&u.clearFilterDateRange(t),setOnlineWidgetUrl(),p(function(){t.tableParams.page(1),t.tableParams.reload()})}),t.$watch("params.name_dob_email",function(e,n){t.load_init?e!=n&&(t.tableParams.page(1),t.tableParams.reload()):t.load_init=!0},!0),t.tableParams=new o({},{getData:function(e){return t.loadPayments(!1,e)}}),u.initDateRangePicker(t),t.is_online_widget?l.institution&&l.institution.privileges&&l.institution.privileges.is_payments_online_widget_activated?(setOnlineWidgetUrl(),loadPaymentsStatuses()):(t.loading=!1,t.access_denied_msg="Access denied.\n          Contact us at <a class='ne__link ne__link--primary ne__link--underline' href='mailto:@hello@nexhealth.com'>\n            hello@nexhealth.com\n          </a> to enable the Online Widget."):loadPaymentsStatuses()}),filterStatuses=function(){t.selected_statuses=_.map(_.filter(t.statuses,function(e){return e.isChecked}),function(e){return e.name})},loadPaymentsStatuses=function(){t.status_loading=!0,statuses_req=r.$search(),statuses_req.$then(function(e){t.statuses=statuses_req.$response.data.data,t.status_loading=!1,t.$watch("statuses",function(e,n){t.load_statuses_init?(filterStatuses(),t.tableParams.page(1),t.tableParams.reload()):t.load_statuses_init=!0},!0)})},t.uncheckStatuses=function(){_.each(t.statuses,function(e){return e.isChecked=null}),filterStatuses()},t.openEmbedWidgetPopup=function(){embedWidgetPopup=d.open({template:"/app/views/payments/modal/embed_widget.html",className:"ne__modal ne__modal--payments-embed-widget",scope:t,preCloseCallback:function(e){return 1==e&&(copyText=$("textarea")[0],copyText.select(),document.execCommand("copy")),!0}})}}]),App.controller("paymentsCtrl",["$scope","$stateParams","$rootScope","Perm","$state",function(e,t,n,a,i){a.perm_promise.then(function(){e.redirectUnlessCanAccessTab("payments","is_payments_tab_activated"),"app.payments"==i.current.name?i.go("app.payments.request-payment",t,{reload:!0}):e.setPaymentsPrivileges(),e.$on("loc_change",function(){setPaymentsLocationPrivileges()})}),e.setPaymentsPrivileges=function(){n.institution.is_payments_location_specific?setPaymentsLocationPrivileges():setPaymentsInstitutionPrivileges()},setPaymentsLocationPrivileges=function(){n.institution.is_payments_location_specific&&(e.is_account_setup=n.location.privileges.is_payments_braintree_account_setup,e.can_access_bank_setup=a.admin_at_current_loc()&&a.admin_at_current_inst())},setPaymentsInstitutionPrivileges=function(){e.is_account_setup=n.institution.privileges.is_payments_braintree_account_setup,e.can_access_bank_setup=a.admin_at_current_inst()}}]),App.controller("pressStandCtrl",["$scope",function(e){}]),App.controller("appointmentSettingsCtrl",["$scope","responseHelper","$state","AppointmentSetting","$stateParams","authService",function(e,t,n,a,i,o){e.disable=!0;var s=a.$find(o.getUserId());s.$then(function(t){e.overbook=t.$response.data.data.overbook}),e.didChange=function(){s.new_setting=e.overbook;var n=s;console.log(n),n.$save(),n.$then(function(){t.redirectOrToastOnResp(n)})}}]),App.controller("personalSettingsCtrl",["$scope","$rootScope","$filter","responseHelper","$state","User","$stateParams",function(e,t,n,a,i,o,s){e.errors={},e.server_errors=[],e.disable=!1,e.loading=!0;var r=["first_name","last_name","email","password","password_confirmation"],l=o.$find(t.user.id,{with_email:!0});l.$then(function(t){e.loading=!1,e.user=t.$response.data.data,e.user.first_name=n("titleize")(e.user.first_name),e.user.last_name=n("titleize")(e.user.last_name),e.user.password="",e.user.password_confirmation=""}),e.updateInfo=function(){_.each(r,function(t){l[t]=e.user[t]}),l.$save(r).$then(function(t){!t.$response.data.code&&t.$response.data.error&&t.$response.data.error.length?e.server_errors=t.$response.data.error:a.redirectOrToastOnResp(t)})},e.$watchGroup(["user.first_name","user.last_name","user.email","user.password","user.password_confirmation"],function(t,n){var a=!1;void 0===e.user||void 0===e.user.password||(e.server_errors=[],_.each(["first_name","last_name","email","password"],function(t){""!=e.user[t]&&void 0!==e.user[t]||(a=!0)}),e.user.password.length>0&&e.user.password!=e.user.password_confirmation?(e.errors.mismatch=!0,a=!0):e.errors.mismatch=!1,0!=e.user.password.length&&e.user.password.length<8?(e.errors.tooshort=!0,a=!0):e.errors.tooshort=!1,e.disable=a)})}]),App.controller("providerWorkingHours",["$scope","$rootScope","$api","responseHelper","SweetAlert",function(e,t,n,a,i){e.location=t.location,e.member=e.ngDialogData.member,e.doctors=e.ngDialogData.doctors,e.hours=_.range(1,13).map(function(e){return("0"+e).slice(-2)}),e.minutes=_.range(0,56,5).map(function(e){return("0"+e).slice(-2)}),e.meridians_am="AM",e.meridians_pm="PM",e.meridians=[e.meridians_am,e.meridians_pm],e.every_numbers=_.range(1,31,1),e.every_units=["day","week","month"],initWorkingHours=function(){_.each(e.member.working_hours,function(t){setWorkingHourInitialOptions(t),setWorkingHourIsCheckedOptions(t),e.no_visible_working_hours=!1}),e.member.working_hours&&e.member.working_hours.length>=e.search_working_hours.per_page&&(e.search_working_hours.hit_end=!1)},setWorkingHourInitialOptions=function(t){t.options=angular.copy(_.map(e.working_hours_options,function(e){return{name:e,isChecked:!1}}))},setWorkingHourIsCheckedOptions=function(e){e.misc&&e.misc.days&&e.misc.days.length?_.each(e.misc.days,function(t){workingHourOptionActivate(e,t)}):(setWorkingHourInitialOptions(e),workingHourOptionActivate(e,e.day))},workingHourOptionActivate=function(e,t){wh_options_weekday=_.filter(e.options,function(e){return e.name==t}),wh_options_weekday&&wh_options_weekday[0]&&(wh_options_weekday[0].isChecked=!0)},initWorkingHours(),e.loadMoreWorkingHours=function(){if(e.loading||e.search_working_hours.hit_end)return!1;e.loading=!0,e.search_working_hours.page++,opts={location_id:e.location.id,page:e.search_working_hours.page,per_page:e.search_working_hours.per_page},e.memberIsOperatory()?base_url="operatories":base_url="providers",n("GET","/"+base_url+"/"+e.member.id+"/working_hours",opts).then(function(t){t.data.data.length?(res=e.formatWorkingHoursData(t.data.data),
e.member.working_hours=e.member.working_hours.concat(res)):e.search_working_hours.hit_end=!0,e.loading=!1})},e.workingHourMeridianUpdate=function(e){arguments.length>1&&void 0!==arguments[1]&&!arguments[1]?meridianUpdate(e.end_time_in_tz):meridianUpdate(e.begin_time_in_tz)},meridianUpdate=function(t){t.meridian==e.meridians_am?t.meridian=e.meridians_pm:t.meridian=e.meridians_am},e.toggleOnDate=function(e){e.toggle_on_date?e.toggle_every=!1:onDisableToggle(e)},e.workingHourDateUpdate=function(t,n){newDateMoment=moment(n),t.misc.on_date=newDateMoment.format("YYYY-MM-DD"),delete t.misc.days,t.day=null,e.setWorkingDaysOption(t,{isChecked:!1,name:newDateMoment.format("dddd")},!0)},e.toggleEvery=function(e){e.toggle_every?e.toggle_on_date=!1:onDisableToggle(e)},onDisableToggle=function(t){delete t.misc.days,t.day=null,setWorkingHourIsCheckedOptions(t),e.setWorkingHourLabel(t)},e.workingHourEveryRefDateUpdate=function(e,t){newDateMoment=moment(t),e.misc.every||(e.misc.every={}),e.misc.every.ref=newDateMoment.format("YYYY-MM-DD")},e.setWorkingDaysOption=function(t,n){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];n.isChecked=!n.isChecked,setWorkingDaysOptionForWeekday(t,n,a),setWorkingHourIsCheckedOptions(t),e.setWorkingHourLabel(t)},setWorkingDaysOptionForWeekday=function(t,n){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2];n.isChecked?enableWorkingDaysOptionForWeekday(t,n,a):disableWorkingDaysOptionForWeekday(t,n),t.misc.days&&t.misc.days.length>1&&(t.misc.days=_.sortBy(t.misc.days,function(t){return e.working_hours_options.indexOf(t)}))},enableWorkingDaysOptionForWeekday=function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2]||(e.toggle_on_date=!1),e.misc.days&&e.misc.days.length&&_.includes(e.misc.days,t.name)?e.day=null:e.misc.days&&e.misc.days.length?(e.misc.days.push(t.name),e.day=null):e.day==t.name?delete e.misc.days:e.day?(e.misc.days=[e.day,t.name],e.day=null):e.day=t.name},disableWorkingDaysOptionForWeekday=function(e,t){e.misc.days&&e.misc.days.length&&_.includes(e.misc.days,t.name)&&(_.remove(e.misc.days,function(e){return e==t.name}),1==e.misc.days.length&&(e.day=e.misc.days[0]),e.misc.days.length<=1&&delete e.misc.days)},e.destroyWorkingHour=function(t){t._destroy=!0,_.filter(e.member.working_hours,function(e){return!e._destroy})[0]?e.no_visible_working_hours=!1:e.no_visible_working_hours=!0},e.addWorkingHour=function(){today=moment.tz(new Date,t.timezone).startOf("day"),begin_time=angular.copy(today),end_time=angular.copy(today),begin_time.set({hour:9}),end_time.set({hour:17}),e.memberIsOperatory()?parent_id=null:parent_id=e.member.id,wh={active:!0,institution_id:t.institution.id,location_id:e.location.id,begin_time:begin_time.toISOString(),end_time:end_time.toISOString(),misc:{},parent_id:parent_id,parent_type:"User"},e.formatWorkingHoursDates(wh),setWorkingHourInitialOptions(wh),e.member.working_hours.unshift(wh),$(".scrollcontainer")[0]&&($(".scrollcontainer")[0].scrollTop=0),e.no_visible_working_hours=!1},e.saveWorkingHours=function(){editable_working_hours=e.member.working_hours.filter(function(e){return!e.non_editable}),editable_working_hours.length&&(formatBeforeSave(editable_working_hours),validateWorkingHours(editable_working_hours)&&(e.member_working_hours_saving=!0,working_hours_opts=_.map(editable_working_hours,function(e){return _.pick(e,"id","institution_id","location_id","day","parent_id","parent_type","begin_time","end_time","misc","_destroy","operatory")}),working_hours_opts.length||(working_hours_opts=[""]),save_opts={location_id:e.location.id},wh_opts={working_hours_attributes:working_hours_opts},e.memberIsOperatory()?(base_url="operatories",save_opts.operatory=wh_opts,recipient_wording="providers of this operatory"):(base_url="providers",save_opts.provider=wh_opts,recipient_wording="this provider"),n("PUT","/"+base_url+"/"+e.member.id,{},save_opts).then(function(t){t.data.code?(isCustomRepeatChanged()&&i.swal({title:"Custom repeated working hours changed",text:"Please QA your online booking page to ensure correct dates show availability for "+recipient_wording+"."}),e.member.working_hours=t.data.data.working_hours,e.formatWorkingHours(e.member),initWorkingHours(),e.member_working_hours_saving=!1,t.$response=t,a.redirectOrToastOnResp(t),"function"==typeof e.closeThisDialog&&e.closeThisDialog()):(t.$response=t,a.redirectOrToastOnResp(t),e.member_working_hours_saving=!1)})))},isCustomRepeatChanged=function(){return is_changed=!1,_.each(e.member.working_hours,function(t){if(t.misc&&t.misc.every){if(!t.id)return is_changed=!0,!1;if(init_wh=_.filter(e.member.initial_working_hours,function(e){return e.id==t.id})[0],!init_wh.misc||!init_wh.misc.every||init_wh.misc.every.ref!=t.misc.every.ref||init_wh.misc.every.num!=t.misc.every.num||init_wh.misc.every.unit!=t.misc.every.unit)return is_changed=!0,!1}}),is_changed},formatBeforeSave=function(t){_.each(t,function(t){t.misc&&t.misc.on_date&&!t.toggle_on_date&&delete t.misc.on_date,t.misc&&t.misc.every&&!t.toggle_every&&delete t.misc.every,t.begin_time=combineDate(t.begin_time_in_tz),t.end_time=combineDate(t.end_time_in_tz),e.formatWorkingHoursDates(t)})},combineDate=function(e){return current_date=moment().tz(t.timezone).format("YYYY-MM-DD"),moment_time=moment(current_date+" "+e.hour+":"+e.minute+" "+e.meridian,"YYYY-MM-DD hh:mm A"),moment_time=moment.tz(moment_time,t.timezone),inst_offset=moment_time.utcOffset(),client_offset=moment().utcOffset(),moment_time.add(-inst_offset+client_offset,"minutes"),moment_time.toISOString()},validateWorkingHours=function(t){return validation=!0,_.each(t,function(t){e.memberIsOperatory()&&t.provider&&t.provider.id&&(t.parent_id=t.provider.id),t._destroy||(errors=[],!e.location.map_by_operatory||e.location.appt_types_map_by_operatory||t.operatory&&t.operatory.id||errors.push("Please choose an operatory"),!e.memberIsOperatory()||t.provider&&t.provider.id||errors.push("Please choose a provider"),!t.toggle_on_date||t.misc&&t.misc.on_date||errors.push("Please choose a specific date"),!t.toggle_every||t.misc&&t.misc.every&&t.misc.every.ref||errors.push("Please choose a reference date"),t.day||t.toggle_on_date||t.toggle_every||t.misc&&(t.misc.days||t.misc.every)||errors.push("Please choose a weekday"),t.begin_time&&t.end_time||errors.push("Please choose both begin and end time"),moment(t.begin_time)>=moment(t.end_time)&&errors.push("Begin time should be less than an end time"),errors.length&&(validation=!1,t.errors=errors))}),validation}}]),App.controller("registerInstituteCtrl",["$scope","SweetAlert","authService",function(e,t,n){e.submitted=!1,e.validateInput=function(t,n){var a=e.form[t];return(a.$dirty||e.submitted)&&a.$error[n]},e.didClickOnSubmit=function(){e.laddaLoading=!0,e.submitted=!0,e.form.$valid}}]),App.controller("registerUserCtrl",["$scope","Perm","Authenticate","Institution","ActivateProvider","authService","$state","responseHelper","Register","$stateParams",function(e,t,n,a,i,o,s,r,l,c){function p(){var t=e.weekdays.indexOf(e.weekday);t<e.weekdays.length?e.weekday=e.weekdays[t+1]:e.weekday=e.weekdays[0]}lg("?"),e.submitted=!1,o.willUnauthorizeUser(),e.user={};var d=l.$find(c.code);d.$then(function(){e.emailExists=d.$response.data.code,!0===e.emailExists&&(e.email=d.$response.data.data.req.email,e.institution=d.$response.data.data.institution,e.locations=d.$response.data.data.locations,e.locations.length>0&&(e.user.primaryLocation=e.locations[0].id))}),e.authMsg=!1,e.workingHours=[],e.hours=[],e.start_time=new Date,e.start_time.setHours(9),e.start_time.setMinutes(0),e.start_time.setSeconds(0),e.end_time=new Date,e.end_time.setHours(17),e.end_time.setMinutes(0),e.end_time.setSeconds(0);for(var m=0;m<24;m++){var u=new Date;u.setHours(m),u.setMinutes(0),u.setSeconds(0),e.hours.push(u);var g=new Date;g.setHours(m),g.setMinutes(30),g.setSeconds(0),e.hours.push(g)}e.weekdays=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],e.weekday="Monday",e.indexTracker=0,e.didClickAddDay=function(t,n,a){e.indexTracker++,console.log(n,a,e.indexTracker),e.start_time=n,e.end_time=a;var i={day:t,begin_time:n,end_time:a,index:e.indexTracker};e.workingHours.push(i),p()},e.didClickRemoveDay=function(t){console.log(t);var n=_.findIndex(e.workingHours,"index",t);e.workingHours.splice(n,1)},e.update=function(t,n,a){console.log(t,n,a),1===a?e.workingHours[n].begin_time=t:2===a&&(e.workingHours[n].end_time=t)}}]),App.controller("renameCtrl",["$scope",function(e){e.orig=e.ngDialogData.name,e.vm={name:e.ngDialogData.name},e.title=e.ngDialogData.title,e.custom_confirm=e.ngDialogData.custom_confirm,e.custom_cancel=e.ngDialogData.custom_cancel,e.save=function(){e.closeThisDialog({newName:e.vm.name})},e.cancel=function(){e.closeThisDialog(!1)}}]),App.controller("resetPasswordCtrl",["$scope","responseHelper","$stateParams","$state","Reset","SweetAlert","authService",function(e,t,n,a,i,o,s){s.willUnauthorizeUser(),e.submitted=!1,e.validateInput=function(t,n){return input=e.form[t],(input.$dirty||e.submitted)&&input.$error[n]},e.errors=!1,email=i.$find(n.code),email.$then(function(n){email.$response.data.code?(e.email=n.email,e.errors=!1):t.redirectOrToastOnResp(email,null,"forgot-password")}),e.didClickOnSubmit=function(){var o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;o=!(!o||!n.subdomain),e.laddaLoading=!0,e.form.$valid&&(reset=i.$find(n.code),resetForm={reset_password:{password:e.form.password.$viewValue,password_confirmation:e.form.passwordConfirmation.$viewValue}},reset.reset_password=resetForm.reset_password,o&&(reset.redirect_to_intake=o),reset.$save(["reset_password","redirect_to_intake"]).$then(function(){e.authMsg=reset.$response.data.error,reset.$response.data.error=null,e.laddaLoading=!1,o&&reset.$response.data.data&&reset.$response.data.data["is_patient?"]?(t.redirectOrToastOnResp(reset),a.go("intake",{inst_subdomain:n.subdomain})):t.redirectOrToastOnResp(reset,"login")}))}}]),App.controller("settingsCtrl",["$scope","$rootScope","$state","$stateParams","authService","FileUploader","SERVER_BASE_URL","Perm",function(e,t,n,a,i,o,s,r){e.pages=[{name:"Schedule",page:"schedule",alert:42,icon:"fa-clock-o"},{name:"Providers",page:"providers",alert:10,icon:"fa-user-md"},{name:"Notifications",page:"notifications",alert:0,icon:"fa-paper-plane-o"},{name:"Account",page:"account",alert:5,icon:"fa-edit"},{name:"Appointments",page:"appointments",alert:0,icon:"fa-calendar"}],e.page="schedule"===a.page?"":a.page,e.set_uploader=function(){e.uploader=new o({url:s+"/providers/"+e.user.id+"/set_image?subdomain="+i.getUserSubdomain(),headers:{Authorization:i.getUserAuthorization().auth},formData:[{}],autoUpload:!1,removeAfterUpload:!0}),e.uploader.onSuccessItem=function(n,a,i,o){e.uploading=!1,e.loading=!1,lg("Upload done",a.data),e.user=a.data,t.$broadcast("updateProfileUrl",e.user.profile_url)},e.uploader.onBeforeUploadItem=function(t){e.uploading=!0,e.loading=!0,lg("Upload start")},e.uploader.onErrorItem=function(t,n,a,i){e.uploading=!1,e.loading=!1,lg("Upload Error",n)},e.uploader.onAfterAddingFile=function(e){e.upload()},e.uploader.options={autoUpload:!1}},e.set_uploader(),r.perm_promise.then(function(){e.can_access_manage_users=r.admin_at_current_inst()})}]),App.controller("staffCreateCtrl",["$rootScope","$scope","responseHelper","User",function(e,t,n,a){var i=this;t.is_inst_admin=!1,t.submitted=!1,t.current_staff={locations:[]},t.validateInput=function(e,n){var a=i.form[e];return(a.$dirty||t.submitted)&&a.$error[n]},t.goToUser=function(){t.activePill=0},t.showLocations=function(){setCurrentStaff(),t.activePill=1},t.saveNewStaff=function(){if(t.submitted=!0,!i.form.$valid)return!1;setCurrentStaff(),t.current_staff.assign_locations_ids=_.map(t.current_staff.locations,"id");var o=a.$build({user:_.omit(t.current_staff,"locations","display_name")});t.laddaLoading=!0,o.$save(),o.$then(function(a){t.laddaLoading=!1,a.$response.data.code&&(e.$broadcast("onCreateStaffUser"),t.closeThisDialog()),n.redirectOrToastOnResp(a,void 0,void 0,{},!1,{},2e4)})},setCurrentStaff=function(){t.current_staff.email=i.form.email.$viewValue,t.current_staff.first_name=i.form.first_name.$viewValue,t.current_staff.last_name=i.form.last_name.$viewValue,t.current_staff.is_inst_admin=i.form.is_inst_admin.$viewValue,t.current_staff.display_name=i.form.first_name.$viewValue+" "+i.form.last_name.$viewValue}}]),App.controller("staffNotificationsCtrl",["$rootScope","Perm","$scope","responseHelper","User","$timeout",function(e,t,n,a,i,o){n.loading=!0,n.load_init=!1,t.perm_promise.then(function(){n.staff=i.$find(e.user.id,{with_subscription:!0}),n.staff.$finally(function(){n.loading=!1,n.staff.$response.data.code?(n.errors=[],n.subscription_names=_.sortBy(_.keys(_.omit(n.staff.subscription,"id")),function(e){return e}),watchStaffNotifications()):n.errors=n.staff.$response.data.error})}),watchStaffNotifications=function(){subscriptionModels=_.map(n.subscription_names,function(e){return"staff.subscription."+e}),n.$watchGroup(subscriptionModels,function(e,t){n.load_init?e!=t&&(loadingTimeout=o(function(){n.loading=!0},300),n.staff.$save(["subscription"]).$finally(function(){o.cancel(loadingTimeout),n.loading=!1,n.staff.$response.data.code||(n.load_init=!1),a.redirectOrToastOnResp(n.staff)})):n.load_init=!0})}}]),App.controller("staffPermissionsCtrl",["$rootScope","$scope","responseHelper","$api",function(e,t,n,a){t.permissions=[{name:"messages",title:"Messages"},{name:"online_booking",title:"Online Booking"},{name:"appointment_types",title:"Appointment Types"},{name:"patients",title:"Patients"}],e.institution&&e.institution.privileges&&e.institution.privileges.is_payments_tab_activated&&t.permissions.push({name:"payments",title:"Payments"}),t.permissions.push({name:"calendar",title:"Calendar"}),e.institution&&e.institution.privileges&&e.institution.privileges.is_waitlist_tab_activated&&t.permissions.push({name:"waitlist",title:"Waitlist"}),t.permissions.push({name:"templates",title:"Templates"},{name:"campaigns",title:"Campaigns"},{name:"analytics",title:"Analytics"},{name:"form_responses",title:"Forms"}),t.current_staff.permission||(t.current_staff.permission={},_.each(t.permissions,function(e){t.current_staff.permission[e.name]=!0})),t.togglePermission=function(){a("PUT","/user/"+t.current_staff.id,{},{permissions:[t.current_staff.permission]}).then(function(e){n.redirectOrToastOnResp({$response:e})})}}]),App.controller("styleGuideCtrl",["$scope",function(e){e.providers=[{name:"Elit Tellus"},{name:"Venenatis Elit"},{name:"Sem Ipsum"},{name:"Ullamcorper Adipiscing"},{name:"Tellus Molli"},{name:"Elit Tellus"},{name:"Venenatis Elit"},{name:"Sem Ipsum"},{name:"Ullamcorper Adipiscing"},{name:"Tellus Molli"},{name:"Elit Tellus"},{name:"Venenatis Elit"},{name:"Sem Ipsum"},{name:"Ullamcorper Adipiscing"},{name:"Tellus Molli"},{name:"Elit Tellus"},{name:"Venenatis Elit"},{name:"Sem Ipsum"},{name:"Ullamcorper Adipiscing"},{name:"Tellus Molli"},{name:"Elit Tellus"},{name:"Venenatis Elit"},{name:"Sem Ipsum"},{name:"Ullamcorper Adipiscing"},{name:"Tellus Molli"},{name:"Elit Tellus"},{name:"Venenatis Elit"},{name:"Sem Ipsum"},{name:"Ullamcorper Adipiscing"},{name:"Tellus Molli"}],e.patients=[{name:"Kasandra Timmer"},{name:"Katherin Magyar"},{name:"Talisha Wolfenbarger"},{name:"Ilene Rempe"},{name:"Renee Torrey"},{name:"Daniel Cottle"},{name:"Rosemarie Krantz"},{name:"Genie Kellam"},{name:"Pam Rollins"},{name:"Kay Bowsher"},{name:"Alejandrina Petrick"},{name:"Marty Goldberg"},{name:"Earnest Stinger"},{name:"Alfonzo Myrick"},{name:"Alvaro Nivens"},{name:"Phyllis Westerberg"},{name:"Tracie Espy"},{name:"Priscilla Laven"},{name:"Leo Facer"},{name:"Ramonita Ulibarri"}],e.date1="",e.date2="",e.tilePrimaryLG="0",e.tilePrimarySM="0",e.togglePrimaryLG=function(t){e.tilePrimaryLG=t},e.togglePrimarySM=function(t){e.tilePrimarySM=t},e.toggleSecondaryLG=function(t){e.tileSecondaryLG=t,lg(e.tileSecondaryLG)},e.toggleSecondarySM=function(t){e.tileSecondarySM=t,lg(e.tileSecondarySM)},e.campaigns=[{name:"Campaign One",badge:"Institution",isLocked:!0,misc:{type:"manual"},types:{email:!0,sms:!1},successfully_sent:!0,created_at:"2017-03-31T16:14:08.653-04:00",sent_at:"",updated_at:"2017-03-31T16:14:20.254-04:00",sent_times:{}},{name:"Campaign Two",badge:"Location",isLocked:!1,misc:{type:"schedule"},types:{email:!0,sms:!1},successfully_sent:!1,created_at:"2017-03-31T16:14:08.653-04:00",sent_at:"",updated_at:"2017-03-31T16:14:20.254-04:00",sent_times:{}},{name:"Campaign Three",isLocked:!1,misc:{type:"reminder"},types:{email:!0,sms:!1},successfully_sent:!1,created_at:"2017-03-31T16:14:08.653-04:00",sent_at:"",updated_at:"2017-03-31T16:14:20.254-04:00",sent_times:{}}],e.datepicker1="2017-01-22",e.datepicker2="2017-02-28"}]),App.controller("surveyCommonCtrl",["$scope","$http","SERVER_BASE_URL",function(e,t,n){e.getSocialLinks=function(){var a=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];socialLinksUrl=n+"/social_links?appointment_id="+e.appointmentId+"&subdomain="+e.instSubdomain,t.get(socialLinksUrl).then(function(t){e.links=t.data.data,e.links&&(e.links_values=Object.values(e.links),i&&e.links_values&&e.links_values.length&&(e.timeRedirectionStarted=moment().toISOString(),e.redirecting=!0)),a&&a()})},e.getMaxScore=function(){return e.appointment&&e.appointment.institution&&e.appointment.institution.is_surveys_nps?res=10:res=5,res}}]),App.controller("surveyInfoCtrl",["$controller","$scope","$state","$stateParams","authService","$http","SERVER_BASE_URL",function(e,t,n,a,i,o,s){e("surveyCommonCtrl",{$scope:t}),getAppointment=function(){apptUrl=s+"/appointments_for_survey/"+t.appointmentId+"?inst_subdomain="+t.instSubdomain,o.get(apptUrl).then(function(e){t.appointment=e.data.data,t.data={title:t.appointment.location.name,subtitle:t.appointment.location.slogan||t.appointment.location.address,iconURL:!1,isWideLayout:!0,bottomLogo:"app/img/nexhealth-powered.png",card:!0,logoIsPowered:!0},!0===e.data.code?(t.data=Object.assign(t.data,{title:t.appointment.location.name,subtitle:t.appointment.location.slogan||t.appointment.location.address,boxTitle:"Your opinion matters.",boxDescription:"We are always looking for things we can change and new services we can offer. Please help us by completing a quick survey.",iconURL:!1,isWideLayout:!0,bottomLogo:"app/img/nexhealth-powered.png",button:!0,card:!0,logoIsPowered:!0}),t.score||0==t.score?(callback=function(){n.go("patient-survey-form",{data:t.data,surveyId:t.surveyTemplateId,appointmentId:t.appointmentId,instSubdomain:t.instSubdomain,score:t.score,redirecting:t.redirecting,timeRedirectionStarted:t.timeRedirectionStarted,links_values:t.links_values,appointment:t.appointment})},t.score>=t.getMaxScore()-1?t.getSocialLinks(callback,!0):callback()):t.loading=!1):!1===e.data.code&&(t.redirecting=!1,t.appointment.score>=t.getMaxScore()-1?(callback=function(){t.links_values&&t.links_values.length?t.data=Object.assign(t.data,{boxTitle:"Thanks for the love!",boxDescription:"We know you love "+t.appointment.doctor.first_name+" "+t.appointment.doctor.last_name+", but you've already submitted this survey. Why not leave a review at one of the sites below?",button:!1}):n.go("patient-survey-complete",{data:t.data})},t.getSocialLinks(callback,!1)):t.appointment.score<t.getMaxScore()-1&&(t.data=Object.assign(t.data,{boxTitle:"Sorry for the bad experience :(",boxDescription:"We will be in touch to see how we can improve your next visit!",button:!1})),t.loading=!1)})},t.loading=!0,i.willUnauthorizeUser(),t.surveyTemplateId=a.surveyId,t.appointmentId=a.appointmentId,t.instSubdomain=a.instSubdomain,t.score=a.score,_.isEmpty(t.appointmentId)||getAppointment(),t.getLayoutClasses=function(){return t.data.isWideLayout?"col-xs-12":"col-xs-12 col-sm-12 col-md-10 col-lg-8 col-md-offset-1 col-lg-offset-2"}}]),App.controller("takeSurveyCtrl",["$controller","$scope","$state","$http","$stateParams","SERVER_BASE_URL","responseHelper","SurveySubmissions","$window","$timeout",function(e,t,n,a,i,o,s,r,l,c){if(e("surveyCommonCtrl",{$scope:t}),_.isEmpty(i.data))return void n.go("patient-survey-info",{surveyId:i.surveyId,appointmentId:i.appointmentId,instSubdomain:i.instSubdomain,score:i.score});t.loading=!0,t.data=i.data,t.data.button=!1,t.surveyTemplateId=i.surveyId,t.appointmentId=i.appointmentId,t.instSubdomain=i.instSubdomain,t.appointment=i.appointment,t.score=i.score,t.redirecting=i.redirecting,t.links_values=i.links_values,t.timeRedirectionStarted=i.timeRedirectionStarted,t.workingModel={choiceAnswers:{},longAnswers:{}},t.surveyResult={},surveyTemplatesUrl=o+"/survey_templates/"+t.surveyTemplateId+"?inst_subdomain="+t.instSubdomain,t.appointment&&t.appointment.location&&(surveyTemplatesUrl=surveyTemplatesUrl+"&location_id="+t.appointment.location.id),a.get(surveyTemplatesUrl).then(function(e){t.survey=e.data.data,angular.forEach(t.survey.survey_questions_in_order,function(e,n){"long_answer"===e.answer_type_description.type&&(t.conditionalQuestion=e,t.workingModel.longAnswers[e.id]={id:e.id,questionTitle:e.title,answer:""}),e.answer_type_description.score&&(t.scoreQuestion=e,(t.score||0==t.score)&&(t.chooseOption(t.scoreQuestion,t.score),t.score<t.getMaxScore()-1?t.loading=!1:t.sendSurvey()))}),t.score||0==t.score||(t.loading=!1)}),t.chooseOption=function(e,n){e.answer_type_description.score&&(t.selected_score=Number(n)),t.workingModel.choiceAnswers[e.id]={questionTitle:e.title,answer:n}},t.setActiveTextQuestion=function(e){t.activeTextQuestion.id=e.id,t.activeTextQuestion.questionTitle=e.title},sendSurvey=function(e){t.saving=!0,r.$create(angular.merge(e,{inst_subdomain:t.instSubdomain})).$then(function(e){redirectToCompletePage=function(){toGo=["patient-survey-complete",{data:e,surveyId:t.surveyTemplateId,appointmentId:t.appointmentId,instSubdomain:t.instSubdomain,appointment:t.appointment}],s.redirectOrToastOnResp(e,toGo)},t.score&&t.score>=t.getMaxScore()-1&&t.redirecting?(timeNow=moment().toISOString(),timeDiff=moment(timeNow).diff(t.timeRedirectionStarted),timeBeforeRedirection=1e3-timeDiff,c(function(){l.location.href=t.links_values[0]},timeBeforeRedirection)):redirectToCompletePage(),t.saving=!1})},t.sendSurvey=function(){surveyResult={survey_submission:{appointment_id:t.appointmentId,provider_id:t.appointment.doctor.id,survey_template_id:t.survey.id,survey_answers_attributes:[]}},angular.forEach(t.workingModel,function(e,t){angular.forEach(e,function(e,t){surveyResult.survey_submission.survey_answers_attributes.push({survey_question_id:t,question_title:e.questionTitle,answer_string:e.answer})})}),sendSurvey(surveyResult)}}]),App.controller("surveyCompleteCtrl",["$controller","$scope","$stateParams",function(e,t,n){e("surveyCommonCtrl",{$scope:t}),t.loading=!0,t.surveyTemplateId=n.surveyId,t.appointmentId=n.appointmentId,t.instSubdomain=n.instSubdomain,t.appointment=n.appointment,t.data=n.data,t.survey_score=t.data.score,t.data.boxTitle="Thank you for choosing us",t.data.boxDescription="Thank you for taking the time to review your appointment. We'll be in touch if we need more information.",t.data.submitted=!0,callback=function(){t.loading=!1},t.survey_score>=t.getMaxScore()-1?t.getSocialLinks(callback):callback()}]),App.controller("showSurveyModalCtrl",["$scope","SurveySubmissions",function(e,t){e.loading=!0,e.survey=t.$find(e.ngDialogData.survey.id),e.survey.$promise.then(function(){e.loading=!1})}]),App.controller("nowDentalForm",["$scope",function(e){e.workingModel={choiceAnswers:{},longAnswers:{}},e.chooseOption=function(t,n){e.workingModel.choiceAnswers[t.id]={questionTitle:t.title,answer:n}},e.survey_questions=[{id:1,title:"How would you rate your visit?",answer_type_description:{type:"multiple_choice",choices:["Excellent","Very good","Average","Not so good"]}},{id:2,title:"When your appointment was over did you have a good understanding of your situation?",answer_type_description:{type:"multiple_choice",choices:["Yes","I wish I knew more","Not really"]}},{id:3,title:"Did you have to wait past your appointment time to be seen? If yes, how long?",answer_type_description:{type:"multiple_choice",choices:["No","15 to 30 minutes","30 to 45 minutes","Over 45 minutes"]}},{id:4,title:"Did our team greet you properly when you arrived?",answer_type_description:{type:"multiple_choice",choices:["Yes","Not really","I don’t recall"]}},{id:5,title:"Would you refer your friends or family to us?",answer_type_description:{type:"multiple_choice",choices:["Yes","No","I’m not sure"]}},{id:6,title:"Please comment on your visit, things we could change, new services you would like to see.",answer_type_description:{type:"long_answer"}},{id:7,title:"How would you rate your visit overall, with 1 being the worst and 5 being the best?",answer_type_description:{type:"multiple_choice",choices:["1","2","3","4","5"]}}]}]),App.controller("spineClinicalForm",["$scope",function(e){var t;e.spine=(t={name:"John Doe",dob:new Date(1085,9,22),height:"6.2",weight:"192",age:"32",location:{check1:!0,check2:!0,check3:!1,check4:!1,check5:!1,check6:!1,check7:!1,check8:!1},symptoms:{check1:!1,check2:!0,check3:!1,check4:!1,check5:!1,check6:!0,check7:!0,check8:"Sore butt"},range:{neck:"2",arm:"8"},conditionstart:"A month ago",howconditionstarted:"I felt on the ice",makepainbetter:"",makepainworse:""},_defineProperty(t,"conditionstart","A month ago"),_defineProperty(t,"walkDistance",{check1:!1,check2:!0}),_defineProperty(t,"bladderAbility","No"),_defineProperty(t,"haveYouTried",{check1:!1,check2:!0,check3:!1,check4:!1,check5:!1,check6:!0,check7:""}),_defineProperty(t,"mrsaInfection","No"),_defineProperty(t,"referringPhysician",{physician1:{name:"Dr. James Casey",phone:""}}),_defineProperty(t,"treatedPhysician",{physician1:{specialty:"Chiropractic",name:"Dr. George Green",phone:""}}),_defineProperty(t,"medicalDevices",{check1:!1,check2:!0,check3:!1,check4:!1}),_defineProperty(t,"diabete","No"),_defineProperty(t,"insulinePump","No"),_defineProperty(t,"opioids","No"),_defineProperty(t,"pneumoniaVaccine","No"),_defineProperty(t,"pneumoniaVaccineDate",""),_defineProperty(t,"pneumoniaVaccineWhy",""),_defineProperty(t,"influenzaVaccine","No"),_defineProperty(t,"influenzaVaccineDate",""),_defineProperty(t,"influenzaVaccineWhy","I don't believe in vaccines"),_defineProperty(t,"fallenInjury","Yes"),_defineProperty(t,"fallenInjuryVision","No"),_defineProperty(t,"allergies",{allergy1:{allergy:"Pollen",reaction:"Nose sneezing"}}),_defineProperty(t,"medications",{medication1:{medication:"Ibuprofen",route:"Oral",dose:"100mg",frequency:"Daily"}}),_defineProperty(t,"medicalHistory",{check1:!1,check2:!0,check3:!1,check4:!1,check5:!1,check6:!0,check7:!1,check8:!1,check9:!0,check10:!1,check11:!1,check12:!1,check13:!0,check14:!1,check15:!1,check16:!0,check17:!1,check18:!1,check19:!1,check20:!0,check21:!1,check22:!1,check23:!0,check24:!1,check25:!1,check26:!1,check27:!0,check28:""}),_defineProperty(t,"hospitalizationHistory",{hospitalization:"Knee surgery",date:"Two years ago"}),_defineProperty(t,"tobacco","No"),_defineProperty(t,"alcohol","Yes"),_defineProperty(t,"alcoholKind","Beer"),_defineProperty(t,"alcoholQuantity","Two a week"),_defineProperty(t,"drug","No"),_defineProperty(t,"drugKind",""),_defineProperty(t,"drugQuantity",""),_defineProperty(t,"problems",{constitutional:{check1:!1,check2:!1,check3:!1,check4:!0,check5:!1},ent:{check1:!0,check2:!1,check3:!1,check4:!0,check5:!1},eyes:{check1:!0,check2:!1,check3:!1,check4:!1,check5:!1},respiratory:{check1:!1,check2:!1,check3:!1,check4:!0,check5:!1},cardiovascular:{check1:!1,check2:!0,check3:!1,check4:!1},gastrointestinal:{check1:!0,check2:!1,check3:!1,check4:!1,check5:!1},endocrine:{check1:!1,check2:!1,check3:!1,check4:!0},genitourinary:{check1:!0,check2:!1,check3:!1,check4:!1},musculoskeletal:{check1:!1,check2:!1,check3:!1,check4:!1,check5:!1},skin:{check1:!1,check2:!1,check3:!0,check4:!1,check5:!1},enviromentalAllergies:{check1:!0,check2:!1,check3:!0,check4:!0},neurological:{check1:!1,check2:!1,check3:!0,check4:!1,check5:!1,check6:!1},hematologic:{check1:!1,check2:!1,check3:!1,check4:!0},psychiatric:{check1:!1,check2:!1,check3:!1,check4:!0},other:""}),t)}]),App.controller("userBlockController",["$scope",function(e){e.userBlockVisible=!0,e.$on("toggleUserBlock",function(t,n){e.userBlockVisible=!e.userBlockVisible})}]),App.directive("amountValidate",function(){return{restrict:"A",link:function(e,t,n){t.on("keydown",function(e){var t=e.keyCode;(e.altKey||e.shiftKey&&!_.includes(_.range(35,41),t)||!(e.ctrlKey||e.metaKey||8===t||9===t||13===t||46===t||110===t||190===t||e.shiftKey&&_.includes(_.range(35,41),t)||_.includes(_.range(35,41),t)||_.includes(_.range(48,58),t)||_.includes(_.range(96,106),t)||_.includes([0,229],t)))&&e.preventDefault()})}}}),App.directive("apptmini",["$interval",function(e){return{restrict:"AE",templateUrl:"/app/views/nav/bricks-mini/appointment.html",link:function(e,t,n){},controller:["$scope",function(e){}]}}]),App.directive("neAsideToggle",["$window","$document",function(e,t){return{restrict:"A",link:function(e,t){var n=angular.element(t)[0],a=document.getElementById("aside"),i=document.getElementById("main"),o=n.nextElementSibling,s=(a.getElementsByTagName("a"),{isopen:!1});o.style.display="none",mainPosition=function(){var e=i.getBoundingClientRect().top/i.clientHeight*-100;i.style.transformOrigin="0 "+e.toFixed(2)+"% 0px"},removeMenuAfterAnimation=function(){window.setTimeout(removeMenu,501)},removeMenu=function(){a.hasChildNodes()&&(child=a.childNodes[0],a.removeChild(child))},appendMenu=function(){a.appendChild(o)},navOpen=function(){a.classList.add("active"),s.isopen=!0,lg("opening nav. nav "+s.isopen,a.classList),appendMenu(),o.style.display="",document.body.style.overflow="hidden",a.onclick=function(e){e.target.hasAttribute("toggle-state")||(lg("clicked on aside"),navClose())},window.onkeyup=function(e){27!=e.keyCode&&13!=e.keyCode||(lg("pressed enter or esc"),navClose())},Array.from(a.getElementsByTagName("a:not([toggle-state])")).forEach(function(e){e.onclick=function(e){navClose()}})},navClose=function(){a.classList.remove("active"),s.isopen=!1,document.body.style.overflow="",lg("closing nav. nav "+s.isopen,a.classList),child=a.childNodes[0],removeMenuAfterAnimation()},t.bind("click",function(){mainPosition(),navOpen()})}}}]),App.directive("autofocus",["$timeout",function(e){return{restrict:"A",link:function(t,n,a){autofocusVal=t.$eval(a.autofocus),"undefined"!=typeof autofocusVal&&!0!==autofocusVal||e(function(){n[0].focus()})}}}]),App.directive("autogrow",function(){return function(e,t,n,a){var i=function(){t.css("height","auto"),t.css("height",t[0].scrollHeight+"px")};e.$watch(function(){return t.val()},function(){i()}),e.$watch(function(){return t[0].scrollHeight},function(){i()}),n.$set("ngTrim","false")}}),angular.module("checklist-model",[]).directive("checklistModel",["$parse","$compile",function(e,t){function n(e,t,n){if(angular.isArray(e))for(var a=e.length;a--;)if(n(e[a],t))return!0;return!1}function a(e,t,a){return e=angular.isArray(e)?e:[],n(e,t,a)||e.push(t),e}function i(e,t,n){if(angular.isArray(e))for(var a=e.length;a--;)if(n(e[a],t)){e.splice(a,1);break}return e}function o(o,s,r){function l(e,t){var n=d(o.$parent);angular.isFunction(m)&&(!0===t?m(o.$parent,a(n,e,f)):m(o.$parent,i(n,e,f)))}function c(e,t){if(_&&!1===_(o))return void l(g,o[r.ngModel]);o[r.ngModel]=n(e,g,f)}var p=r.checklistModel;r.$set("checklistModel",null),t(s)(o),r.$set("checklistModel",p);var d=e(p),m=d.assign,u=e(r.checklistChange),_=e(r.checklistBeforeChange),g=r.checklistValue?e(r.checklistValue)(o.$parent):r.value,f=angular.equals;if(r.hasOwnProperty("checklistComparator"))if("."==r.checklistComparator[0]){var h=r.checklistComparator.substring(1);f=function(e,t){return e[h]===t[h]}}else f=e(r.checklistComparator)(o.$parent);o.$watch(r.ngModel,function(e,t){if(e!==t){if(_&&!1===_(o))return void(o[r.ngModel]=n(d(o.$parent),g,f));l(g,e),u&&u(o)}}),
angular.isFunction(o.$parent.$watchCollection)?o.$parent.$watchCollection(p,c):o.$parent.$watch(p,c,!0)}return{restrict:"A",priority:1e3,terminal:!0,scope:!0,compile:function(e,t){if(("INPUT"!==e[0].tagName||"checkbox"!==t.type)&&"MD-CHECKBOX"!==e[0].tagName&&!t.btnCheckbox)throw'checklist-model should be applied to `input[type="checkbox"]` or `md-checkbox`.';if(!t.checklistValue&&!t.value)throw"You should provide `value` or `checklist-value`.";return t.ngModel||t.$set("ngModel","checked"),o}}}]),App.directive("counter",["$window",function(e){return{restrict:"A",link:function(t,n){elementCount=function(e){$(e).prop("Counter",0).animate({Counter:e.attributes.counter.value},{duration:2e3,easing:"swing",step:function(t){$(e).text(Math.ceil(t))}})},elementReset=function(e){$(e).prop("Counter",0).stop(!0),$(e).prop("Counter",void 0),$(e).text("")},getCountElPosition=function(e){var t=e.getBoundingClientRect();t.top>0&&t.top<.75*window.innerHeight?(e.setAttribute("counter-position","in-viewport"),elementCount(e)):t.top>window.innerHeight?(e.setAttribute("counter-position","below-viewport"),elementReset(e)):t.bottom<0&&e.setAttribute("counter-position","above-viewport")},angular.element(e).bind("scroll",function(){t.visible=!1,t.$apply(),getCountElPosition(n[0])})}}}]),App.directive("dateFormat",function(){return{restrict:"A",transclude:!0,link:function(e,t,n){t.on("keyup",function(n){e.$apply(function(){e.date_invalid_class=!moment(_.clone(t.val()),"MM/DD/YYYY",!0).isValid(),e.intake&&(e.intake.date_invalid_class=e.date_invalid_class)})})}}}),App.directive("neDesignGrid",["$interval",function(e){return{restrict:"E",scope:{},transclude:!0,templateUrl:"/app/views/partials/design-grid.html",link:function(e,t,n){},controller:["$scope",function(e){}]}}]),App.component("doctorCard",{templateUrl:"/app/views/doctor-card.html",bindings:{doctorInfo:"<"}}),App.directive("enterSubmit",function(){return{restrict:"A",link:function(e,t,n){t.bind("keydown",[e],function(t){t.metaKey&&13==t.keyCode&&e.sendMessage()})}}}),App.directive("fbpixel",function(){return{restrict:"AE",scope:{fbpixel:"="},link:function(e,t,n){e.$watch("fbpixel",function(e,t){if(void 0!==e){var n=e.analytics_codes[0];void 0!==n&&(!function(e,t,n,a,i,o,s){e.fbq||(i=e.fbq=function(){i.callMethod?i.callMethod.apply(i,arguments):i.queue.push(arguments)},e._fbq||(e._fbq=i),i.push=i,i.loaded=!0,i.version="2.0",i.queue=[],o=t.createElement(n),o.async=!0,o.src="https://connect.facebook.net/en_US/fbevents.js",s=t.getElementsByTagName(n)[0],s.parentNode.insertBefore(o,s))}(window,document,"script"),fbq("init",n),fbq("track","PageView"))}})}}}),App.directive("feoedit",function(){return{restrict:"EAC",templateUrl:"/app/views/forms/overlay.html",link:function(e,t,n){}}}),App.directive("formtreeedit",function(){return{restrict:"EAC",templateUrl:"/app/views/forms/partials/tree-edit.html",replace:!0}});var current_drop_target,draggable_options=function(e){return{revert:!0,revertDuration:0,appendTo:"body",containment:"document",scroll:!0,scrollSensitivity:90,scrollSpeed:70,delay:0,distance:4,opacity:.4,cursorAt:{top:-1,left:-1},animate:"false",start:function(){return lg("oh"),$(this).addClass("moving"),$(this).css("z-index","1000"),!0},stop:function(t,n){return current_drop_target&&e.menu_drop_listener($(this),current_drop_target,t,n),$(this).removeClass("moving"),$(this).css({height:"auto",width:"auto"}),$(".hovering").removeClass("hovering"),!0},drag:function(e,t){var n=document.elementFromPoint(e.clientX,e.clientY);if(n){var a=$(n);a.hasClass("menuelem")||a.hasClass("menuchildren")||(a=a.closest(".menuelem, .menuchildren").first(),a.hasClass("menuelem")||a.hasClass("menuchildren")||(a=!1)),current_drop_target!=a&&(a?(a.addClass("hovering"),$(".hovering").not(a).removeClass("hovering"),a.hasClass("menuelem")):$(".hovering").removeClass("hovering"),current_drop_target=a)}}}};App.directive("formtreemenu",function(){return{restrict:"EAC",templateUrl:"/app/views/forms/partials/tree-menu.html",link:function(e,t,n){var a=angular.copy(draggable_options(e));a.handle=".fa-arrows",t.draggable(a),e.$on("$destroy",function(){t.remove()})}}}),App.directive("templatedrag",function(){return{restrict:"EAC",link:function(e,t,n){var a=angular.copy(draggable_options(e));lg("tdi"),t.draggable(a),e.$on("$destroy",function(){t.remove()})}}}),App.directive("formtreeshow",function(){return{restrict:"E",templateUrl:"/app/views/forms/tree-show.html"}}),App.directive("googleTagManager",["GTMService",function(e){return{restrict:"E",scope:{googleTagManager:"=institution"},link:function(e,t,n,a){e.$watch("googleTagManager",function(e){var t=e&&e.gtm_tags[0];a.filterTagByEnv(t,function(e){e.forEach(function(e){document.getElementById(e)||appendGTMScriptElement(e)})})})},controller:function(){this.filterTagByEnv=e.filterTagByEnv}}}]);var appendGTMScriptElement=function(e){return function(t,n,a,i,o){t[i]=t[i]||[],t[i].push({"gtm.start":(new Date).getTime(),event:"gtm.js"});var s=n.getElementsByTagName(a)[0],r=n.createElement(a);r.async=!0,r.id=e,r.src="https://www.googletagmanager.com/gtm.js?id="+o,s.parentNode.insertBefore(r,s)}(window,document,"script","dataLayer",e)};App.directive("neGradientMap",["$window","$document","$compile","$templateCache",function(e,t,n,a){return{restrict:"A",link:function(e,t,n){if(!document.getElementById("article-gradient-map")){var a=document.createElement("svg");document.body.appendChild(a),a.outerHTML='<svg version="1.1" width="0" height="0" style="position: absolute; top: -1000px; left: -1000px;"><filter id="article-gradient-map"><feColorMatrix type="matrix" values="0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0" result="gray"></feColorMatrix><feComponentTransfer color-interpolation-filters="sRGB"><feFuncR type="table" tableValues="0 0 0"></feFuncR><feFuncG type="table" tableValues="0.35294117647058826 0.44313725490196076 0.796078431372549"></feFuncG><feFuncB type="table" tableValues="0.4 0.5019607843137255 0.8980392156862745"></feFuncB><feFuncA type="table" tableValues="1 1 1"></feFuncA></feComponentTransfer></filter></svg>'}var i=t[0];i.setAttribute("data-gradientmap-filter","article-gradient-map"),i.style.filter='url("#article-gradient-map")'}}}]),App.directive("halloro",function(){return{restrict:"A",scope:{halloro:"="},link:function(e,t,n){e.$watch("halloro",function(n){t.hallo({editable:!1});var a=new showdown.Converter;void 0!==e.halloro?t.html(Autolinker.link(function(e){return a.makeHtml(e)}(e.halloro))):t.html("(empty)")})}}}),App.directive("hallo",function(){return{restrict:"A",scope:{hallo:"="},require:"ngModel",link:function(e,t,n,a){function i(e){null==a.$modelValue?(o.val(""),t.html("")):(o.val(a.$modelValue),t.html(l(a.$modelValue))),t.hallo({plugins:{halloformat:{formattings:{bold:!0,italic:!0,strikethrough:!0,underline:!0}},halloreundo:{},hallolink:{},halloblacklist:{}},toolbar:"halloToolbarFixed",showAlways:!0,parentElement:t.closest(".hallowrap").find(".toolbar")}),p()}var o=t.closest(".hallowrap").find(".halloih"),s=function(e){var t=e.split("\n").map($.trim).filter(function(e){return""!=e}).join("\n");return toMarkdown(t)},r=new showdown.Converter,l=function(e){return r.makeHtml(e)},c=function(e){var t=s(e);o.value!=t&&(o.val(t),a.$setViewValue(t),a.$render())};t.bind("hallomodified",function(e,t){c(t.content)});var p=e.$watch(function(){return a.$modelValue},i)}}}),App.directive("integerValidate",function(){return{restrict:"A",link:function(e,t,n){t.on("keydown",function(e){var t=e.keyCode;(e.altKey||e.shiftKey&&!_.includes(_.range(35,41),t)||!(e.ctrlKey||e.metaKey||8===t||9===t||13===t||46===t||e.shiftKey&&_.includes(_.range(35,41),t)||_.includes(_.range(35,41),t)||_.includes(_.range(48,58),t)||_.includes(_.range(96,106),t)||_.includes([0,229],t)))&&e.preventDefault()})}}}),App.directive("loading",["$interval",function(e){return{restrict:"E",templateUrl:"/app/views/partials/loading.html"}}]),App.directive("myMention",["$http",function(e){return{require:"uiMention",link:function(e,t,n,a){var i=["PROVIDERFIRSTNAME","PROVIDERMIDDLENAME","PROVIDERLASTNAME","PROVIDERNAME","PATIENTFIRSTNAME","PATIENTMIDDLENAME","PATIENTLASTNAME","PATIENTNAME","PATIENTACTIVATIONCODE","LOCATIONNAME","LOCATIONADDRESS","IOSLINK","ANDROIDLINK"];a.label=function(e){return e},a.findChoices=function(e,t){console.log(e,t);var n=new RegExp(e[1].split("").join("\\w*").replace(/\W/,""),"i");return i.filter(function(e){if(e.match(n))return e})}}}}]),App.directive("ngSwitchMultiWhen",function(){return{transclude:"element",priority:800,require:"^ngSwitch",link:function(e,t,n,a,i){var o={transclude:i,element:t};angular.forEach(n.ngSwitchMultiWhen.split("|"),function(e){a.cases["!"+e]=a.cases["!"+e]||[],a.cases["!"+e].push(o)})}}}),App.directive("navInvisible",["$window","$timeout",function(e,t){return{link:function(n,a,i){var o=a[0],s="",r=function(){return document.getElementById("ne__nav__secondary")},l=function(){o.getBoundingClientRect().right+64>s.getBoundingClientRect().left?n.add_to_more(n.item.route):n.remove_from_more(n.item.route)},c=function(){""==s?(s=r(),l()):l()};angular.element(e).on("resize",function(){t(function(){c()})}),t(function(){c()},500)}}}]),App.directive("navSize",["$rootScope","$window",function(e,t){return{restrict:"A",link:function(e,n,a,i){var o=a.$$element[0];navSize=function(){window.pageYOffset>=window.innerHeight?o.setAttribute("nav-size","small"):o.setAttribute("nav-size","large")},navSizeWithHeader=function(){var e=document.getElementsByClassName("ne__article-header--picture")[0].clientHeight;window.pageYOffset>=e?o.setAttribute("nav-size","small"):o.setAttribute("nav-size","large")},navSizeBlogIndex=function(){document.getElementsByClassName("ne__article-grid")[0].getBoundingClientRect().top<=o.getBoundingClientRect().bottom?o.setAttribute("nav-size","small"):o.setAttribute("nav-size","large")},checkNav=function(){e.$state.includes("home.blog.article")?navSizeWithHeader():e.$state.includes("home.blog.index")?navSizeBlogIndex():navSize()},angular.element(t).bind("scroll",function(){checkNav()})}}}]),App.directive("searchOpen",["navSearch",function(e){return{restrict:"A",controller:["$scope","$element",function(t,n){n.on("click",function(e){e.stopPropagation()}).on("click",e.toggle)}]}}]).directive("searchDismiss",["navSearch",function(e){return{restrict:"A",controller:["$scope","$element",function(t,n){$('.navbar-form input[type="text"]').on("click",function(e){e.stopPropagation()}).on("keyup",function(t){27!=t.keyCode&&13!=t.keyCode||e.dismiss()}),$(document).on("click",e.dismiss),n.on("click",function(e){e.stopPropagation()}).on("click",function(){e.dismiss})}]}}]),App.directive("niceinput",["$compile",function(e){return{restrict:"E",scope:{placeholder:"@",name:"@",mymodel:"=ngModel"},require:"?ngModel",replace:!0,templateUrl:"/app/views/niceinput.html",link:function(e,t,n,a){e.$watch(function(){return a.$modelValue},function(t,n){e.myclass=t?"filled":""})}}}]),App.directive("now",["dateFilter","$interval",function(e,t){return{restrict:"E",link:function(n,a,i){function o(){var t=e(new Date,s);a.text(t)}var s=i.format;o(),t(o,1e3)}}}]),App.directive("neParallaxQuote",["$window",function(e){return{restrict:"A",link:function(t,n){parallaxQuote=function(e){var t=e.getBoundingClientRect();if(t.top<window.innerHeight&&t.bottom>0){var n=(t.top/window.innerHeight*100/2).toFixed(2),a=(8+t.top/window.innerHeight*100/7).toFixed();e.style.filter="blur("+a+"px)",e.style.transform="translateY("+n+"%)"}},angular.element(e).bind("scroll",function(){t.visible=!1,t.$apply(),parallaxQuote(n[0])})}}}]),App.directive("neParallax",["$window",function(e){return{restrict:"A",scope:{neParallax:"="},link:function(t,n){changeOpacity=function(e){var t=e.getBoundingClientRect(),n=(t.top/window.innerHeight*100).toFixed();percentage=n<0?0:n>100?100:n,lg(percentage),e.style.transform="translateY("+percentage/10+"vh)"},angular.element(e).bind("scroll",function(){changeOpacity(n[0])})}}}]),angular.module("phone-input",[]).directive("phoneInput",["$filter","$browser",function(e,t){return{require:"ngModel",link:function(n,a,i,o){var s=function(){var t=a.val().replace(/[^0-9]/g,"");a.val(e("tel")(t,!1))};o.$parsers.push(function(e){return e.replace(/[^0-9]/g,"").slice(0,10)}),o.$render=function(){a.val(e("tel")(o.$viewValue,!1))},a.bind("change",s),a.bind("keydown",function(e){var n=e.keyCode;91==n||15<n&&n<19||37<=n&&n<=40||t.defer(s)}),a.bind("paste cut",function(){t.defer(s)})}}}]),App.directive("nePosition",["$window",function(e){return{restrict:"A",link:function(t,n){getPosition=function(e){var t=e.getBoundingClientRect();t.top>0&&t.top<.75*window.innerHeight?e.setAttribute("ne-position","in-viewport"):t.top>window.innerHeight?e.setAttribute("ne-position","below-viewport"):t.bottom<0&&e.setAttribute("ne-position","above-viewport")},angular.element(e).bind("scroll",function(){t.visible=!1,t.$apply(),getPosition(n[0])})}}}]),App.directive("previewCampaign",["$templateCache",function(e){return{restrict:"E",replace:!1,scope:{preview:"=htmldata"},template:e.get("PREVIEWCAMPAIGN")}}]),App.directive("scrollBottom",["$timeout",function(e){return{restrict:"A",scope:{scrollBottom:"="},link:function(t,n){e(function(){$(n).scrollTop($(n)[0].scrollHeight)}),t.$watch("scrollBottom",function(t){e(function(){t&&$(n).scrollTop($(n)[0].scrollHeight)})},!0)}}}]),App.component("surveyAnswerEditor",{templateUrl:"/app/views/survey-answer-editor.html",bindings:{answerTypeDescription:"<",questionId:"<"}}),App.component("surveyQuestionList",{templateUrl:"/app/views/survey-question-list.html",bindings:{questions:"<"}}),App.component("surveySubmissionForm",{templateUrl:"/app/views/survey-submission-form.html",bindings:{questions:"<",appointmentId:"<"},controller:SurveySubmissionFormController});var formId="survey_submission_form";App.directive("tilter",function(){return{restrict:"A",scope:{tilter:"="},link:function(e,t){t[0].addEventListener("mousemove",function(e){var n=t[0].getBoundingClientRect(),a=((e.clientX-n.left)/n.width*10-5).toFixed(2),i=((e.clientY-n.top)/n.height*10-5).toFixed(2);t[0].style.transform="rotateX("+-1*i+"deg) rotateY("+a+"deg)"}),t[0].addEventListener("mouseleave",function(e){t[0].style.transform="rotateX(0deg) rotateY(0deg)"})}}}),App.directive("toggleState",["toggleStateService",function(e){return{restrict:"A",link:function(t,n,a){var i=$("body");$(n).on("click",function(t){t.preventDefault();var o=a.toggleState;o&&(i.hasClass(o)?(i.removeClass(o),$(".toggle-target").removeClass("toggle-target"),a.noPersist||e.removeState(o)):(i.addClass(o),$(n).addClass("toggle-target"),a.noPersist||e.addState(o)))})}}}]),App.factory("ProcedureCode",["restmod",function(e){return e.model("/campaigns/procedure_codes")}]),App.factory("Register",["restmod",function(e){return e.model("/account_requests")}]),App.factory("ActivatePatient",["restmod",function(e){return e.model("/activate_patients")}]),App.factory("ActivateProvider",["restmod",function(e){return e.model("/activate_providers")}]),App.factory("Activity",["restmod",function(e){return e.model("/patient_activities")}]),function(e,t){App.factory("AMSApi",["restmod","inflector",function(e,t){return e.mixin("DefaultPacker",{$config:{style:"AMS",primaryKey:"id",jsonMeta:"meta",jsonLinks:"links"}})}])}(angular),App.factory("Analytics",["restmod",function(e){return e.model("/analytics")}]),App.factory("AppointmentCategory",["restmod",function(e){return e.model("/appointment_categories")}]),App.factory("AppointmentSetting",["restmod",function(e){return e.model("/appointment_settings").mix({$hooks:{"before-request":function(){}}})}]),App.factory("AppointmentSlot",["restmod",function(e){return e.model("/appointment_slots")}]),App.factory("AppointmentType",["restmod",function(e){return e.model("/appointment_types")}]),App.factory("Appointment",["restmod",function(e){return e.model("/appointments")}]),App.factory("AsapListCancelBatch",["restmod",function(e){return e.model("/asap_list_cancel_batch")}]),App.factory("AsapList",["restmod",function(e){return e.model("/asap_lists")}]),App.factory("AsapPatients",["restmod",function(e){return e.model("/asap_patients")}]),App.factory("Authenticate",["restmod",function(e){return e.model("/authenticates")}]),App.factory("CampaignContinuingCareRecalls",["restmod",function(e){return e.model("/campaigns/continuing_care_recalls")}]),App.factory("CampaignLog",["restmod",function(e){return e.model()}]),App.factory("CampaignPatients",["restmod",function(e){return e.model("/campaigns/patients")}]),App.factory("CampaignSendCampaign",["restmod",function(e){return e.model()}]),App.factory("CampaignSendTest",["restmod",function(e){return e.model()}]),App.factory("CampaignSmsMsgsCount",["$api",function(e){return this.get=function(t){return e("GET","/campaigns/sms_msgs_count",t)},this}]),App.factory("Campaign",["restmod",function(e){return e.model("/campaigns").mix({logs:{hasMany:"CampaignLog"},send_test:{hasMany:"CampaignSendTest"},send_campaign:{hasMany:"CampaignSendCampaign"},campaign_setting:{init:function(){return{provider_ids:[],recipients_added_ids:[],recipients_removed_ids:[]}}},campaign_layout:{init:{}},"campaign_setting.appt_to":{decode:function(e){return null===e?null:moment.utc(e)}},"campaign_setting.appt_from":{decode:function(e){return null===e?null:moment.utc(e)}},"campaign_setting.last_seen_appt_from":{decode:function(e){return null===e?null:moment.utc(e)}},"campaign_setting.last_seen_appt_to":{decode:function(e){return null===e?null:moment.utc(e)}},$hooks:{"before-request":function(e){e.timeout=12e5}}})}]),App.factory("ChromeExtension",["$rootScope","DENTICON_CHROME_EXTENSION_ID","browser","$window","ngDialog","responseHelper","UserExtensionStats","FeatureFlag",function(e,t,n,a,i,o,s,r){return reminderPopup=function(e,t){opts={template:"/app/views/modal/chrome-extension-reminder.html",className:"ne__modal ne__modal--chrome-extension-reminder",scope:e,controller:"chromeExtensionModalCtrl",showClose:!1,closeByEscape:!1,closeByDocument:!1},e.reminderDialog=i.open(opts),e.reminderDialog.closePromise.then(function(e){if(setRemindLater(),!n.chrome)return sendChromeExtensionUsageStats(n.name);checkChromeExtensionVersion(t,function(e){return e?(o.toasterResponse("Extension enabled","success","Success"),sendChromeExtensionUsageStats(e.version)):sendChromeExtensionUsageStats("0")})})},shouldShowReminder=function(){return null==e.impersonationSessionId&&(saved=moment(a.localStorage.getItem("chrome-extension-reminder"),"YYYY-MM-DDTHH:mm:ss").valueOf()||0,now=moment(new Date).add(-10,"minutes").valueOf(),reminderTimeoutPassed=saved<now,reminderTimeoutPassed&&setRemindLater(),reminderTimeoutPassed)},setRemindLater=function(){var e=moment(new Date).format("YYYY-MM-DDTHH:mm:ss");a.localStorage.setItem("chrome-extension-reminder",e)},checkChromeExtensionVersion=function(e,t){if(chrome.runtime)try{chrome.runtime.sendMessage(e,{fetchVersion:!0},t)}catch(e){lg("error reaching chrome-extension reminder",e),setRemindLater()}else t(void 0)},retrieveChromeExtensionId=function(){var n=void 0;return e.locations.some(function(e){return e.foreign_id_type.includes("denticon")})&&(n=t),n},sendChromeExtensionUsageStats=function(e){return resp=s.$create({extension_version:e}),resp.$then(function(){return resp.$response.data.code||lg("error sending user stats",resp.$response.data),!0})},this.checkInstallation=function(e){var t=retrieveChromeExtensionId();t&&shouldShowReminder()&&(fflag=r.$find("show_modal_to_install_chrome_extension"),fflag.$then(function(){if(fflag.$response.data.data.show_modal_to_install_chrome_extension)return n.chrome?void checkChromeExtensionVersion(t,function(n){return n?(lg("Extension version: ",n.version),setRemindLater(),sendChromeExtensionUsageStats(n.version)):(reminderPopup(e,t),!1)}):(reminderPopup(e,t),!1)}))},this}]),App.factory("ClientAnalytic",["restmod",function(e){return e.model("/client_analytics")}]),App.factory("colors",["APP_COLORS",function(e){return{byName:function(t){return e[t]||"#fff"}}}]),App.factory("Contact",["restmod",function(e){return e.model("/contacts")}]),App.factory("Conversation",["restmod",function(e){return e.model("/conversations").mix({$config:{name:"data",plural:"data"}})}]),App.factory("CustomFormBuilder",["$rootScope","$stateParams","$state","Form","FormResponse","FormResponseCheckExisting","datesInTimezone","$q","browser","$window","$timeout","$api",function(e,t,n,a,i,o,s,r,l,c,p,d){var m=this;return this.setupForm=function(t){e.institution||(e.institution=t.form.institution),t.form.parent&&t.form.parent.tz?e.timezone=t.form.parent.tz:e.institution&&(e.timezone=e.institution.tz),t.isFilteredForm=t.filterType,filtered_sections=_.filter(t.form.sections,function(e){return m.filterSections(t,e)}),t.form_tabs=_.uniq(_.map(filtered_sections,function(e,t){return{name:e.form_section,index:t,caption:e.form_section_caption||e.form_section,group_section:e.group_section}})),t.form_group_tabs=_.uniq(_.map(t.form.sections,function(e,t){return e.group_section})),m.initialize(t),m.setTabs(t),m.toggleChildFields(t),m.focusOnFirstField(t)},this.filterSections=function(e,t){return!e.isFilteredForm||("group"==e.filterType?(no_patient_information_group_chosen="patient_information"!=e.filterId,is_the_patient_information_group="patient_information"==t.group_section,!(!no_patient_information_group_chosen||!is_the_patient_information_group)||e.filterId==t.group_section):"section"==e.filterType?(is_pediatric_form="pediatric"==e.form.form_type,no_child_information_section_chosen="child_information"!=e.filterId,is_the_child_information_section="child_information"==t.form_section,!!(is_pediatric_form&&no_child_information_section_chosen&&is_the_child_information_section)||(is_patient_or_custom_form=["patient","custom"].includes(e.form.form_type),no_personal_info_section_chosen="personal_info"!=e.filterId,is_the_personal_info_section="personal_info"==t.form_section,!!(is_patient_or_custom_form&&no_personal_info_section_chosen&&is_the_personal_info_section)||(e.form.documents.length>0&&"custom"==t.form_section||e.filterId==t.form_section))):void 0)},this.formGet=function(e){e.form_loading=!0,e.form=a.$find(e.form_id,{remember_token:e.remember_token}),e.form.$finally(function(){e.form.$response.data.code?(e.errors=[],e.user_id=e.form.$response.data.data.user_id,e.form=e.form.$response.data.data.form,m.setupForm(e)):(e.hide_buttons=!0,m.setErrors(e,e.form)),e.form_loading=!1})},this.setTabs=function(e){other_fields=_.filter(e.form.fields,function(e){return"custom"==e.form_section}),0==other_fields.length&&0==e.form.documents.length&&(e.form_tabs=_.filter(e.form_tabs,function(e){return"custom"!=e.name})),e.form_groups={},_.each(e.form.sections,function(t){e.form_groups[t.group_section]={caption:t.group_section_caption||t.group_section,tabs:_.filter(e.form_tabs,function(e){return e.group_section==t.group_section})}})},this.initialize=function(t){t.boolean_options=[{label:"Yes",value:!0},{label:"No",value:!1}],t.activePill=0,m.setCurrentTab(t),t.form_submit={},m.autoFillPatientsData(t),common_form_date=_.find(t.form.fields,function(e){return"common"==e.form_type&&"Date"==e.label}),common_form_date&&(t.is_mobile?new_date=new Date:(new_date=moment().tz(e.timezone),new_date=m.dateFormat(new_date,"MM/DD/YYYY")),t.form_submit[common_form_date.id]=new_date),country_field=_.find(t.form.fields,function(e){return"common"==e.form_type&&"country"==e.ehr_attr_name}),country_field&&(usa=_.find(country_field.options,function(e){return"USA"==e.label})||country_field.options[0],t.form_submit[country_field.id]=usa.id),m.setPaymentsForm(t),m.setTabIndexes(t),m.startFormWatch(t),m.startKeyPressWatch(t)},this.setPaymentsForm=function(t){t.form&&t.form.fields&&(payments_field=_.find(t.form.fields,function(e){return"payments"==e.field_type}),payments_field&&(t.payment_loading=!0,opts={institution_id:e.institution.id},e.location&&(opts.location_id=e.location.id),d("GET","/get_braintree_token",opts).finally(function(){t.payment_loading=!1}).then(function(e){if(err_msg="There was an error on show credit card fields",e&&e.data&&e.data.code&&e.data.data){var n=e.data.data.braintree_client_token;if(btDropInElement=document.createElement("div"),btDropInElement.id=t.braintree_dropin||"bt-dropin",btWrapperElement=document.getElementById(t.braintree_wrapper||"bt-drop-in-wrapper"),!btWrapperElement)return;btWrapperElement.appendChild(btDropInElement),braintree.dropin.create({authorization:n,container:"#"+btDropInElement.id,paypal:{flow:"vault"}},function(e,n){$(".braintree-sheet__text").html("Add card"),e?p(function(){t.errors=[err_msg]},0):t.payments_appt_booking&&(form=document.querySelector("#intake_form"),form.addEventListener("submit",function(e){t.form_submitting||(t.form_submitting=!0,n.isPaymentMethodRequestable()?n.requestPaymentMethod(function(e,n){p(function(){e?(t.errors=["Please check your credit card details and try again."],t.form_submitting=!1,t.loading=!1):t.sendRegisterAction(n.nonce)},0)}):p(function(){payments_field.is_required?(t.errors=["Please check your credit card details and try again."],t.form_submitting=!1,t.loading=!1):t.sendRegisterAction()},0))}))})}else t.errors=[err_msg]})))},this.setTabIndexes=function(e){field_index=0,_.each(e.form.fields,function(e){field_index+=1,e.tabindex=field_index,"boolean"==e.field_type&&(field_index+=1),_.each(e.options,function(e){field_index+=1,e.tabindex=field_index})})},this.autoFillPatientsData=function(e){_.each(e.form.fields,function(t){t.options&&t.options.length&&_.includes(_.map(t.options,"user_attr_name"),"unsubscribe_sms")?unsubscribe_field=!0:unsubscribe_field=!1,e.user_id&&t.responses&&t.responses.length&&t.responses[0].values?(response_value=t.responses[0].values,"date"==t.field_type&&response_value&&(e.is_mobile?new_date=new Date(response_value):(new_date=moment(response_value),new_date=m.dateFormat(new_date,"MM/DD/YYYY")),response_value=new_date),e.form_submit[t.id]=response_value,unsubscribe_field||(t.non_editable=!0)):!e.user_id&&unsubscribe_field&&(e.form_submit[t.id]=_.map(t.options,"id"))})},this.toggleChildFields=function(e){fields_with_children=_.filter(m.fieldsBySection(e),function(e){return e.with_child_fields}),_.each(fields_with_children,function(t){m.toggleChildField(e,t)})},this.toggleChildField=function(e,t){if(!t.with_child_fields)return!1;child_fields=_.filter(e.form.fields,function(e){return e.parent_field_id==e.id}),child_fields_html=$(".parent_field_id_"+t.id),e.form_submit[t.id]?(child_fields_html.fadeIn("fast",function(){$(this).removeClass("hidden")}),child_fields_html.parent()[0]&&"child-fields"!=child_fields_html.parent()[0].className&&child_fields_html.wrapAll('<div class="child-fields"></div>')):child_fields_html.fadeOut("fast",function(){$(this).addClass("hidden")})},this.fieldsBySection=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.currentTab,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t?(fields=e.form.fields,n&&(fields=_.filter(fields,function(e){return!e.is_hidden})),"online_booking"==e.form.form_type?fields:(fields=_.filter(fields,function(e){return e.form_section==t.name}),e.isFilteredForm&&"section"==e.filterType&&["child_information","personal_info"].includes(t.name)?["child_information","personal_info"].includes(e.filterId)?(_.each(e.form.identifiable_fields,function(e){_.find(fields,function(t){return t.id==e.id})||fields.push(e)}),fields):e.form.identifiable_fields:fields)):e.form.fields},this.dateFormat=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"YYYY-MM-DD";return e?(converted_date=s.convertFromUserToLocTimezone(e,!1),converted_date&&(e=converted_date.format(t)),e):null},this.toggleBoolean=function(e,t,n){e.form_submitting||t.non_editable||(e.form_submit[t.id]=n.value,m.toggleChildField(e,t))},this.toggleOption=function(e,t,n){e.form_submitting||t.non_editable||(field_submitted=e.form_submit[t.id]||[],-1==field_submitted.indexOf(n.id)?"checkbox"==t.field_type?field_submitted.push(n.id):field_submitted=[n.id]:_.remove(field_submitted,function(e){return e==n.id}),e.form_submit[t.id]=field_submitted,m.toggleChildField(e,t))},this.optionIsChecked=function(e,t,n){return e.form_submit[t.id]&&-1!=e.form_submit[t.id].indexOf(n.id)},this.toggleFormPolicy=function(e,t,n){arguments.length>3&&void 0!==arguments[3]&&arguments[3]&&13!=t.keyCode&&13!=t.which||(e.form_submit.documents||(e.form_submit.documents={}),e.form_submit.documents[n]?delete e.form_submit.documents[n]:e.form_submit.documents[n]=!0)},this.goToStep=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e.form_submitting||(!t&&0!=t||t!=e.activePill)&&(t&&t>e.maxStepSubmitted+1||(is_step_forward=t&&t>e.activePill||n,e.currentTab&&!e.form_valid&&is_step_forward||(e.errors=[],e.defered_existing_responses=r.defer(),e.defered_existing_responses.promise.then(function(){t||0==t?e.activePill=t:n?e.activePill=e.activePill+1:e.activePill&&(e.activePill=e.activePill-1),m.setCurrentTab(e,is_step_forward),m.validateForm(e),c.scrollTo(0,0),m.toggleChildFields(e),m.focusOnFirstField(e)}),is_step_forward?perform_checkings=!0:perform_checkings=!1,m.checkNoResponsesForCommonForm(e,perform_checkings))))},this.setCurrentTab=function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1]&&(e.currentTab?e.maxStepSubmitted=_.max([e.maxStepSubmitted,e.currentTab.index]):e.maxStepSubmitted=0),e.currentTab=_.find(e.form_tabs,function(t){return t.index==e.activePill}),e.currentTab&&(e.currentTab.visited=!0)},this.startFormWatch=function(e){e.$watch("form_submit",function(t,n){m.validateForm(e)},!0)},this.startKeyPressWatch=function(e){$(document).on("keydown","input, select",function(t){if(e.is_mobile&&(13==t.which||13==t.keyCode)||9==t.which||9==t.keyCode){t.preventDefault(),t.stopPropagation();var n=$(".ne__fieldset__group :tabbable:visible:not(:disabled):not([readonly])"),a=n.index(t.currentTarget);if(a==n.length-1){var i=$(".ne__btn__group :tabbable:visible:not(:disabled):not([readonly])");i[0]&&i[0].focus()}else n[a+1].focus()}})},this.focusOnFirstField=function(e){e.preview||p(function(){first_visible_field=$(".ne__fieldset__group :tabbable:visible")[0],first_visible_field&&first_visible_field.focus()},100)},this.validateForm=function(e){valid=!0,_.each(m.fieldsBySection(e),function(t){!t.is_required||"payments"==t.field_type||t.is_hidden&&e.hideForExistingPatients||!m.isFieldValueEmpty(e,t.id)||(valid=!1),"ssn"!=t.ehr_attr_name||m.isFieldValueEmpty(e,t.id)||(ssn_regex=new RegExp(e.ssn_pattern,"g"),e.form_submit[t.id].match(ssn_regex)||(valid=!1)),"date"!=t.field_type||e.is_mobile||m.isFieldValueEmpty(e,t.id)||moment(_.clone(e.form_submit[t.id]),"MM/DD/YYYY",!0).isValid()||(valid=!1)}),e.activePill>=e.form_tabs.length-1&&_.each(e.form.documents,function(t){m.isFieldValueEmpty(e,t.id,"documents")&&(valid=!1)}),e.form_valid=valid},this.isFieldValueEmpty=function(e,t,n){return form_field=n?e.form_submit[n]&&e.form_submit[n][t]:e.form_submit[t],"undefined"==typeof form_field||angular.equals(form_field,[])||angular.equals(form_field,{})||_.includes(["",null,void 0],form_field)},this.checkNoResponsesForCommonForm=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e.user_id||!t?void e.defered_existing_responses.resolve(!0):(ssn_field=_.filter(m.fieldsBySection(e),function(e){return"ssn"==e.ehr_attr_name})[0],ssn_field?(ssn_field_value=e.form_submit[ssn_field.id],ssn_field_value?(e.form_submitting=!0,ssn_params={form_id:e.form.id,check_responses_by_ssn:ssn_field_value},form_responses=o.$search(ssn_params),void form_responses.$finally(function(){e.form_submitting=!1,form_responses.$response.data.code?(e.errors=[],m.checkNoResponsesForCommonFormByUser(e)):m.setErrors(e,form_responses)})):void m.checkNoResponsesForCommonFormByUser(e)):void m.checkNoResponsesForCommonFormByUser(e))},this.checkNoResponsesForCommonFormByUser=function(e){
if(user_field_phones=["bio['phone_number']","bio['home_phone_number']","bio['work_phone_number']"],any_user_field=_.filter(m.fieldsBySection(e),function(e){return _.includes(user_field_phones,e.user_attr_name)})[0],!any_user_field)return void e.defered_existing_responses.resolve(!0);e.form_submitting=!0,fields=m.formFields(e),user_field_names=["bio['phone_number']","bio['home_phone_number']","bio['work_phone_number']","first_name","last_name","email"],user_fields=_.filter(fields,function(e){return _.includes(user_field_names,e.user_attr_name)}),user_params={"fields[]":user_fields,form_id:e.form.id,user_id:e.user_id,check_responses_by_user:!0},form_responses=o.$search(user_params),form_responses.$finally(function(){e.form_submitting=!1,form_responses.$response.data.code?(e.errors=[],e.defered_existing_responses.resolve(!0)):m.setErrors(e,form_responses)})},this.formSubmit=function(e){e.form_submitting=!0,form_response=i.$new(),form_response.fields=m.formFields(e),form_response.form_id=e.form.id,form_response.user_id=e.user_id,form_response.form_sections=_.map(e.form_tabs,function(e){return e.name}),form_response.$save().$finally(function(){e.form_submitting=!1,form_response.$response.data.code?(e.errors=[],n.go("patient_form_thank_you")):m.setErrors(e,form_response)})},this.formFields=function(e){return fields=[],_.each(e.form_submit,function(t,n){if(field=_.find(e.form.fields,function(e){return e.id==n}),field)if(res={ehr_attr_name:field.ehr_attr_name,user_attr_name:field.user_attr_name},"checkbox"==field.field_type)_.each(t,function(e){fields.push(_.extend({},res,{form_field_id:n,form_option_id:e}))});else{switch(angular.isArray(t)&&(t=t[0]),res.form_field_id=n,field.field_type){case"boolean":res.response_boolean=t;break;case"radio":case"dropdown_list":res.form_option_id=t;break;case"date":res.response_body=m.dateFormat(t,"YYYY-MM-DD");break;default:_.isEmpty(_.trim(t))||(res.response_body=encodeURIComponent(t))}fields.push(res)}}),fields},this.setErrors=function(e,t){t.$response.error&&t.$response.error[0]?e.errors=t.$response.error:e.errors=t.$response.data.error},this.start=function(e,n){var a=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments[4],s=arguments[5];e.form_id=n,e.filterType=o,e.filterId=s,e.remember_token=t.rememberToken,e.form_loading=!0,e.other_tab_name="Other",e.ssn_pattern="^[0-9]{3}-?[0-9]{2}-?[0-9]{4}$",e.is_mobile=l.mobile,e.preview=a,e.payments_appt_booking=i,a?(e.form=e.preview_form,m.setupForm(e),e.errors=[],e.form_loading=!1):m.formGet(e)},this}]),App.factory("CustomMsg",["restmod",function(e){return e.model("/custom_msgs")}]),App.factory("DemoReq",["restmod",function(e){return e.model("/demo_requests")}]),App.factory("Doctor",["restmod",function(e){return e.model("/doctors")}]),App.factory("Document",["restmod",function(e){return e.model("/documents")}]),App.factory("Emr",["restmod",function(e){return e.model("/emrs")}]),App.factory("EnliveDocumentDetails",["$cookies","SERVER_BASE_URL",function(e,t){return{display_url:function(n){var a=n.document_id,i=n.location_id,o=e.get("auth"),s=e.get("subdomain");return t+"/enlive_documents/"+a+"/?location_id="+i+"&remember_token="+o+"&subdomain="+s}}}]),App.factory("EnliveDocument",["restmod",function(e){return e.model("/enlive_documents")}]),App.factory("EnliveRequestDocumentDetails",["$cookies","SERVER_BASE_URL",function(e,t){return{display_url:function(n){var a=n.request_id,i=n.document_id,o=n.location_id,s=e.get("auth"),r=e.get("subdomain");return t+"/enlive_requests/"+a+"/display_document/"+i+"/?location_id="+o+"&remember_token="+s+"&subdomain="+r}}}]),App.factory("EnliveRequest",["restmod","$api",function(e,t){return e.model("/enlive_requests").mix({$extend:{Record:{sync:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t("POST","/enlive_requests/"+this.id+"/sync",e)}}}})}]),App.factory("EnliveSmartCommand",["restmod",function(e){return e.model("/enlive_smart_commands")}]),App.factory("FeatureFlag",["restmod",function(e){return e.model("/feature_flags")}]),App.factory("FormResponseCheckExisting",["restmod",function(e){return e.model("/form_responses/check_existing")}]),App.factory("FormResponse",["restmod",function(e){return e.model("/form_responses")}]),App.factory("Form",["restmod",function(e){return e.model("/forms")}]),App.factory("Institution",["restmod",function(e){return e.model("/institutions")}]),App.factory("InsuranceCarrier",["restmod",function(e){return e.model("/insurance_carriers")}]),App.factory("InsurancePlan",["restmod",function(e){return e.model("/insurance_plans")}]),App.factory("Invite",["restmod",function(e){return e.model("/invites")}]),App.factory("InvitePatients",["restmod",function(e){return e.model("/invite_patients")}]),App.factory("LinkObfuscate",["restmod",function(e){return e.model("/link_obfuscates")}]),App.factory("Location",["restmod",function(e){return e.model("/locations")}]),App.factory("Medication",["restmod",function(e){return e.model("/medications")}]),App.factory("Message",["restmod",function(e){return e.model("/messages")}]),App.factory("Notification",["restmod",function(e){return e.model("/notifications").mix({$hooks:{"before-request":function(){}}})}]),App.factory("Operatory",["restmod",function(e){return e.model("/operatories")}]),App.factory("PatientSearch",["restmod",function(e){return e.model("/patient_searches").mix({$hooks:{"before-request":function(){}}})}]),App.factory("PatientVerifyPhone",["restmod",function(e){return e.model()}]),App.factory("Patient",["restmod",function(e){return e.model("/patients").mix({verify_phone:{hasMany:"PatientVerifyPhone"}})}]),App.factory("PaymentBankSetup",["restmod",function(e){return e.model("/payment_setups")}]),App.factory("PaymentMethod",["restmod",function(e){return e.model("/payment_methods")}]),App.factory("PaymentStatusUpdate",["restmod",function(e){return e.model()}]),App.factory("PaymentStatuses",["restmod",function(e){return e.model("/payments/statuses")}]),App.factory("Payment",["restmod",function(e){return e.model("/payments").mix({status_update:{hasMany:"PaymentStatusUpdate"}})}]),App.factory("OfficePolicy",["restmod",function(e){return e.model("/office_policies")}]),App.factory("ProviderConnect",["restmod",function(e){return e.model("/provider_connects")}]),App.factory("Provider",["restmod",function(e){return e.model("/providers")}]),App.factory("ReminderResponse",["restmod",function(e){return e.model("/reminder_responses")}]),App.filter("removeunderscores",function(){return function(e){return e.replace(/_/g," ")}}),App.factory("Reset",["restmod",function(e){return e.model("/password_resets")}]),App.factory("responseHelper",["toaster","$state","authService","$rootScope",function(e,t,n,a){return{redirectOrToastOnResp:function(a,i,o){var s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:5e3;if(200===a.$response.status)return!0===a.$response.data.code?(this.toasterResponse(a.$response.data.description,"success","Success"),void 0!=i&&(!0===_.isObject(i)?t.go.apply(t,_toConsumableArray(i)):t.go(i,s,{reload:r})),!0):!1===a.$response.data.code&&(this.toasterResponse(this.errMsg(a),"error","Error",c),void 0!=o&&t.go(o,l),!1);if(-1!==[403,404].indexOf(a.$response.status))return this.toasterResponse(this.errMsg(a),"error","Error"),!1;if(422===a.$response.status)return this.toasterResponse(this.errMsg(a),"warning","Error"),void 0!=o&&t.go(o,l),!1;if(304===a.$response.status);else{if(a.$response.status>=500)return e.pop("error","Error","Server error, please contact us."),!1;if(401===a.$response.status)return n.willUnauthorizeUser(),this.toasterResponse(this.errMsg(a),"error","Error"),t.go("login"),!1}},willAuthorizeUser:function(e){var t=e.$response.data.data;n.willAuthorizeUser(t.user,t.subdomain,t.institution,t.remember_token,t.location_id)},willStoreCookie:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;lg("WSC",e);var i=e.$response.data.data;!0===e.$response.data.code?"Patient"==e.utype?(lg("got patient"),this.redirectOrToastOnResp(e,nil)):(n.willAuthorizeUser(i.user,i.subdomain,i.institution,i.remember_token,i.location_id,t),a.user.id=i.user.id,a.user.meta_type=i.user.meta_type,a.user.picture=i.user.profile_url,a.user.name=i.user.name,a.user.email=i.user.email,a.user.title=i.user.meta_type,a.user.min_appt_length=i.user.min_appt_length,lg("stored cookies",a.user),!1!==e.redirect&&this.redirectOrToastOnResp(e,"app.activities")):this.redirectOrToastOnResp(e)},checkError:function(t){404===t.status?e.pop("error","Record not found"):401===t.status?a.logOut():status.code>=500||t.status>=500?e.pop("error","Internal server error."):"error"!=t.xhrStatus&&"abort"!=t.xhrStatus||this.toasterResponse("We’ve encountered an issue, please try refreshing the page","error","Error(timeout)",0)},errMsg:function(e){return e.$response.data.error&&e.$response.data.error.length?e.$response.data.error:e.$response.data.description},toasterResponse:function(t,n,a){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:5e3;t&&(angular.isArray(t)?t.forEach(function(t){t&&e.pop({type:n,title:a,body:t,bodyOutputType:"trustedHtml",timeout:i})}):e.pop({type:n,title:a,body:t,bodyOutputType:"trustedHtml",timeout:i}))}}}]),App.factory("restmodMixin",["restmod","authService","$state","responseHelper","cfpLoadingBar","$location",function(e,t,n,a,i,o){return e.mixin({$hooks:{"before-request":function(e){var n=t.getUserSubdomain(),a=t.getAuth();i.includeBar=!0,i.includeSpinner=!0;var o=void 0;o=void 0!==a?{"Content-Type":"application/json",Accept:"application/vnd.Nexhealth+json; version=1",Authorization:a,"If-None-Match":"s"}:{"Content-Type":"application/json",Accept:"application/vnd.Nexhealth+json; version=1"};var s={subdomain:n};e.params=angular.extend(s,e.params),e.headers=angular.extend(o),e.timeout=12e4},"after-feed":function(e){},"after-request-error":function(e){a.checkError(e)}}})}]),App.factory("SurveySubmissions",["restmod",function(e){return e.model("/survey_submissions")}]),App.filter("tel",function(){return function(e){if(!e)return"";var t=e.toString().trim().replace(/^\+/,"");if(t.startsWith("1")&&(t=t.slice(1)),t.match(/[^0-9]/))return e;var n,a;switch(t.length){case 1:case 2:case 3:n=t;break;default:n=t.slice(0,3),a=t.slice(3)}return a?(a=a.length>3?a.slice(0,3)+"-"+a.slice(3,7):a,("("+n+") "+a).trim()):"("+n}}),App.factory("Timeline",["restmod",function(e){return e.model("/timelines")}]),App.factory("Transaction",["restmod",function(e){return e.model("/transactions")}]),App.factory("User",["restmod",function(e){return e.model("/user")}]),App.factory("UserExtensionStats",["restmod",function(e){return e.model("/user_extension_stats")}]),App.service("angularChart",function(){return{setGrowthChartConfig:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return growthChartColors=["#7F98DE"],growthChartOptions={events:!1,tooltips:{enabled:!1},hover:{animationDuration:0},animation:{onComplete:function(){var e=this.chart,n=e.ctx;n.font=Chart.helpers.fontString(Chart.defaults.global.defaultFontSize,Chart.defaults.global.defaultFontStyle,Chart.defaults.global.defaultFontFamily),n.textAlign="center",n.textBaseline="bottom",this.data.datasets.forEach(function(a,i){e.controller.getDatasetMeta(i).data.forEach(function(e,i){var o=a.data[i];if(o>0){if(t)var o=""+t+o;n.fillText(o,e._model.x+12,e._model.y-10)}})})}},scales:{yAxes:[{id:"y-axis-2",type:"linear",display:!0,position:"right",gridLines:{display:!1},ticks:{maxTicksLimit:5,min:0}}],xAxes:[{gridLines:{display:!1}}]}},e&&(growthChartOptions.scales.yAxes[0].ticks.callback=function(e,t,n){if(Math.floor(e)===e)return e}),[growthChartColors,growthChartOptions]},statLabels:function(e){return _.map(e,function(e){return date=moment(e),weekday=date.format("ddd"),month_year=date.format("MMM DD"),[weekday,month_year]})},increaseMaxYValue:function(e,t){e.scales.yAxes[0].ticks.suggestedMax=t+1},fullDateRangeOptions:function(){return{applyClass:"btn-green",showCustomRangeLabel:!1,alwaysShowCalendars:!0,linkedCalendars:!1,autoApply:!0,locale:{applyLabel:"Apply",fromLabel:"From",format:"YYYY-MM-DD",toLabel:"To",cancelLabel:"Cancel",customRangeLabel:"Custom range"},ranges:{Today:[moment(),moment()],"This Week":[moment().startOf("isoWeek"),moment().endOf("isoWeek")],"This Month":[moment().startOf("month"),moment().endOf("month")],"This Year":[moment().startOf("year"),moment().endOf("year")],Yesterday:[moment().add(-1,"days"),moment().add(-1,"days")],"Last Week":[moment().subtract(1,"weeks").startOf("isoWeek"),moment().subtract(1,"weeks").endOf("isoWeek")],"Last Month":[moment().subtract(1,"month").startOf("month"),moment().subtract(1,"month").endOf("month")],"All Time":[moment("2010-01-01","YYYY-MM-DD"),moment()]},eventHandlers:{}}}}}),App.service("$api",["authServiceHelpers","$http","SERVER_BASE_URL",function(e,t,n){return function(a,i,o,s,r){r=r||{};var l=e.getUserAuthorization();if(void 0!==l.auth)var c=l.auth;var p=e.getUserSubdomain();if(void 0===p)var d=""+n+i;else var d=""+n+i+"?subdomain="+p;headers=r.headers||{},headers.Authorization=c,"PUT"!=a&&"POST"!=a||(headers["Content-Type"]="application/json;charset=UTF-8",r.transformRequest=r.transformRequest||angular.toJson);var m={method:a,url:d,headers:headers,data:s,params:o,paramSerializer:r.paramSerializer||"$httpParamSerializerJQLike",response_type:"json"};return r.transformRequest&&(m.transformRequest=r.transformRequest),t(m)}}]),App.service("authService",["$api","$rootScope","$cookies","$location","$state","$http","$timeout","USER_TYPES","authServiceHelpers",function(e,t,n,a,i,o,s,r,l){return{setCookie:function(e,t){for(var a in e)value=e[a],t?n.put(a,value,{expires:t}):n.put(a,value)},willAuthorizeUser:function(e,n,a,i,o,s){var r=this;cookies=[{auth:i},{userType:e.meta_type},{provider_id:e.id},{name:e.name},{subdomain:n},{image:e.profile_url},{min_appt_length:e.min_appt_length},{patientable:e.patientable},{email:e.email},{location_id:o}],a&&cookies.push({institution_id:a.id});var l=null;s&&(cookies.push({impersonationSessionId:s}),l=new Date,l.setHours(l.getHours()+4)),cookies.forEach(function(e){r.setCookie(e,l)}),t.impersonationSessionId=s,t.remember_token=i,t.subdomain=n,pendo.identify(this.pendoInitOpts())},removeCookies:function(){n.remove("auth"),n.remove("userType"),n.remove("provider_id"),n.remove("name"),n.remove("subdomain"),n.remove("image"),n.remove("min_appt_length"),n.remove("patientable"),n.remove("email"),n.remove("location_id"),n.remove("institution_id"),n.remove("impersonationSessionId"),n.remove("email"),n.put("image"),t.impersonationSessionId=void 0,t.remember_token=void 0,t.subdomain=void 0},cleanLocalStorage:function(){t.$storage.removeItem("apptBookingData")},willUnauthorizeUser:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];lg("Unauthorizing user..."),e("DELETE","/authenticates/0",{impersonation_session_id:this.impersonationSessionId(),from_intake_page:t}),this.removeCookies(),t||this.cleanLocalStorage(),pendo.identify(this.pendoInitOpts())},willRouteByUserType:function(e){return"Patient"===this.getUserType()?i.go(e+=".patient"):"Doctor"===this.getUserType()||"Nurse"===this.getUserType()?i.go(e+=".doctor"):state.go(e)},pendoInitOpts:function(){return{visitor:{id:this.getUserId(),email:this.getUserEmail(),full_name:this.getUserName(),user_type:this.getUserType()},account:{id:this.getInstitutionId(),subdomain:this.getUserSubdomain()}}},isDoctor:l.isDoctor,isRN:l.isRN,isNP:l.isNP,isPA:l.isPA,isMA:l.isMA,isStaff:l.isStaff,isUserAuthorized:l.isUserAuthorized,isPatientable:l.isPatientable,getUserAuthorization:l.getUserAuthorization,getAuth:l.getAuth,getUserType:l.getUserType,getUserId:l.getUserId,getMinApptLength:l.getMinApptLength,getInstitutionId:l.getInstitutionId,getUserSubdomain:l.getUserSubdomain,getUserName:l.getUserName,getUserEmail:l.getUserEmail,getUserImageUrl:l.getUserImageUrl,getLocationId:l.getLocationId,impersonationSessionId:l.impersonationSessionId,isProvider:l.isProvider,isStaffOrNurse:l.isStaffOrNurse}}]),App.service("authServiceHelpers",["$cookies","$timeout","USER_TYPES","$rootScope",function(e,t,n,a){return{isDoctor:function(){return"Doctor"==e.get("userType")},isRN:function(){return"RegisteredNurse"==e.get("userType")},isNP:function(){return"NursePracticioner"==e.get("userType")},isPA:function(){return"PhysicianAssistant"==e.get("userType")},isMA:function(){return"MedicalAssistant"==e.get("userType")},isStaff:function(){return"Staff"==e.get("userType")},isUserAuthorized:function(){t(function(){return void 0!==e.get("auth")})},isPatientable:function(){return e.get("patientable")},getUserAuthorization:function(){return{auth:e.get("auth"),type:e.get("userType"),name:e.get("name"),subdomain:e.get("subdomain")}},getAuth:function(){var t=e.get("auth");return t||(a.impersonationSessionId?void 0:a.remember_token)},getUserType:function(){return e.get("userType")},getUserId:function(){return e.get("provider_id")},getMinApptLength:function(){return e.get("min_appt_length")},getUserSubdomain:function(){return e.get("subdomain")||a.subdomain},getInstitutionId:function(){return e.get("institution_id")},getUserName:function(){return e.get("name")},getUserEmail:function(){return e.get("email")},getUserImageUrl:function(){return e.get("image")},getLocationId:function(){return e.get("location_id")},impersonationSessionId:function(){return e.get("impersonationSessionId")},isProvider:function(){return-1!=n.provider_types.indexOf(e.get("userType"))},isStaffOrNurse:function(){return-1!=n.staff_types.indexOf(e.get("userType"))}}}]),App.service("browser",function(){var e=void 0,t=void 0;if(e=function(e){e=e.toLowerCase();var t=/(opr)[\/]([\w.]+)/.exec(e)||/(chrome)[ \/]([\w.]+)/.exec(e)||/(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("trident")>=0&&/(rv)(?::| )([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[],n=/(ipad)/.exec(e)||/(iphone)/.exec(e)||/(android)/.exec(e)||/(windows phone)/.exec(e)||/(win)/.exec(e)||/(mac)/.exec(e)||/(linux)/.exec(e)||/(cros)/i.exec(e)||[];return{browser:t[3]||t[1]||"",version:t[2]||"0",platform:n[0]||""}}(window.navigator.userAgent),t={},e.browser&&(t[e.browser]=!0,t.version=e.version,t.versionNumber=parseInt(e.version)),e.platform&&(t[e.platform]=!0),(t.android||t.ipad||t.iphone||t["windows phone"])&&(t.mobile=!0),(t.cros||t.mac||t.linux||t.win)&&(t.desktop=!0),(t.chrome||t.opr||t.safari)&&(t.webkit=!0),t.rv){e.browser="msie",t.msie=!0}if(t.opr){e.browser="opera",t.opera=!0}if(t.safari&&t.android){e.browser="android",t.android=!0}return t.name=e.browser,t.platform=e.platform,t}),App.service("AppCable",["$rootScope","authService","SERVER_BASE_URL_NOPRO","SERVER_BASE_CABLE_URL","webNotification","$state","$stateParams",function(e,t,n,a,i,o,s){browserTabIsActive=function(){var e,t,n={hidden:"visibilitychange",webkitHidden:"webkitvisibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange"};for(e in n)if(e in document){t=n[e];break}return function(n){return n&&document.addEventListener(t,n),!document[e]}}(),showNotification=function(t){i.showNotification(t.message.title,{body:t.message.body,icon:t.message.ico,onClick:function(){switch(t.message.action){case"route":if(t.message.params&&t.message.params.location_id){var n=e.locations.find(function(e){return e.id==parseInt(t.message.params.location_id)});n&&e.location&&e.location.id!=n.id&&e.set_main_location(n)}o.transitionTo(t.message.state,t.message.params);break;case"modal":e.$broadcast("notifModal",t.message);break;default:lg("Unrecognized notif type",t)}},requireInteraction:t.message.requireInteraction||!1,autoClose:0},function(e,t){})},passedLocationDiffersFromCurrent=function(t){if(t.message.params&&t.message.params.location_id&&e.location&&parseInt(t.message.params.location_id)!=parseInt(e.location.id))return!0},backgroundJob=function(t){t&&t.message&&o.current.name===t.message.state&&(!t.message.state.match(/^app\.patient\./)||parseInt(s.id)&&t.message.params&&parseInt(s.id)==parseInt(t.message.params.id))&&(passedLocationDiffersFromCurrent(t)||(t.message.function_name?e.$broadcast(t.message.function_name,t.message.params):o.go(t.message.state,t.message.params,{reload:!0})))};var r={cable:null,createCable:function(){if(-1!=n.indexOf("3000"));else{var e=t.getAuth();void 0!==e&&(r.cable=ActionCable.createConsumer("wss://"+a+"/cable?token="+e+"&subdomain="+t.getUserSubdomain()),r.subscribeToChannel("NotifChannel",r.initializeHooks))}},channel:null,subscribeToChannel:function(e,t,n){r.channel=r.cable.subscriptions.create(e,t,n)},initializeHooks:{connected:function(){},disconnected:function(){},rejected:function(){},received:function(t){"toast"==t.type?"success"==t.action?toaster.pop("success",t.message.title,t.message.body):"danger"==t.action?toaster.pop("error",t.message.title,t.message.body):toaster.pop("success",t.message.title,t.message.body):"popup"==t.type?(modal=e.message_modal({title:t.message.title,msg:t.message.body}),t.message.action&&"route"==t.message.action&&t.message.state&&modal.closePromise.then(function(e){!0===e.value&&o.go(t.message.state,t.message.params,{reload:!0})})):"notif_or_background"==t.type&&t.message?(t.message.state&&o.current.name===t.message.state?browserTabIsActive()&&!passedLocationDiffersFromCurrent(t)||showNotification(t):showNotification(t),backgroundJob(t)):"background"==t.type&&t.message&&t.message.action&&"refresh"==t.message.action&&t.message.state?backgroundJob(t):"notif"==t.type?showNotification(t):lg("Unrecognized notif type",t)}},notif_types:["appt-request","appt-resched","cancellation","no-show"],sendMsg:function(e){r.cable.send({command:"message",identifier:'{"channel":"NotifChannel"}',data:JSON.stringify({action:"sendmsg",params:e})})}};return r.createCable(),r}]),App.service("datesInTimezone",["$rootScope",function(e){return{convertToInstTimezone:function(t,n){var a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return!!e.timezone&&(converted_date_start=moment(t).startOf("day"),converted_date_end=moment(n).endOf("day"),converted_date_start_offset=converted_date_start.utcOffset(),converted_date_end_offset=converted_date_end.utcOffset(),converted_date_start=moment.tz(converted_date_start,e.timezone),converted_date_start.add(converted_date_start_offset-converted_date_start.utcOffset(),"minutes"),converted_date_end=moment.tz(converted_date_end,e.timezone),converted_date_end.add(converted_date_end_offset-converted_date_end.utcOffset(),"minutes"),a?[converted_date_start.toISOString(),converted_date_end.toISOString()]:[converted_date_start,converted_date_end])},convertFromUserToLocTimezone:function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return converted_date=moment(t),converted_date_offset=converted_date.utcOffset(),converted_date=moment.tz(converted_date,e.timezone),converted_date.add(converted_date_offset-converted_date.utcOffset(),"minutes"),n?converted_date.toISOString():converted_date},convertFromLocToUtcTimezone:function(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return converted_date=moment.tz(t,e.timezone),converted_date.add(-converted_date.utcOffset(),"minutes"),n?converted_date.toISOString():converted_date}}}]),App.service("fileResponse",function(){return{download:function(e,t){contentDispositionHeader=e.headers("Content-Disposition"),contentDispositionHeader?filename_from_header=contentDispositionHeader.match(/filename=['"](.+)['"]/):filename_from_header=null,filename_from_header?filename=filename_from_header[1].replace(/"/g,""):filename=t,blob=new Blob([e.data],{type:"text/csv"}),anchor=document.createElement("a"),anchor.download=filename,anchor.href=window.URL.createObjectURL(blob),anchor.click()}}}),App.service("filterByDate",["$rootScope","datesInTimezone",function(e,t){return{toggleFilter:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e[t]=!!n||!e[t],"sentdate"!=t||e[t]||(delete e.search_by_date.sentdate_before,delete e.search_by_date.sentdate_after),"apptdate"!=t||e[t]||(delete e.search_by_date.apptdate_before,delete e.search_by_date.apptdate_after)},clearFilterDateRange:function(e){e.dateRangePicker.created_at={startDate:null,endDate:null},e.load_daterange_filter_init=!1},initDateRangePicker:function(e){var n=this;e.dateRangePicker={options:{locale:{format:"MMM D, YYYY",cancelLabel:"Clear"},showDropdowns:!0,opens:"left",eventHandlers:{"cancel.daterangepicker":function(t,a){n.clearFilterDateRange(e),e.load_daterange_filter_init=!0}}}},this.clearFilterDateRange(e),e.$watch("dateRangePicker.created_at",function(){daterange_changed=!0,e.dateRangePicker.created_at&&e.dateRangePicker.created_at.startDate&&e.dateRangePicker.created_at.endDate?e.created_at_start==e.dateRangePicker.created_at.startDate&&e.created_at_end==e.dateRangePicker.created_at.endDate?daterange_changed=!1:(converted_dates=t.convertToInstTimezone(e.dateRangePicker.created_at.startDate,e.dateRangePicker.created_at.endDate,!1),e.created_at_start=converted_dates[0],e.created_at_end=converted_dates[1]):e.created_at_start||e.created_at_end?e.created_at_start=e.created_at_end=null:daterange_changed=!1,e.load_daterange_filter_init?daterange_changed&&e.tableParams&&(e.tableParams.page(1),e.tableParams.reload()):e.load_daterange_filter_init=!0})}}}]),App.service("GTMService",["$window","GTM_TAGS","GTM_TAG_EVENT_PREFIX",function(e,t,n){return{pushEvent:function(t){(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])&&(t.event=n?""+n+t.event:t.event),e.dataLayer=e.dataLayer||[],e.dataLayer.push(t)},filterTagByEnv:function(e,n){var a=[],i=t.gtmTag;a=t.includeInstGtmTags&&e?[i,e].filter(Boolean):[i].filter(Boolean),a.length&&n(a)}}}]),App.service("navSearch",function(){return{toggle:function(){var e=$("form.navbar-form");e.toggleClass("open");var t=e.hasClass("open");e.find("input")[t?"focus":"blur"]()},dismiss:function(){$("form.navbar-form").removeClass("open").find('input[type="text"]').blur().val("")}}}),App.service("Perm",["$rootScope","$api","$q","authService",function(e,t,n,a){perm_promise_deferred=n.defer();var i={perm_promise:perm_promise_deferred.promise,permtypes:["edit_settings","edit_profile","schedule","get_notifs","view_patients","charge","message","sync","surveys","campaigns","analytics","forms"],rawcolleagues:[],colleagues:{},myself:{},updateMyself:function(){i.myself={id:a.getUserId(),name:a.getUserName(),meta_type:a.getUserType(),min_appt_length:a.getMinApptLength(),patientable:a.isPatientable(),isChecked:!1}},getConnections:function(){i.updateMyself(),t("GET","/me").then(function(t,n){var a=t.data.data;if(null==a||"Patient"==a.user.meta_type)return lg("Got user auth:",a),lg("Logging out from getConnections"),e.logOut(),!1;i.rawcolleagues=a.colleagues,e.user=a.user,e.user.is_nexhealth_staff=!!e.user.email.match(/.*@nexhealth.com$/),"Doctor"!=i.myself.meta_type&&_.each(i.rawcolleagues,function(e){e.isChecked=!1}),i.institution=a.institution,i.institutions=a.institutions,i.has_institutions=a.has_institutions,i.institution&&(i.default_has_institution=_.find(a.has_institutions,{institution_id:i.institution.id})),i.locations=a.locations,i.has_locations=a.has_locations,i.location_colleague_ids=a.location_colleague_ids,e.location&&e.location.id?i.default_location=_.find(a.locations,{id:e.location.id}):(i.default_has_location=_.find(a.has_locations,{default:!0}),i.default_has_location?i.default_location=_.find(a.locations,{id:i.default_has_location.location_id}):i.default_location=i.locations[0]),e.institutions=i.institutions,e.locations=i.locations,e.locationhash=_.keyBy(i.locations,"id"),i.set_inst(i.institution),i.set_loc(i.default_location,!0),i.processColleagues(),e.providers_meta_types=a.providers_meta_types,perm_promise_deferred.resolve(!0),e.apploaded=!0},function(t,n){e.loaderror=!0})},set_inst:function(t){i.institution=t,i.has_institution=_.find(i.has_institutions,function(e){return e.institution_id==t.id}),i.is_inst_admin=-1!=i.has_institution.permissions.indexOf("admin"),e.is_inst_admin=i.is_inst_admin,e.institution=t,e.has_institution=i.has_institution,e.$broadcast("inst_change",t)},set_loc:function(t,n){i.default_location=t,i.has_location=_.find(i.has_locations,function(e){return e.location_id==t.id}),e.location=t,setTimezone(),e.has_location=i.has_location,n||e.$broadcast("loc_change",t)},friends:function(t){if(void 0===t)var t={};if(t.no_self)var n=i.rawcolleagues;else var n=i.self_and_colleagues;if(!t.all_locations){if(t.location_id)var a=t.location_id;else var a=e.location.id;a instanceof Array||(a=[a]),cids=[i.myself.id],_.each(a,function(e){cids=cids.concat(i.location_colleague_ids[e.toString()])}),n=_.filter(n,function(e){return-1!=cids.indexOf(e.id)})}return t.show_non_patientables||(n=_.filter(n,function(e){return e.patientable})),t.no_sort||(n=_.sortBy(n,function(e){return e.id!=i.myself.id})),t.dup&&(n=angular.copy(n)),result={result:_.uniqBy(n,"id")},t.ids&&(result.ids=_.map(result.result,"id")),result},locsearch:function(e){var t=i.locations,n={};if(void 0===e&&(e={}),e.admin){var a=_.map(_.filter(i.has_locations,function(e){return-1!=e.permissions.indexOf("admin")}),"location_id");t=_.filter(t,function(e){return-1!=a.indexOf(e.id)})}if(e.perm){var o=_.map(_.filter(i.has_locations,function(t){return-1!=t.permissions.indexOf("admin")||-1!=t.permissions.indexOf(e.perm)}),"location_id");t=_.filter(t,function(e){return-1!=o.indexOf(e.id)})}return e.in_ids&&(t=_.filter(t,function(t){return-1!=e.in_ids.indexOf(t.id)})),n.locs=t,e.ids&&(n.ids=_.map(t,"id")),n},admin_locations:function(){var e=_.map(_.filter(i.has_locations,function(e){e.permissions.indexOf("admin")}),"id");_.filter(i.locations,function(t){e.indexof(t.id)})},can_access_tab:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return(!e.user.permission||e.user.permission[t])&&(!n||i.institution.privileges&&i.institution.privileges[n])},admin_at_current_inst:function(){var e=_.find(i.has_institutions,{institution_id:i.institution.id});return void 0!==e&&-1!=e.permissions.indexOf("admin")},admin_at_current_loc:function(){var t=_.find(i.has_locations,{location_id:e.location.id});return void 0!==t&&-1!=t.permissions.indexOf("admin")},processColleagues:function(){i.colleagues={},_.each(i.rawcolleagues,function(e){i.colleagues[e.id]=e}),i.self_and_colleagues=i.rawcolleagues.slice(),i.self_and_colleagues.unshift(i.myself)}};return setTimezone=function(){var t;e.location&&e.location.tz&&(t=e.location.tz),angular.isUndefined(t)&&e.institution&&e.institution.tz&&(t=e.institution.tz),e.timezone=t},i}]),App.service("restlite",["$api","responseHelper",function(e,t){return{gen_factory:function(n){var a=n.indexbase||n.base,i=n.createbase||n.base,o=n.showbase||n.base+"/",s=n.updatebase||n.base+"/",r=n.deletebase||n.base+"/",l=n.putbase||n.base+"/",c=function(e,t){var n=e,a=!0,i=!1,o=void 0;try{for(var s,r=t[Symbol.iterator]();!(a=(s=r.next()).done);a=!0){var l=s.value;if(void 0===(n="function"==typeof l?l(n):n[l]))return}}catch(e){i=!0,o=e}finally{try{!a&&r.return&&r.return()}finally{if(i)throw o}}return n},p=function(e,a,i,o){var s=function(e){if(o.unwrap&&(1==o.unwrap&&(o.unwrap=["data"]),Object.assign(e,c(e.data,o.unwrap))),n.no_resphelper||t.redirectOrToastOnResp({$response:e},n.successUri,n.errorUri),void 0!==a)return a(e)},r=function(e){if(n.no_resphelper||t.redirectOrToastOnResp({$response:e},n.successUri,n.errorUri),void 0!==i)return i(e)};return e.then(s,r)},d={show:function(t){return p(e("GET",o+t.id,t.params,void 0,t),t.succ,t.err,t)},update:function(t){return p(e("POST",s+t.id,{},t.params,t),t.succ,t.err,t)},
create:function(t){return p(e("POST",i,{},t.params,t),t.succ,t.err,t)},delete:function(t){return p(e("DELETE",r+t.id,t.params,void 0,t),t.succ,t.err,t)},put:function(t){return p(e("PUT",l+t.id,{},t.params,t),t.succ,t.err,t)},index:function(t){return p(e("GET",a,t.params,void 0,t),t.succ,t.err,t)}};return void 0!==n.add_methods&&_.each(n.add_methods,function(t){if(t.custom_url_fn)var a=t.custom_url_fn;else if(t.custom_url)var a=function(e){return t.custom_url};else if(t.id)if(t.append)var a=function(e){return n.base+"/"+e.id+t.append};else var a=function(e){return n.base+"/"+e.id};else if(t.append)var a=function(e){return n.base+t.append};else var a=function(e){return n.base};d[t.name]=function(n){return p(e(t.method,a(n),n.params),n.succ,n.err,n)}}),d}}}]),App.provider("RouteHelpers",["APP_REQUIRES",function(e){this.basepath=function(e){return"app/views/"+e},this.resolveFor=function(){var t=arguments;return{deps:["$ocLazyLoad","$q",function(n,a){function i(t){if(e.modules)for(var n in e.modules)if(e.modules[n].name&&e.modules[n].name===t)return e.modules[n];return e.scripts&&e.scripts[t]}for(var o=a.when(1),s=0,r=t.length;s<r;s++)o=function(e){return"function"==typeof e?o.then(e):o.then(function(){var t=i(e);return t?n.load(t):$.error("Route resolve: Bad resource name ["+e+"]")})}(t[s]);return o}]}},this.$get=function(){}}]),App.service("toggleStateService",["$rootScope",function(e){var t={hasWord:function(e,t){return new RegExp("(^|\\s)"+t+"(\\s|$)").test(e)},addWord:function(e,t){if(!this.hasWord(e,t))return e+(e?" ":"")+t},removeWord:function(e,t){if(this.hasWord(e,t))return e.replace(new RegExp("(^|\\s)*"+t+"(\\s|$)*","g"),"")}};return{addState:function(n){if(e.localStorageSupport){var a=angular.fromJson(e.$storage.toggleState);a=a?t.addWord(a,n):n,e.$storage.toggleState=angular.toJson(a)}},removeState:function(n){var a=null;e.localStorageSupport&&(a=e.$storage.toggleState),a&&(a=t.removeWord(a,n),e.$storage.toggleState=angular.toJson(a))},restoreState:function(t){var n=null;e.localStorageSupport&&(n=angular.fromJson(e.$storage.toggleState)),n&&t.addClass(n)}}}]),App.service("Utils",["$window","APP_MEDIAQUERY",function(e,t){var n=angular.element("html"),a=angular.element(e),i=angular.element("body");return{support:{transition:function(){var e=function(){var e=document.body||document.documentElement,t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},n=void 0;for(n in t)if(void 0!==e.style[n])return t[n]}();return e&&{end:e}}(),animation:function(){var e=function(){var e=document.body||document.documentElement,t={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"},n=void 0;for(n in t)if(void 0!==e.style[n])return t[n]}();return e&&{end:e}}(),requestAnimationFrame:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},touch:"ontouchstart"in window&&navigator.userAgent.toLowerCase().match(/mobile|tablet/)||window.DocumentTouch&&document instanceof window.DocumentTouch||window.navigator.msPointerEnabled&&window.navigator.msMaxTouchPoints>0||window.navigator.pointerEnabled&&window.navigator.maxTouchPoints>0||!1,mutationobserver:window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver||null},isInView:function(e,t){var n=$(e);if(!n.is(":visible"))return!1;var i=a.scrollLeft(),o=a.scrollTop(),s=n.offset(),r=s.left,l=s.top;return t=$.extend({topoffset:0,leftoffset:0},t),l+n.height()>=o&&l-t.topoffset<=o+a.height()&&r+n.width()>=i&&r-t.leftoffset<=i+a.width()},langdirection:"rtl"==n.attr("dir")?"right":"left",isTouch:function(){return n.hasClass("touch")},isSidebarCollapsed:function(){return i.hasClass("aside-collapsed")},isSidebarToggled:function(){return i.hasClass("aside-toggled")},isMobile:function(){return a.width()<t.tablet},isNum:function(e){return/^\d+$/.test(e)}}}]),App.filter("titleCase",function(){return function(e){return e=e||"",e.replace(/\w\S*/g,function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()})}});var myApp=angular.module("myAppName",["angle"]);myApp.run(["$log",function(e){e.log("I'm a line from custom.js")}]),myApp.config(["RouteHelpersProvider",function(e){}]),myApp.controller("oneOfMyOwnController",["$scope",function(e){}]),myApp.directive("oneOfMyOwnDirectives",function(){}),myApp.config(["$stateProvider",function(e){}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
